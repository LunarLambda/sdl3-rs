/* automatically generated by rust-bindgen 0.66.1 */

pub type wchar_t = ::std::os::raw::c_ushort;
pub type SDL_bool = ::std::os::raw::c_uint;
pub type Sint8 = i8;
pub type Uint8 = u8;
pub type Sint16 = i16;
pub type Uint16 = u16;
pub type Sint32 = i32;
pub type Uint32 = u32;
pub type Sint64 = i64;
pub type Uint64 = u64;
pub type SDL_malloc_func =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type SDL_calloc_func = ::std::option::Option<
    unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type SDL_realloc_func = ::std::option::Option<
    unsafe extern "C" fn(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type SDL_free_func =
    ::std::option::Option<unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void)>;
pub type SDL_iconv_t = *mut SDL_iconv_data_t;
pub type SDL_FunctionPointer = ::std::option::Option<unsafe extern "C" fn()>;
pub type SDL_AssertState = ::std::os::raw::c_uint;
pub type SDL_AssertionHandler = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const SDL_AssertData,
        userdata: *mut ::std::os::raw::c_void,
    ) -> SDL_AssertState,
>;
pub type SDL_SpinLock = ::std::os::raw::c_int;
pub type SDL_errorcode = ::std::os::raw::c_uint;
pub type SDL_threadID = ::std::os::raw::c_ulong;
pub type SDL_TLSID = ::std::os::raw::c_uint;
pub type SDL_ThreadPriority = ::std::os::raw::c_uint;
pub type SDL_ThreadFunction = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type pfnSDL_CurrentBeginThread = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> usize,
>;
pub type pfnSDL_CurrentEndThread =
    ::std::option::Option<unsafe extern "C" fn(code: ::std::os::raw::c_uint)>;
pub type SDL_AudioFormat = Uint16;
pub type SDL_AudioDeviceID = Uint32;
pub type SDL_AudioStreamRequestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut SDL_AudioStream,
        approx_request: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type SDL_BlendMode = ::std::os::raw::c_uint;
pub type SDL_BlendOperation = ::std::os::raw::c_uint;
pub type SDL_BlendFactor = ::std::os::raw::c_uint;
pub type SDL_ClipboardDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        mime_type: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_void,
>;
pub type SDL_ClipboardCleanupCallback =
    ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>;
pub type SDL_SensorID = Uint32;
pub type SDL_SensorType = ::std::os::raw::c_int;
pub type SDL_JoystickGUID = SDL_GUID;
pub type SDL_JoystickID = Uint32;
pub type SDL_JoystickType = ::std::os::raw::c_uint;
pub type SDL_JoystickPowerLevel = ::std::os::raw::c_int;
pub type SDL_GamepadType = ::std::os::raw::c_uint;
pub type SDL_GamepadButton = ::std::os::raw::c_int;
pub type SDL_GamepadAxis = ::std::os::raw::c_int;
pub type SDL_Scancode = ::std::os::raw::c_uint;
pub type SDL_Keycode = Sint32;
pub type SDL_KeyCode = ::std::os::raw::c_uint;
pub type SDL_Keymod = ::std::os::raw::c_uint;
pub type SDL_PixelType = ::std::os::raw::c_uint;
pub type SDL_BitmapOrder = ::std::os::raw::c_uint;
pub type SDL_PackedOrder = ::std::os::raw::c_uint;
pub type SDL_ArrayOrder = ::std::os::raw::c_uint;
pub type SDL_PackedLayout = ::std::os::raw::c_uint;
pub type SDL_PixelFormatEnum = ::std::os::raw::c_uint;
pub type SDL_blit = ::std::option::Option<
    unsafe extern "C" fn(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int,
>;
pub type SDL_YUV_CONVERSION_MODE = ::std::os::raw::c_uint;
pub type SDL_DisplayID = Uint32;
pub type SDL_WindowID = Uint32;
pub type SDL_SystemTheme = ::std::os::raw::c_uint;
pub type SDL_DisplayOrientation = ::std::os::raw::c_uint;
pub type SDL_WindowFlags = ::std::os::raw::c_uint;
pub type SDL_FlashOperation = ::std::os::raw::c_uint;
pub type SDL_GLContext = *mut ::std::os::raw::c_void;
pub type SDL_EGLDisplay = *mut ::std::os::raw::c_void;
pub type SDL_EGLConfig = *mut ::std::os::raw::c_void;
pub type SDL_EGLSurface = *mut ::std::os::raw::c_void;
pub type SDL_EGLAttrib = isize;
pub type SDL_EGLint = ::std::os::raw::c_int;
pub type SDL_EGLAttribArrayCallback =
    ::std::option::Option<unsafe extern "C" fn() -> *mut SDL_EGLAttrib>;
pub type SDL_EGLIntArrayCallback = ::std::option::Option<unsafe extern "C" fn() -> *mut SDL_EGLint>;
pub type SDL_GLattr = ::std::os::raw::c_uint;
pub type SDL_GLprofile = ::std::os::raw::c_uint;
pub type SDL_GLcontextFlag = ::std::os::raw::c_uint;
pub type SDL_GLcontextReleaseFlag = ::std::os::raw::c_uint;
pub type SDL_GLContextResetNotification = ::std::os::raw::c_uint;
pub type SDL_HitTestResult = ::std::os::raw::c_uint;
pub type SDL_HitTest = ::std::option::Option<
    unsafe extern "C" fn(
        win: *mut SDL_Window,
        area: *const SDL_Point,
        data: *mut ::std::os::raw::c_void,
    ) -> SDL_HitTestResult,
>;
pub type SDL_MouseID = Uint32;
pub type SDL_SystemCursor = ::std::os::raw::c_uint;
pub type SDL_MouseWheelDirection = ::std::os::raw::c_uint;
pub type SDL_TouchID = Sint64;
pub type SDL_FingerID = Sint64;
pub type SDL_TouchDeviceType = ::std::os::raw::c_int;
pub type SDL_EventType = ::std::os::raw::c_uint;
pub type SDL_eventaction = ::std::os::raw::c_uint;
pub type SDL_EventFilter = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        event: *mut SDL_Event,
    ) -> ::std::os::raw::c_int,
>;
pub type SDL_Folder = ::std::os::raw::c_uint;
pub type SDL_hid_device = SDL_hid_device_;
pub type SDL_hid_bus_type = ::std::os::raw::c_uint;
pub type SDL_HintPriority = ::std::os::raw::c_uint;
pub type SDL_HintCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        oldValue: *const ::std::os::raw::c_char,
        newValue: *const ::std::os::raw::c_char,
    ),
>;
pub type SDL_InitFlags = ::std::os::raw::c_uint;
pub type SDL_LogCategory = ::std::os::raw::c_uint;
pub type SDL_LogPriority = ::std::os::raw::c_uint;
pub type SDL_LogOutputFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        category: ::std::os::raw::c_int,
        priority: SDL_LogPriority,
        message: *const ::std::os::raw::c_char,
    ),
>;
pub type SDL_MessageBoxFlags = ::std::os::raw::c_uint;
pub type SDL_MessageBoxButtonFlags = ::std::os::raw::c_uint;
pub type SDL_MessageBoxColorType = ::std::os::raw::c_uint;
pub type SDL_MetalView = *mut ::std::os::raw::c_void;
pub type SDL_PowerState = ::std::os::raw::c_uint;
pub type SDL_RendererFlags = ::std::os::raw::c_uint;
pub type SDL_ScaleMode = ::std::os::raw::c_uint;
pub type SDL_TextureAccess = ::std::os::raw::c_uint;
pub type SDL_TextureModulate = ::std::os::raw::c_uint;
pub type SDL_RendererFlip = ::std::os::raw::c_uint;
pub type SDL_RendererLogicalPresentation = ::std::os::raw::c_uint;
pub type WindowShapeMode = ::std::os::raw::c_uint;
pub type SDL_WindowsMessageHook = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        hWnd: *mut ::std::os::raw::c_void,
        message: ::std::os::raw::c_uint,
        wParam: Uint64,
        lParam: Sint64,
    ),
>;
pub type SDL_TimerCallback = ::std::option::Option<
    unsafe extern "C" fn(interval: Uint32, param: *mut ::std::os::raw::c_void) -> Uint32,
>;
pub type SDL_TimerID = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type HINSTANCE = *mut HINSTANCE__;
pub type HWND = *mut HWND__;
pub type HDC = *mut HDC__;
pub type SDL_SYSWM_TYPE = ::std::os::raw::c_uint;
pub type VkInstance = *mut VkInstance_T;
pub type VkSurfaceKHR = *mut VkSurfaceKHR_T;
pub type SDL_vulkanInstance = VkInstance;
pub type SDL_vulkanSurface = VkSurfaceKHR;
pub type SDL_main_func = ::std::option::Option<
    unsafe extern "C" fn(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_iconv_data_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AssertData {
    pub always_ignore: ::std::os::raw::c_int,
    pub trigger_count: ::std::os::raw::c_uint,
    pub condition: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
    pub linenum: ::std::os::raw::c_int,
    pub function: *const ::std::os::raw::c_char,
    pub next: *const SDL_AssertData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AtomicInt {
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWLock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Semaphore {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Condition {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops {
    pub size: ::std::option::Option<unsafe extern "C" fn(context: *mut SDL_RWops) -> Sint64>,
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            offset: Sint64,
            whence: ::std::os::raw::c_int,
        ) -> Sint64,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(context: *mut SDL_RWops) -> ::std::os::raw::c_int,
    >,
    pub type_: Uint32,
    pub status: Uint32,
    pub hidden: SDL_RWops__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_1 {
    pub append: SDL_bool,
    pub h: *mut ::std::os::raw::c_void,
    pub buffer: SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub data: *mut ::std::os::raw::c_void,
    pub size: usize,
    pub left: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_2 {
    pub autoclose: SDL_bool,
    pub fp: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_3 {
    pub base: *mut Uint8,
    pub here: *mut Uint8,
    pub stop: *mut Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_4 {
    pub data1: *mut ::std::os::raw::c_void,
    pub data2: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioSpec {
    pub format: SDL_AudioFormat,
    pub channels: ::std::os::raw::c_int,
    pub freq: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioStream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Sensor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GUID {
    pub data: [Uint8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Joystick {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_VirtualJoystickDesc {
    pub version: Uint16,
    pub type_: Uint16,
    pub naxes: Uint16,
    pub nbuttons: Uint16,
    pub nhats: Uint16,
    pub vendor_id: Uint16,
    pub product_id: Uint16,
    pub padding: Uint16,
    pub button_mask: Uint32,
    pub axis_mask: Uint32,
    pub name: *const ::std::os::raw::c_char,
    pub userdata: *mut ::std::os::raw::c_void,
    pub Update: ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>,
    pub SetPlayerIndex: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            player_index: ::std::os::raw::c_int,
        ),
    >,
    pub Rumble: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            low_frequency_rumble: Uint16,
            high_frequency_rumble: Uint16,
        ) -> ::std::os::raw::c_int,
    >,
    pub RumbleTriggers: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            left_rumble: Uint16,
            right_rumble: Uint16,
        ) -> ::std::os::raw::c_int,
    >,
    pub SetLED: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            red: Uint8,
            green: Uint8,
            blue: Uint8,
        ) -> ::std::os::raw::c_int,
    >,
    pub SendEffect: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            data: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Gamepad {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Color {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
    pub a: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Palette {
    pub ncolors: ::std::os::raw::c_int,
    pub colors: *mut SDL_Color,
    pub version: Uint32,
    pub refcount: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_PixelFormat {
    pub format: Uint32,
    pub palette: *mut SDL_Palette,
    pub BitsPerPixel: Uint8,
    pub BytesPerPixel: Uint8,
    pub padding: [Uint8; 2usize],
    pub Rmask: Uint32,
    pub Gmask: Uint32,
    pub Bmask: Uint32,
    pub Amask: Uint32,
    pub Rloss: Uint8,
    pub Gloss: Uint8,
    pub Bloss: Uint8,
    pub Aloss: Uint8,
    pub Rshift: Uint8,
    pub Gshift: Uint8,
    pub Bshift: Uint8,
    pub Ashift: Uint8,
    pub refcount: ::std::os::raw::c_int,
    pub next: *mut SDL_PixelFormat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_FPoint {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Rect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_FRect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_BlitMap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Surface {
    pub flags: Uint32,
    pub format: *mut SDL_PixelFormat,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub pitch: ::std::os::raw::c_int,
    pub pixels: *mut ::std::os::raw::c_void,
    pub userdata: *mut ::std::os::raw::c_void,
    pub locked: ::std::os::raw::c_int,
    pub list_blitmap: *mut ::std::os::raw::c_void,
    pub clip_rect: SDL_Rect,
    pub map: *mut SDL_BlitMap,
    pub refcount: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DisplayMode {
    pub displayID: SDL_DisplayID,
    pub format: Uint32,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub pixel_density: f32,
    pub refresh_rate: f32,
    pub driverdata: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Keysym {
    pub scancode: SDL_Scancode,
    pub sym: SDL_Keycode,
    pub mod_: Uint16,
    pub unused: Uint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Cursor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Finger {
    pub id: SDL_FingerID,
    pub x: f32,
    pub y: f32,
    pub pressure: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_CommonEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DisplayEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub displayID: SDL_DisplayID,
    pub data1: Sint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_WindowEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub data1: Sint32,
    pub data2: Sint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_KeyboardEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub state: Uint8,
    pub repeat: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub keysym: SDL_Keysym,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextEditingEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub text: [::std::os::raw::c_char; 32usize],
    pub start: Sint32,
    pub length: Sint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextEditingExtEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub text: *mut ::std::os::raw::c_char,
    pub start: Sint32,
    pub length: Sint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextInputEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub text: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseMotionEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub which: SDL_MouseID,
    pub state: Uint32,
    pub x: f32,
    pub y: f32,
    pub xrel: f32,
    pub yrel: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub which: SDL_MouseID,
    pub button: Uint8,
    pub state: Uint8,
    pub clicks: Uint8,
    pub padding: Uint8,
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseWheelEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub which: SDL_MouseID,
    pub x: f32,
    pub y: f32,
    pub direction: Uint32,
    pub mouseX: f32,
    pub mouseY: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyAxisEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub value: Sint16,
    pub padding4: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyHatEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub hat: Uint8,
    pub value: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub button: Uint8,
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyBatteryEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub level: SDL_JoystickPowerLevel,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadAxisEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    pub value: Sint16,
    pub padding4: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadButtonEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub button: Uint8,
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadTouchpadEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub touchpad: Sint32,
    pub finger: Sint32,
    pub x: f32,
    pub y: f32,
    pub pressure: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadSensorEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_JoystickID,
    pub sensor: Sint32,
    pub data: [f32; 3usize],
    pub sensor_timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioDeviceEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_AudioDeviceID,
    pub iscapture: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TouchFingerEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub touchId: SDL_TouchID,
    pub fingerId: SDL_FingerID,
    pub x: f32,
    pub y: f32,
    pub dx: f32,
    pub dy: f32,
    pub pressure: f32,
    pub windowID: SDL_WindowID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DropEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub file: *mut ::std::os::raw::c_char,
    pub windowID: SDL_WindowID,
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_ClipboardEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SensorEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub which: SDL_SensorID,
    pub data: [f32; 6usize],
    pub sensor_timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_QuitEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_OSEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_UserEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub windowID: SDL_WindowID,
    pub code: Sint32,
    pub data1: *mut ::std::os::raw::c_void,
    pub data2: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SysWMEvent {
    pub type_: Uint32,
    pub timestamp: Uint64,
    pub msg: *mut SDL_SysWMmsg,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Haptic {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticDirection {
    pub type_: Uint8,
    pub dir: [Sint32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticConstant {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub level: Sint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticPeriodic {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub period: Uint16,
    pub magnitude: Sint16,
    pub offset: Sint16,
    pub phase: Uint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticCondition {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub right_sat: [Uint16; 3usize],
    pub left_sat: [Uint16; 3usize],
    pub right_coeff: [Sint16; 3usize],
    pub left_coeff: [Sint16; 3usize],
    pub deadband: [Uint16; 3usize],
    pub center: [Sint16; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticRamp {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub start: Sint16,
    pub end: Sint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticLeftRight {
    pub type_: Uint16,
    pub length: Uint32,
    pub large_magnitude: Uint16,
    pub small_magnitude: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticCustom {
    pub type_: Uint16,
    pub direction: SDL_HapticDirection,
    pub length: Uint32,
    pub delay: Uint16,
    pub button: Uint16,
    pub interval: Uint16,
    pub channels: Uint8,
    pub period: Uint16,
    pub samples: Uint16,
    pub data: *mut Uint16,
    pub attack_length: Uint16,
    pub attack_level: Uint16,
    pub fade_length: Uint16,
    pub fade_level: Uint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_hid_device_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_hid_device_info {
    pub path: *mut ::std::os::raw::c_char,
    pub vendor_id: ::std::os::raw::c_ushort,
    pub product_id: ::std::os::raw::c_ushort,
    pub serial_number: *mut wchar_t,
    pub release_number: ::std::os::raw::c_ushort,
    pub manufacturer_string: *mut wchar_t,
    pub product_string: *mut wchar_t,
    pub usage_page: ::std::os::raw::c_ushort,
    pub usage: ::std::os::raw::c_ushort,
    pub interface_number: ::std::os::raw::c_int,
    pub interface_class: ::std::os::raw::c_int,
    pub interface_subclass: ::std::os::raw::c_int,
    pub interface_protocol: ::std::os::raw::c_int,
    pub bus_type: SDL_hid_bus_type,
    pub next: *mut SDL_hid_device_info,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Locale {
    pub language: *const ::std::os::raw::c_char,
    pub country: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxButtonData {
    pub flags: Uint32,
    pub buttonid: ::std::os::raw::c_int,
    pub text: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxColor {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxColorScheme {
    pub colors: [SDL_MessageBoxColor; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxData {
    pub flags: Uint32,
    pub window: *mut SDL_Window,
    pub title: *const ::std::os::raw::c_char,
    pub message: *const ::std::os::raw::c_char,
    pub numbuttons: ::std::os::raw::c_int,
    pub buttons: *const SDL_MessageBoxButtonData,
    pub colorScheme: *const SDL_MessageBoxColorScheme,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RendererInfo {
    pub name: *const ::std::os::raw::c_char,
    pub flags: Uint32,
    pub num_texture_formats: Uint32,
    pub texture_formats: [Uint32; 16usize],
    pub max_texture_width: ::std::os::raw::c_int,
    pub max_texture_height: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Vertex {
    pub position: SDL_FPoint,
    pub color: SDL_Color,
    pub tex_coord: SDL_FPoint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Renderer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Texture {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_WindowShapeMode {
    pub mode: WindowShapeMode,
    pub parameters: SDL_WindowShapeParams,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IDirect3DDevice9 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D11Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Device {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_version {
    pub major: Uint8,
    pub minor: Uint8,
    pub patch: Uint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_SysWMmsg {
    pub version: Uint32,
    pub subsystem: Uint32,
    pub padding: [Uint32; 2usize],
    pub msg: SDL_SysWMmsg__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1 {
    pub hwnd: HWND,
    pub msg: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_SysWMinfo {
    pub version: Uint32,
    pub subsystem: Uint32,
    pub padding: [Uint32; 2usize],
    pub info: SDL_SysWMinfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1 {
    pub window: HWND,
    pub hdc: HDC,
    pub hinstance: HINSTANCE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceKHR_T {
    _unused: [u8; 0],
}
pub const SDL_SIZE_MAX: i32 = -1;
#[allow(unsafe_code)]
pub const SDL_PRIs64: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"I64d\0") };
#[allow(unsafe_code)]
pub const SDL_PRIu64: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"llu\0") };
#[allow(unsafe_code)]
pub const SDL_PRIx64: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"llx\0") };
#[allow(unsafe_code)]
pub const SDL_PRIX64: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"llX\0") };
#[allow(unsafe_code)]
pub const SDL_PRIs32: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"d\0") };
#[allow(unsafe_code)]
pub const SDL_PRIu32: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"u\0") };
#[allow(unsafe_code)]
pub const SDL_PRIx32: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"x\0") };
#[allow(unsafe_code)]
pub const SDL_PRIX32: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"X\0") };
pub const SDL_PI_D: f64 = 3.141592653589793;
pub const SDL_PI_F: f64 = 3.141592653589793;
pub const SDL_ASSERT_LEVEL: u32 = 2;
pub const SDL_LIL_ENDIAN: u32 = 1234;
pub const SDL_BIG_ENDIAN: u32 = 4321;
pub const SDL_BYTEORDER: u32 = 1234;
pub const SDL_FLOATWORDORDER: u32 = 1234;
pub const SDL_MUTEX_TIMEDOUT: u32 = 1;
pub const SDL_MUTEX_MAXWAIT: i32 = -1;
pub const SDL_RWLOCK_TIMEDOUT: u32 = 1;
pub const SDL_RWOPS_UNKNOWN: u32 = 0;
pub const SDL_RWOPS_WINFILE: u32 = 1;
pub const SDL_RWOPS_STDFILE: u32 = 2;
pub const SDL_RWOPS_JNIFILE: u32 = 3;
pub const SDL_RWOPS_MEMORY: u32 = 4;
pub const SDL_RWOPS_MEMORY_RO: u32 = 5;
pub const SDL_RWOPS_STATUS_READY: u32 = 0;
pub const SDL_RWOPS_STATUS_ERROR: u32 = 1;
pub const SDL_RWOPS_STATUS_EOF: u32 = 2;
pub const SDL_RWOPS_STATUS_NOT_READY: u32 = 3;
pub const SDL_RWOPS_STATUS_READONLY: u32 = 4;
pub const SDL_RWOPS_STATUS_WRITEONLY: u32 = 5;
pub const SDL_RW_SEEK_SET: u32 = 0;
pub const SDL_RW_SEEK_CUR: u32 = 1;
pub const SDL_RW_SEEK_END: u32 = 2;
pub const SDL_AUDIO_MASK_BITSIZE: u32 = 255;
pub const SDL_AUDIO_MASK_DATATYPE: u32 = 256;
pub const SDL_AUDIO_MASK_ENDIAN: u32 = 4096;
pub const SDL_AUDIO_MASK_SIGNED: u32 = 32768;
pub const SDL_AUDIO_U8: u32 = 8;
pub const SDL_AUDIO_S8: u32 = 32776;
pub const SDL_AUDIO_S16LSB: u32 = 32784;
pub const SDL_AUDIO_S16MSB: u32 = 36880;
pub const SDL_AUDIO_S16: u32 = 32784;
pub const SDL_AUDIO_S32LSB: u32 = 32800;
pub const SDL_AUDIO_S32MSB: u32 = 36896;
pub const SDL_AUDIO_S32: u32 = 32800;
pub const SDL_AUDIO_F32LSB: u32 = 33056;
pub const SDL_AUDIO_F32MSB: u32 = 37152;
pub const SDL_AUDIO_F32: u32 = 33056;
pub const SDL_AUDIO_S16SYS: u32 = 32784;
pub const SDL_AUDIO_S32SYS: u32 = 32800;
pub const SDL_AUDIO_F32SYS: u32 = 33056;
pub const SDL_MIX_MAXVOLUME: u32 = 128;
pub const SDL_CACHELINE_SIZE: u32 = 128;
pub const SDL_STANDARD_GRAVITY: f64 = 9.80665;
pub const SDL_JOYSTICK_AXIS_MAX: u32 = 32767;
pub const SDL_JOYSTICK_AXIS_MIN: i32 = -32768;
pub const SDL_IPHONE_MAX_GFORCE: f64 = 5.0;
pub const SDL_VIRTUAL_JOYSTICK_DESC_VERSION: u32 = 1;
pub const SDL_HAT_CENTERED: u32 = 0;
pub const SDL_HAT_UP: u32 = 1;
pub const SDL_HAT_RIGHT: u32 = 2;
pub const SDL_HAT_DOWN: u32 = 4;
pub const SDL_HAT_LEFT: u32 = 8;
pub const SDL_HAT_RIGHTUP: u32 = 3;
pub const SDL_HAT_RIGHTDOWN: u32 = 6;
pub const SDL_HAT_LEFTUP: u32 = 9;
pub const SDL_HAT_LEFTDOWN: u32 = 12;
pub const SDLK_SCANCODE_MASK: u32 = 1073741824;
pub const SDL_ALPHA_OPAQUE: u32 = 255;
pub const SDL_ALPHA_TRANSPARENT: u32 = 0;
pub const SDL_SWSURFACE: u32 = 0;
pub const SDL_PREALLOC: u32 = 1;
pub const SDL_RLEACCEL: u32 = 2;
pub const SDL_DONTFREE: u32 = 4;
pub const SDL_SIMD_ALIGNED: u32 = 8;
pub const SDL_WINDOWPOS_UNDEFINED_MASK: u32 = 536805376;
pub const SDL_WINDOWPOS_CENTERED_MASK: u32 = 805240832;
pub const SDL_BUTTON_LEFT: u32 = 1;
pub const SDL_BUTTON_MIDDLE: u32 = 2;
pub const SDL_BUTTON_RIGHT: u32 = 3;
pub const SDL_BUTTON_X1: u32 = 4;
pub const SDL_BUTTON_X2: u32 = 5;
pub const SDL_RELEASED: u32 = 0;
pub const SDL_PRESSED: u32 = 1;
pub const SDL_TEXTEDITINGEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_TEXTINPUTEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_HAPTIC_CONSTANT: u32 = 1;
pub const SDL_HAPTIC_SINE: u32 = 2;
pub const SDL_HAPTIC_LEFTRIGHT: u32 = 4;
pub const SDL_HAPTIC_TRIANGLE: u32 = 8;
pub const SDL_HAPTIC_SAWTOOTHUP: u32 = 16;
pub const SDL_HAPTIC_SAWTOOTHDOWN: u32 = 32;
pub const SDL_HAPTIC_RAMP: u32 = 64;
pub const SDL_HAPTIC_SPRING: u32 = 128;
pub const SDL_HAPTIC_DAMPER: u32 = 256;
pub const SDL_HAPTIC_INERTIA: u32 = 512;
pub const SDL_HAPTIC_FRICTION: u32 = 1024;
pub const SDL_HAPTIC_CUSTOM: u32 = 2048;
pub const SDL_HAPTIC_GAIN: u32 = 4096;
pub const SDL_HAPTIC_AUTOCENTER: u32 = 8192;
pub const SDL_HAPTIC_STATUS: u32 = 16384;
pub const SDL_HAPTIC_PAUSE: u32 = 32768;
pub const SDL_HAPTIC_POLAR: u32 = 0;
pub const SDL_HAPTIC_CARTESIAN: u32 = 1;
pub const SDL_HAPTIC_SPHERICAL: u32 = 2;
pub const SDL_HAPTIC_STEERING_AXIS: u32 = 3;
pub const SDL_HAPTIC_INFINITY: u32 = 4294967295;
#[allow(unsafe_code)]
pub const SDL_HINT_ACCELEROMETER_AS_JOYSTICK: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ACCELEROMETER_AS_JOYSTICK\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_ALLOW_TOPMOST: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ALLOW_TOPMOST\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ANDROID_BLOCK_ON_PAUSE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_ANDROID_TRAP_BACK_BUTTON: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ANDROID_TRAP_BACK_BUTTON\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_APP_ID: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_APP_ID\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_APP_NAME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_APP_NAME\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_CATEGORY: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_CATEGORY\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_DEVICE_APP_NAME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_DEVICE_APP_NAME\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_DEVICE_STREAM_NAME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_DEVICE_STREAM_NAME\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_DEVICE_STREAM_ROLE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUTO_UPDATE_JOYSTICKS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUTO_UPDATE_JOYSTICKS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUTO_UPDATE_SENSORS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUTO_UPDATE_SENSORS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_BMP_SAVE_LEGACY_FORMAT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_BMP_SAVE_LEGACY_FORMAT\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_DISPLAY_USABLE_BOUNDS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_DISPLAY_USABLE_BOUNDS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_EMSCRIPTEN_ASYNCIFY: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_EMSCRIPTEN_ASYNCIFY\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_EMSCRIPTEN_CANVAS_SELECTOR\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_ENABLE_SCREEN_KEYBOARD: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_ENABLE_SCREEN_KEYBOARD\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_EVENT_LOGGING: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_EVENT_LOGGING\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_FORCE_RAISEWINDOW: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_HINT_FORCE_RAISEWINDOW\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOW_ACTIVATE_WHEN_RAISED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_FRAMEBUFFER_ACCELERATION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_FRAMEBUFFER_ACCELERATION\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLERCONFIG: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLERCONFIG\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLERCONFIG_FILE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLERCONFIG_FILE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLERTYPE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLERTYPE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLER_IGNORE_DEVICES\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLER_USE_BUTTON_LABELS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_GAMECONTROLLER_SENSOR_FUSION: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GAMECONTROLLER_SENSOR_FUSION\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_GRAB_KEYBOARD: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GRAB_KEYBOARD\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_HIDAPI_IGNORE_DEVICES: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_HIDAPI_IGNORE_DEVICES\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_IME_INTERNAL_EDITING: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_IME_INTERNAL_EDITING\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_IME_SHOW_UI: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_IME_SHOW_UI\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_IME_SUPPORT_EXTENDED_TEXT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_IME_SUPPORT_EXTENDED_TEXT\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_IOS_HIDE_HOME_INDICATOR: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_IOS_HIDE_HOME_INDICATOR\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_GAMECUBE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_JOY_CONS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_LUNA: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_LUNA\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_SHIELD: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_SHIELD\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS3: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS3\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS4\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS5\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_STADIA: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_STADIA\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAM: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_STEAM\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_SWITCH\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_WII: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_WII\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX_360\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX_ONE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_RAWINPUT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_RAWINPUT\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_ROG_CHAKRAM: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_ROG_CHAKRAM\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_THREAD: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_THREAD\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_WGI: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_WGI\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_KMSDRM_REQUIRE_DRM_MASTER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_JOYSTICK_DEVICE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_JOYSTICK_DEVICE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_LINUX_DIGITAL_HATS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_LINUX_DIGITAL_HATS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_LINUX_HAT_DEADZONES: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_LINUX_HAT_DEADZONES\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_LINUX_JOYSTICK_CLASSIC: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_LINUX_JOYSTICK_CLASSIC\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_LINUX_JOYSTICK_DEADZONES: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_LINUX_JOYSTICK_DEADZONES\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MAC_BACKGROUND_APP: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MAC_BACKGROUND_APP\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MAC_OPENGL_ASYNC_DISPATCH\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_DOUBLE_CLICK_RADIUS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_DOUBLE_CLICK_TIME\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_FOCUS_CLICKTHROUGH\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_NORMAL_SPEED_SCALE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_RELATIVE_MODE_CENTER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_RELATIVE_MODE_CENTER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_RELATIVE_MODE_WARP: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_RELATIVE_MODE_WARP\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_RELATIVE_SPEED_SCALE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_RELATIVE_WARP_MOTION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_RELATIVE_WARP_MOTION\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_TOUCH_EVENTS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_TOUCH_EVENTS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_MOUSE_AUTO_CAPTURE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_MOUSE_AUTO_CAPTURE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_NO_SIGNAL_HANDLERS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_NO_SIGNAL_HANDLERS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_OPENGL_ES_DRIVER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_OPENGL_ES_DRIVER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_ORIENTATIONS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_IOS_ORIENTATIONS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_POLL_SENTINEL: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_POLL_SENTINEL\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_PREFERRED_LOCALES: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_PREFERRED_LOCALES\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_QTWAYLAND_CONTENT_ORIENTATION\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_QTWAYLAND_WINDOW_FLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_QTWAYLAND_WINDOW_FLAGS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_BATCHING: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_BATCHING\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_LINE_METHOD: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_LINE_METHOD\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_DIRECT3D11_DEBUG: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_DIRECT3D11_DEBUG\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_DIRECT3D_THREADSAFE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_DIRECT3D_THREADSAFE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_DRIVER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_DRIVER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_OPENGL_SHADERS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_OPENGL_SHADERS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_SCALE_QUALITY: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_SCALE_QUALITY\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RENDER_VSYNC: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RENDER_VSYNC\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_PS2_DYNAMIC_VSYNC: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_PS2_DYNAMIC_VSYNC\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RETURN_KEY_HIDES_IME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RETURN_KEY_HIDES_IME\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_RPI_VIDEO_LAYER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_RPI_VIDEO_LAYER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_THREAD_PRIORITY_POLICY: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_THREAD_PRIORITY_POLICY\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_THREAD_STACK_SIZE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_THREAD_STACK_SIZE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_TIMER_RESOLUTION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_TIMER_RESOLUTION\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_TOUCH_MOUSE_EVENTS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_TOUCH_MOUSE_EVENTS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VITA_TOUCH_MOUSE_DEVICE: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_HINT_VITA_TOUCH_MOUSE_DEVICE\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_TV_REMOTE_AS_JOYSTICK: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_TV_REMOTE_AS_JOYSTICK\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_ALLOW_SCREENSAVER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_ALLOW_SCREENSAVER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_DOUBLE_BUFFER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_DOUBLE_BUFFER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_EGL_GETDISPLAY_FALLBACK\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_EXTERNAL_CONTEXT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_EXTERNAL_CONTEXT\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_MAC_FULLSCREEN_SPACES\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WAYLAND_MODE_EMULATION\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WAYLAND_MODE_SCALING: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WAYLAND_MODE_SCALING\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_FOREIGN_WINDOW_OPENGL\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_FOREIGN_WINDOW_VULKAN\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_WIN_D3DCOMPILER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_WIN_D3DCOMPILER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_FORCE_EGL: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_FORCE_EGL\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_X11_NET_WM_PING: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_X11_NET_WM_PING\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_X11_WINDOW_VISUALID: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_X11_WINDOW_VISUALID\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_X11_SCALING_FACTOR: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_X11_SCALING_FACTOR\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_X11_XRANDR: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_X11_XRANDR\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WAVE_FACT_CHUNK: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WAVE_FACT_CHUNK\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WAVE_RIFF_CHUNK_SIZE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WAVE_RIFF_CHUNK_SIZE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WAVE_TRUNCATION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WAVE_TRUNCATION\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_DISABLE_THREAD_NAMING\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_ENABLE_MESSAGELOOP\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_INTRESOURCE_ICON\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_NO_CLOSE_ON_ALT_F4\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOWS_USE_D3D9EX: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOWS_USE_D3D9EX\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(
        b"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\0",
    )
};
#[allow(unsafe_code)]
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINRT_HANDLE_BACK_BUTTON: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINRT_HANDLE_BACK_BUTTON\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINRT_PRIVACY_POLICY_LABEL: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINRT_PRIVACY_POLICY_LABEL\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_WINRT_PRIVACY_POLICY_URL: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_WINRT_PRIVACY_POLICY_URL\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_X11_FORCE_OVERRIDE_REDIRECT\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_XINPUT_ENABLED: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_XINPUT_ENABLED\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_DIRECTINPUT_ENABLED: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_DIRECTINPUT_ENABLED\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING\0")
};
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_INCLUDE_MONITORS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_INCLUDE_MONITORS\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_X11_WINDOW_TYPE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_X11_WINDOW_TYPE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_QUIT_ON_LAST_WINDOW_CLOSE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_VIDEO_DRIVER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_VIDEO_DRIVER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_AUDIO_DRIVER: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_AUDIO_DRIVER\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_KMSDRM_DEVICE_INDEX: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_KMSDRM_DEVICE_INDEX\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_TRACKPAD_IS_TOUCH_ONLY: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_TRACKPAD_IS_TOUCH_ONLY\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GDK_TEXTINPUT_TITLE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GDK_TEXTINPUT_TITLE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GDK_TEXTINPUT_DESCRIPTION: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GDK_TEXTINPUT_DESCRIPTION\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GDK_TEXTINPUT_DEFAULT: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GDK_TEXTINPUT_DEFAULT\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GDK_TEXTINPUT_SCOPE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GDK_TEXTINPUT_SCOPE\0") };
#[allow(unsafe_code)]
pub const SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"SDL_GDK_TEXTINPUT_MAX_LENGTH\0") };
pub const SDL_MAX_LOG_MESSAGE: u32 = 4096;
pub const SDL_NONSHAPEABLE_WINDOW: i32 = -1;
pub const SDL_INVALID_SHAPE_ARGUMENT: i32 = -2;
pub const SDL_WINDOW_LACKS_SHAPE: i32 = -3;
pub const SDL_MS_PER_SECOND: u32 = 1000;
pub const SDL_US_PER_SECOND: u32 = 1000000;
pub const SDL_NS_PER_SECOND: u32 = 1000000000;
pub const SDL_NS_PER_MS: u32 = 1000000;
pub const SDL_NS_PER_US: u32 = 1000;
pub const SDL_MAJOR_VERSION: u32 = 3;
pub const SDL_MINOR_VERSION: u32 = 0;
pub const SDL_PATCHLEVEL: u32 = 0;
pub const SDL_SYSWM_CURRENT_VERSION: u32 = 1;
pub const SDL_METALVIEW_TAG: u32 = 255;
pub const SDL_FALSE: SDL_bool = 0;
pub const SDL_TRUE: SDL_bool = 1;
pub const SDL_ASSERTION_RETRY: SDL_AssertState = 0;
pub const SDL_ASSERTION_BREAK: SDL_AssertState = 1;
pub const SDL_ASSERTION_ABORT: SDL_AssertState = 2;
pub const SDL_ASSERTION_IGNORE: SDL_AssertState = 3;
pub const SDL_ASSERTION_ALWAYS_IGNORE: SDL_AssertState = 4;
pub const SDL_ENOMEM: SDL_errorcode = 0;
pub const SDL_EFREAD: SDL_errorcode = 1;
pub const SDL_EFWRITE: SDL_errorcode = 2;
pub const SDL_EFSEEK: SDL_errorcode = 3;
pub const SDL_UNSUPPORTED: SDL_errorcode = 4;
pub const SDL_LASTERROR: SDL_errorcode = 5;
pub const SDL_THREAD_PRIORITY_LOW: SDL_ThreadPriority = 0;
pub const SDL_THREAD_PRIORITY_NORMAL: SDL_ThreadPriority = 1;
pub const SDL_THREAD_PRIORITY_HIGH: SDL_ThreadPriority = 2;
pub const SDL_THREAD_PRIORITY_TIME_CRITICAL: SDL_ThreadPriority = 3;
pub const SDL_BLENDMODE_NONE: SDL_BlendMode = 0;
pub const SDL_BLENDMODE_BLEND: SDL_BlendMode = 1;
pub const SDL_BLENDMODE_ADD: SDL_BlendMode = 2;
pub const SDL_BLENDMODE_MOD: SDL_BlendMode = 4;
pub const SDL_BLENDMODE_MUL: SDL_BlendMode = 8;
pub const SDL_BLENDMODE_INVALID: SDL_BlendMode = 2147483647;
pub const SDL_BLENDOPERATION_ADD: SDL_BlendOperation = 1;
pub const SDL_BLENDOPERATION_SUBTRACT: SDL_BlendOperation = 2;
pub const SDL_BLENDOPERATION_REV_SUBTRACT: SDL_BlendOperation = 3;
pub const SDL_BLENDOPERATION_MINIMUM: SDL_BlendOperation = 4;
pub const SDL_BLENDOPERATION_MAXIMUM: SDL_BlendOperation = 5;
pub const SDL_BLENDFACTOR_ZERO: SDL_BlendFactor = 1;
pub const SDL_BLENDFACTOR_ONE: SDL_BlendFactor = 2;
pub const SDL_BLENDFACTOR_SRC_COLOR: SDL_BlendFactor = 3;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: SDL_BlendFactor = 4;
pub const SDL_BLENDFACTOR_SRC_ALPHA: SDL_BlendFactor = 5;
pub const SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: SDL_BlendFactor = 6;
pub const SDL_BLENDFACTOR_DST_COLOR: SDL_BlendFactor = 7;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: SDL_BlendFactor = 8;
pub const SDL_BLENDFACTOR_DST_ALPHA: SDL_BlendFactor = 9;
pub const SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: SDL_BlendFactor = 10;
pub const SDL_SENSOR_INVALID: SDL_SensorType = -1;
pub const SDL_SENSOR_UNKNOWN: SDL_SensorType = 0;
pub const SDL_SENSOR_ACCEL: SDL_SensorType = 1;
pub const SDL_SENSOR_GYRO: SDL_SensorType = 2;
pub const SDL_SENSOR_ACCEL_L: SDL_SensorType = 3;
pub const SDL_SENSOR_GYRO_L: SDL_SensorType = 4;
pub const SDL_SENSOR_ACCEL_R: SDL_SensorType = 5;
pub const SDL_SENSOR_GYRO_R: SDL_SensorType = 6;
pub const SDL_JOYSTICK_TYPE_UNKNOWN: SDL_JoystickType = 0;
pub const SDL_JOYSTICK_TYPE_GAMEPAD: SDL_JoystickType = 1;
pub const SDL_JOYSTICK_TYPE_WHEEL: SDL_JoystickType = 2;
pub const SDL_JOYSTICK_TYPE_ARCADE_STICK: SDL_JoystickType = 3;
pub const SDL_JOYSTICK_TYPE_FLIGHT_STICK: SDL_JoystickType = 4;
pub const SDL_JOYSTICK_TYPE_DANCE_PAD: SDL_JoystickType = 5;
pub const SDL_JOYSTICK_TYPE_GUITAR: SDL_JoystickType = 6;
pub const SDL_JOYSTICK_TYPE_DRUM_KIT: SDL_JoystickType = 7;
pub const SDL_JOYSTICK_TYPE_ARCADE_PAD: SDL_JoystickType = 8;
pub const SDL_JOYSTICK_TYPE_THROTTLE: SDL_JoystickType = 9;
pub const SDL_JOYSTICK_POWER_UNKNOWN: SDL_JoystickPowerLevel = -1;
pub const SDL_JOYSTICK_POWER_EMPTY: SDL_JoystickPowerLevel = 0;
pub const SDL_JOYSTICK_POWER_LOW: SDL_JoystickPowerLevel = 1;
pub const SDL_JOYSTICK_POWER_MEDIUM: SDL_JoystickPowerLevel = 2;
pub const SDL_JOYSTICK_POWER_FULL: SDL_JoystickPowerLevel = 3;
pub const SDL_JOYSTICK_POWER_WIRED: SDL_JoystickPowerLevel = 4;
pub const SDL_JOYSTICK_POWER_MAX: SDL_JoystickPowerLevel = 5;
pub const SDL_GAMEPAD_TYPE_UNKNOWN: SDL_GamepadType = 0;
pub const SDL_GAMEPAD_TYPE_STANDARD: SDL_GamepadType = 1;
pub const SDL_GAMEPAD_TYPE_XBOX360: SDL_GamepadType = 2;
pub const SDL_GAMEPAD_TYPE_XBOXONE: SDL_GamepadType = 3;
pub const SDL_GAMEPAD_TYPE_PS3: SDL_GamepadType = 4;
pub const SDL_GAMEPAD_TYPE_PS4: SDL_GamepadType = 5;
pub const SDL_GAMEPAD_TYPE_PS5: SDL_GamepadType = 6;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO: SDL_GamepadType = 7;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT: SDL_GamepadType = 8;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT: SDL_GamepadType = 9;
pub const SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR: SDL_GamepadType = 10;
pub const SDL_GAMEPAD_TYPE_MAX: SDL_GamepadType = 11;
pub const SDL_GAMEPAD_BUTTON_INVALID: SDL_GamepadButton = -1;
pub const SDL_GAMEPAD_BUTTON_A: SDL_GamepadButton = 0;
pub const SDL_GAMEPAD_BUTTON_B: SDL_GamepadButton = 1;
pub const SDL_GAMEPAD_BUTTON_X: SDL_GamepadButton = 2;
pub const SDL_GAMEPAD_BUTTON_Y: SDL_GamepadButton = 3;
pub const SDL_GAMEPAD_BUTTON_BACK: SDL_GamepadButton = 4;
pub const SDL_GAMEPAD_BUTTON_GUIDE: SDL_GamepadButton = 5;
pub const SDL_GAMEPAD_BUTTON_START: SDL_GamepadButton = 6;
pub const SDL_GAMEPAD_BUTTON_LEFT_STICK: SDL_GamepadButton = 7;
pub const SDL_GAMEPAD_BUTTON_RIGHT_STICK: SDL_GamepadButton = 8;
pub const SDL_GAMEPAD_BUTTON_LEFT_SHOULDER: SDL_GamepadButton = 9;
pub const SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER: SDL_GamepadButton = 10;
pub const SDL_GAMEPAD_BUTTON_DPAD_UP: SDL_GamepadButton = 11;
pub const SDL_GAMEPAD_BUTTON_DPAD_DOWN: SDL_GamepadButton = 12;
pub const SDL_GAMEPAD_BUTTON_DPAD_LEFT: SDL_GamepadButton = 13;
pub const SDL_GAMEPAD_BUTTON_DPAD_RIGHT: SDL_GamepadButton = 14;
pub const SDL_GAMEPAD_BUTTON_MISC1: SDL_GamepadButton = 15;
pub const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1: SDL_GamepadButton = 16;
pub const SDL_GAMEPAD_BUTTON_LEFT_PADDLE1: SDL_GamepadButton = 17;
pub const SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2: SDL_GamepadButton = 18;
pub const SDL_GAMEPAD_BUTTON_LEFT_PADDLE2: SDL_GamepadButton = 19;
pub const SDL_GAMEPAD_BUTTON_TOUCHPAD: SDL_GamepadButton = 20;
pub const SDL_GAMEPAD_BUTTON_MAX: SDL_GamepadButton = 21;
pub const SDL_GAMEPAD_AXIS_INVALID: SDL_GamepadAxis = -1;
pub const SDL_GAMEPAD_AXIS_LEFTX: SDL_GamepadAxis = 0;
pub const SDL_GAMEPAD_AXIS_LEFTY: SDL_GamepadAxis = 1;
pub const SDL_GAMEPAD_AXIS_RIGHTX: SDL_GamepadAxis = 2;
pub const SDL_GAMEPAD_AXIS_RIGHTY: SDL_GamepadAxis = 3;
pub const SDL_GAMEPAD_AXIS_LEFT_TRIGGER: SDL_GamepadAxis = 4;
pub const SDL_GAMEPAD_AXIS_RIGHT_TRIGGER: SDL_GamepadAxis = 5;
pub const SDL_GAMEPAD_AXIS_MAX: SDL_GamepadAxis = 6;
pub const SDL_SCANCODE_UNKNOWN: SDL_Scancode = 0;
pub const SDL_SCANCODE_A: SDL_Scancode = 4;
pub const SDL_SCANCODE_B: SDL_Scancode = 5;
pub const SDL_SCANCODE_C: SDL_Scancode = 6;
pub const SDL_SCANCODE_D: SDL_Scancode = 7;
pub const SDL_SCANCODE_E: SDL_Scancode = 8;
pub const SDL_SCANCODE_F: SDL_Scancode = 9;
pub const SDL_SCANCODE_G: SDL_Scancode = 10;
pub const SDL_SCANCODE_H: SDL_Scancode = 11;
pub const SDL_SCANCODE_I: SDL_Scancode = 12;
pub const SDL_SCANCODE_J: SDL_Scancode = 13;
pub const SDL_SCANCODE_K: SDL_Scancode = 14;
pub const SDL_SCANCODE_L: SDL_Scancode = 15;
pub const SDL_SCANCODE_M: SDL_Scancode = 16;
pub const SDL_SCANCODE_N: SDL_Scancode = 17;
pub const SDL_SCANCODE_O: SDL_Scancode = 18;
pub const SDL_SCANCODE_P: SDL_Scancode = 19;
pub const SDL_SCANCODE_Q: SDL_Scancode = 20;
pub const SDL_SCANCODE_R: SDL_Scancode = 21;
pub const SDL_SCANCODE_S: SDL_Scancode = 22;
pub const SDL_SCANCODE_T: SDL_Scancode = 23;
pub const SDL_SCANCODE_U: SDL_Scancode = 24;
pub const SDL_SCANCODE_V: SDL_Scancode = 25;
pub const SDL_SCANCODE_W: SDL_Scancode = 26;
pub const SDL_SCANCODE_X: SDL_Scancode = 27;
pub const SDL_SCANCODE_Y: SDL_Scancode = 28;
pub const SDL_SCANCODE_Z: SDL_Scancode = 29;
pub const SDL_SCANCODE_1: SDL_Scancode = 30;
pub const SDL_SCANCODE_2: SDL_Scancode = 31;
pub const SDL_SCANCODE_3: SDL_Scancode = 32;
pub const SDL_SCANCODE_4: SDL_Scancode = 33;
pub const SDL_SCANCODE_5: SDL_Scancode = 34;
pub const SDL_SCANCODE_6: SDL_Scancode = 35;
pub const SDL_SCANCODE_7: SDL_Scancode = 36;
pub const SDL_SCANCODE_8: SDL_Scancode = 37;
pub const SDL_SCANCODE_9: SDL_Scancode = 38;
pub const SDL_SCANCODE_0: SDL_Scancode = 39;
pub const SDL_SCANCODE_RETURN: SDL_Scancode = 40;
pub const SDL_SCANCODE_ESCAPE: SDL_Scancode = 41;
pub const SDL_SCANCODE_BACKSPACE: SDL_Scancode = 42;
pub const SDL_SCANCODE_TAB: SDL_Scancode = 43;
pub const SDL_SCANCODE_SPACE: SDL_Scancode = 44;
pub const SDL_SCANCODE_MINUS: SDL_Scancode = 45;
pub const SDL_SCANCODE_EQUALS: SDL_Scancode = 46;
pub const SDL_SCANCODE_LEFTBRACKET: SDL_Scancode = 47;
pub const SDL_SCANCODE_RIGHTBRACKET: SDL_Scancode = 48;
pub const SDL_SCANCODE_BACKSLASH: SDL_Scancode = 49;
pub const SDL_SCANCODE_NONUSHASH: SDL_Scancode = 50;
pub const SDL_SCANCODE_SEMICOLON: SDL_Scancode = 51;
pub const SDL_SCANCODE_APOSTROPHE: SDL_Scancode = 52;
pub const SDL_SCANCODE_GRAVE: SDL_Scancode = 53;
pub const SDL_SCANCODE_COMMA: SDL_Scancode = 54;
pub const SDL_SCANCODE_PERIOD: SDL_Scancode = 55;
pub const SDL_SCANCODE_SLASH: SDL_Scancode = 56;
pub const SDL_SCANCODE_CAPSLOCK: SDL_Scancode = 57;
pub const SDL_SCANCODE_F1: SDL_Scancode = 58;
pub const SDL_SCANCODE_F2: SDL_Scancode = 59;
pub const SDL_SCANCODE_F3: SDL_Scancode = 60;
pub const SDL_SCANCODE_F4: SDL_Scancode = 61;
pub const SDL_SCANCODE_F5: SDL_Scancode = 62;
pub const SDL_SCANCODE_F6: SDL_Scancode = 63;
pub const SDL_SCANCODE_F7: SDL_Scancode = 64;
pub const SDL_SCANCODE_F8: SDL_Scancode = 65;
pub const SDL_SCANCODE_F9: SDL_Scancode = 66;
pub const SDL_SCANCODE_F10: SDL_Scancode = 67;
pub const SDL_SCANCODE_F11: SDL_Scancode = 68;
pub const SDL_SCANCODE_F12: SDL_Scancode = 69;
pub const SDL_SCANCODE_PRINTSCREEN: SDL_Scancode = 70;
pub const SDL_SCANCODE_SCROLLLOCK: SDL_Scancode = 71;
pub const SDL_SCANCODE_PAUSE: SDL_Scancode = 72;
pub const SDL_SCANCODE_INSERT: SDL_Scancode = 73;
pub const SDL_SCANCODE_HOME: SDL_Scancode = 74;
pub const SDL_SCANCODE_PAGEUP: SDL_Scancode = 75;
pub const SDL_SCANCODE_DELETE: SDL_Scancode = 76;
pub const SDL_SCANCODE_END: SDL_Scancode = 77;
pub const SDL_SCANCODE_PAGEDOWN: SDL_Scancode = 78;
pub const SDL_SCANCODE_RIGHT: SDL_Scancode = 79;
pub const SDL_SCANCODE_LEFT: SDL_Scancode = 80;
pub const SDL_SCANCODE_DOWN: SDL_Scancode = 81;
pub const SDL_SCANCODE_UP: SDL_Scancode = 82;
pub const SDL_SCANCODE_NUMLOCKCLEAR: SDL_Scancode = 83;
pub const SDL_SCANCODE_KP_DIVIDE: SDL_Scancode = 84;
pub const SDL_SCANCODE_KP_MULTIPLY: SDL_Scancode = 85;
pub const SDL_SCANCODE_KP_MINUS: SDL_Scancode = 86;
pub const SDL_SCANCODE_KP_PLUS: SDL_Scancode = 87;
pub const SDL_SCANCODE_KP_ENTER: SDL_Scancode = 88;
pub const SDL_SCANCODE_KP_1: SDL_Scancode = 89;
pub const SDL_SCANCODE_KP_2: SDL_Scancode = 90;
pub const SDL_SCANCODE_KP_3: SDL_Scancode = 91;
pub const SDL_SCANCODE_KP_4: SDL_Scancode = 92;
pub const SDL_SCANCODE_KP_5: SDL_Scancode = 93;
pub const SDL_SCANCODE_KP_6: SDL_Scancode = 94;
pub const SDL_SCANCODE_KP_7: SDL_Scancode = 95;
pub const SDL_SCANCODE_KP_8: SDL_Scancode = 96;
pub const SDL_SCANCODE_KP_9: SDL_Scancode = 97;
pub const SDL_SCANCODE_KP_0: SDL_Scancode = 98;
pub const SDL_SCANCODE_KP_PERIOD: SDL_Scancode = 99;
pub const SDL_SCANCODE_NONUSBACKSLASH: SDL_Scancode = 100;
pub const SDL_SCANCODE_APPLICATION: SDL_Scancode = 101;
pub const SDL_SCANCODE_POWER: SDL_Scancode = 102;
pub const SDL_SCANCODE_KP_EQUALS: SDL_Scancode = 103;
pub const SDL_SCANCODE_F13: SDL_Scancode = 104;
pub const SDL_SCANCODE_F14: SDL_Scancode = 105;
pub const SDL_SCANCODE_F15: SDL_Scancode = 106;
pub const SDL_SCANCODE_F16: SDL_Scancode = 107;
pub const SDL_SCANCODE_F17: SDL_Scancode = 108;
pub const SDL_SCANCODE_F18: SDL_Scancode = 109;
pub const SDL_SCANCODE_F19: SDL_Scancode = 110;
pub const SDL_SCANCODE_F20: SDL_Scancode = 111;
pub const SDL_SCANCODE_F21: SDL_Scancode = 112;
pub const SDL_SCANCODE_F22: SDL_Scancode = 113;
pub const SDL_SCANCODE_F23: SDL_Scancode = 114;
pub const SDL_SCANCODE_F24: SDL_Scancode = 115;
pub const SDL_SCANCODE_EXECUTE: SDL_Scancode = 116;
pub const SDL_SCANCODE_HELP: SDL_Scancode = 117;
pub const SDL_SCANCODE_MENU: SDL_Scancode = 118;
pub const SDL_SCANCODE_SELECT: SDL_Scancode = 119;
pub const SDL_SCANCODE_STOP: SDL_Scancode = 120;
pub const SDL_SCANCODE_AGAIN: SDL_Scancode = 121;
pub const SDL_SCANCODE_UNDO: SDL_Scancode = 122;
pub const SDL_SCANCODE_CUT: SDL_Scancode = 123;
pub const SDL_SCANCODE_COPY: SDL_Scancode = 124;
pub const SDL_SCANCODE_PASTE: SDL_Scancode = 125;
pub const SDL_SCANCODE_FIND: SDL_Scancode = 126;
pub const SDL_SCANCODE_MUTE: SDL_Scancode = 127;
pub const SDL_SCANCODE_VOLUMEUP: SDL_Scancode = 128;
pub const SDL_SCANCODE_VOLUMEDOWN: SDL_Scancode = 129;
pub const SDL_SCANCODE_KP_COMMA: SDL_Scancode = 133;
pub const SDL_SCANCODE_KP_EQUALSAS400: SDL_Scancode = 134;
pub const SDL_SCANCODE_INTERNATIONAL1: SDL_Scancode = 135;
pub const SDL_SCANCODE_INTERNATIONAL2: SDL_Scancode = 136;
pub const SDL_SCANCODE_INTERNATIONAL3: SDL_Scancode = 137;
pub const SDL_SCANCODE_INTERNATIONAL4: SDL_Scancode = 138;
pub const SDL_SCANCODE_INTERNATIONAL5: SDL_Scancode = 139;
pub const SDL_SCANCODE_INTERNATIONAL6: SDL_Scancode = 140;
pub const SDL_SCANCODE_INTERNATIONAL7: SDL_Scancode = 141;
pub const SDL_SCANCODE_INTERNATIONAL8: SDL_Scancode = 142;
pub const SDL_SCANCODE_INTERNATIONAL9: SDL_Scancode = 143;
pub const SDL_SCANCODE_LANG1: SDL_Scancode = 144;
pub const SDL_SCANCODE_LANG2: SDL_Scancode = 145;
pub const SDL_SCANCODE_LANG3: SDL_Scancode = 146;
pub const SDL_SCANCODE_LANG4: SDL_Scancode = 147;
pub const SDL_SCANCODE_LANG5: SDL_Scancode = 148;
pub const SDL_SCANCODE_LANG6: SDL_Scancode = 149;
pub const SDL_SCANCODE_LANG7: SDL_Scancode = 150;
pub const SDL_SCANCODE_LANG8: SDL_Scancode = 151;
pub const SDL_SCANCODE_LANG9: SDL_Scancode = 152;
pub const SDL_SCANCODE_ALTERASE: SDL_Scancode = 153;
pub const SDL_SCANCODE_SYSREQ: SDL_Scancode = 154;
pub const SDL_SCANCODE_CANCEL: SDL_Scancode = 155;
pub const SDL_SCANCODE_CLEAR: SDL_Scancode = 156;
pub const SDL_SCANCODE_PRIOR: SDL_Scancode = 157;
pub const SDL_SCANCODE_RETURN2: SDL_Scancode = 158;
pub const SDL_SCANCODE_SEPARATOR: SDL_Scancode = 159;
pub const SDL_SCANCODE_OUT: SDL_Scancode = 160;
pub const SDL_SCANCODE_OPER: SDL_Scancode = 161;
pub const SDL_SCANCODE_CLEARAGAIN: SDL_Scancode = 162;
pub const SDL_SCANCODE_CRSEL: SDL_Scancode = 163;
pub const SDL_SCANCODE_EXSEL: SDL_Scancode = 164;
pub const SDL_SCANCODE_KP_00: SDL_Scancode = 176;
pub const SDL_SCANCODE_KP_000: SDL_Scancode = 177;
pub const SDL_SCANCODE_THOUSANDSSEPARATOR: SDL_Scancode = 178;
pub const SDL_SCANCODE_DECIMALSEPARATOR: SDL_Scancode = 179;
pub const SDL_SCANCODE_CURRENCYUNIT: SDL_Scancode = 180;
pub const SDL_SCANCODE_CURRENCYSUBUNIT: SDL_Scancode = 181;
pub const SDL_SCANCODE_KP_LEFTPAREN: SDL_Scancode = 182;
pub const SDL_SCANCODE_KP_RIGHTPAREN: SDL_Scancode = 183;
pub const SDL_SCANCODE_KP_LEFTBRACE: SDL_Scancode = 184;
pub const SDL_SCANCODE_KP_RIGHTBRACE: SDL_Scancode = 185;
pub const SDL_SCANCODE_KP_TAB: SDL_Scancode = 186;
pub const SDL_SCANCODE_KP_BACKSPACE: SDL_Scancode = 187;
pub const SDL_SCANCODE_KP_A: SDL_Scancode = 188;
pub const SDL_SCANCODE_KP_B: SDL_Scancode = 189;
pub const SDL_SCANCODE_KP_C: SDL_Scancode = 190;
pub const SDL_SCANCODE_KP_D: SDL_Scancode = 191;
pub const SDL_SCANCODE_KP_E: SDL_Scancode = 192;
pub const SDL_SCANCODE_KP_F: SDL_Scancode = 193;
pub const SDL_SCANCODE_KP_XOR: SDL_Scancode = 194;
pub const SDL_SCANCODE_KP_POWER: SDL_Scancode = 195;
pub const SDL_SCANCODE_KP_PERCENT: SDL_Scancode = 196;
pub const SDL_SCANCODE_KP_LESS: SDL_Scancode = 197;
pub const SDL_SCANCODE_KP_GREATER: SDL_Scancode = 198;
pub const SDL_SCANCODE_KP_AMPERSAND: SDL_Scancode = 199;
pub const SDL_SCANCODE_KP_DBLAMPERSAND: SDL_Scancode = 200;
pub const SDL_SCANCODE_KP_VERTICALBAR: SDL_Scancode = 201;
pub const SDL_SCANCODE_KP_DBLVERTICALBAR: SDL_Scancode = 202;
pub const SDL_SCANCODE_KP_COLON: SDL_Scancode = 203;
pub const SDL_SCANCODE_KP_HASH: SDL_Scancode = 204;
pub const SDL_SCANCODE_KP_SPACE: SDL_Scancode = 205;
pub const SDL_SCANCODE_KP_AT: SDL_Scancode = 206;
pub const SDL_SCANCODE_KP_EXCLAM: SDL_Scancode = 207;
pub const SDL_SCANCODE_KP_MEMSTORE: SDL_Scancode = 208;
pub const SDL_SCANCODE_KP_MEMRECALL: SDL_Scancode = 209;
pub const SDL_SCANCODE_KP_MEMCLEAR: SDL_Scancode = 210;
pub const SDL_SCANCODE_KP_MEMADD: SDL_Scancode = 211;
pub const SDL_SCANCODE_KP_MEMSUBTRACT: SDL_Scancode = 212;
pub const SDL_SCANCODE_KP_MEMMULTIPLY: SDL_Scancode = 213;
pub const SDL_SCANCODE_KP_MEMDIVIDE: SDL_Scancode = 214;
pub const SDL_SCANCODE_KP_PLUSMINUS: SDL_Scancode = 215;
pub const SDL_SCANCODE_KP_CLEAR: SDL_Scancode = 216;
pub const SDL_SCANCODE_KP_CLEARENTRY: SDL_Scancode = 217;
pub const SDL_SCANCODE_KP_BINARY: SDL_Scancode = 218;
pub const SDL_SCANCODE_KP_OCTAL: SDL_Scancode = 219;
pub const SDL_SCANCODE_KP_DECIMAL: SDL_Scancode = 220;
pub const SDL_SCANCODE_KP_HEXADECIMAL: SDL_Scancode = 221;
pub const SDL_SCANCODE_LCTRL: SDL_Scancode = 224;
pub const SDL_SCANCODE_LSHIFT: SDL_Scancode = 225;
pub const SDL_SCANCODE_LALT: SDL_Scancode = 226;
pub const SDL_SCANCODE_LGUI: SDL_Scancode = 227;
pub const SDL_SCANCODE_RCTRL: SDL_Scancode = 228;
pub const SDL_SCANCODE_RSHIFT: SDL_Scancode = 229;
pub const SDL_SCANCODE_RALT: SDL_Scancode = 230;
pub const SDL_SCANCODE_RGUI: SDL_Scancode = 231;
pub const SDL_SCANCODE_MODE: SDL_Scancode = 257;
pub const SDL_SCANCODE_AUDIONEXT: SDL_Scancode = 258;
pub const SDL_SCANCODE_AUDIOPREV: SDL_Scancode = 259;
pub const SDL_SCANCODE_AUDIOSTOP: SDL_Scancode = 260;
pub const SDL_SCANCODE_AUDIOPLAY: SDL_Scancode = 261;
pub const SDL_SCANCODE_AUDIOMUTE: SDL_Scancode = 262;
pub const SDL_SCANCODE_MEDIASELECT: SDL_Scancode = 263;
pub const SDL_SCANCODE_WWW: SDL_Scancode = 264;
pub const SDL_SCANCODE_MAIL: SDL_Scancode = 265;
pub const SDL_SCANCODE_CALCULATOR: SDL_Scancode = 266;
pub const SDL_SCANCODE_COMPUTER: SDL_Scancode = 267;
pub const SDL_SCANCODE_AC_SEARCH: SDL_Scancode = 268;
pub const SDL_SCANCODE_AC_HOME: SDL_Scancode = 269;
pub const SDL_SCANCODE_AC_BACK: SDL_Scancode = 270;
pub const SDL_SCANCODE_AC_FORWARD: SDL_Scancode = 271;
pub const SDL_SCANCODE_AC_STOP: SDL_Scancode = 272;
pub const SDL_SCANCODE_AC_REFRESH: SDL_Scancode = 273;
pub const SDL_SCANCODE_AC_BOOKMARKS: SDL_Scancode = 274;
pub const SDL_SCANCODE_BRIGHTNESSDOWN: SDL_Scancode = 275;
pub const SDL_SCANCODE_BRIGHTNESSUP: SDL_Scancode = 276;
pub const SDL_SCANCODE_DISPLAYSWITCH: SDL_Scancode = 277;
pub const SDL_SCANCODE_KBDILLUMTOGGLE: SDL_Scancode = 278;
pub const SDL_SCANCODE_KBDILLUMDOWN: SDL_Scancode = 279;
pub const SDL_SCANCODE_KBDILLUMUP: SDL_Scancode = 280;
pub const SDL_SCANCODE_EJECT: SDL_Scancode = 281;
pub const SDL_SCANCODE_SLEEP: SDL_Scancode = 282;
pub const SDL_SCANCODE_APP1: SDL_Scancode = 283;
pub const SDL_SCANCODE_APP2: SDL_Scancode = 284;
pub const SDL_SCANCODE_AUDIOREWIND: SDL_Scancode = 285;
pub const SDL_SCANCODE_AUDIOFASTFORWARD: SDL_Scancode = 286;
pub const SDL_SCANCODE_SOFTLEFT: SDL_Scancode = 287;
pub const SDL_SCANCODE_SOFTRIGHT: SDL_Scancode = 288;
pub const SDL_SCANCODE_CALL: SDL_Scancode = 289;
pub const SDL_SCANCODE_ENDCALL: SDL_Scancode = 290;
pub const SDL_NUM_SCANCODES: SDL_Scancode = 512;
pub const SDLK_UNKNOWN: SDL_KeyCode = 0;
pub const SDLK_RETURN: SDL_KeyCode = 13;
pub const SDLK_ESCAPE: SDL_KeyCode = 27;
pub const SDLK_BACKSPACE: SDL_KeyCode = 8;
pub const SDLK_TAB: SDL_KeyCode = 9;
pub const SDLK_SPACE: SDL_KeyCode = 32;
pub const SDLK_EXCLAIM: SDL_KeyCode = 33;
pub const SDLK_QUOTEDBL: SDL_KeyCode = 34;
pub const SDLK_HASH: SDL_KeyCode = 35;
pub const SDLK_PERCENT: SDL_KeyCode = 37;
pub const SDLK_DOLLAR: SDL_KeyCode = 36;
pub const SDLK_AMPERSAND: SDL_KeyCode = 38;
pub const SDLK_QUOTE: SDL_KeyCode = 39;
pub const SDLK_LEFTPAREN: SDL_KeyCode = 40;
pub const SDLK_RIGHTPAREN: SDL_KeyCode = 41;
pub const SDLK_ASTERISK: SDL_KeyCode = 42;
pub const SDLK_PLUS: SDL_KeyCode = 43;
pub const SDLK_COMMA: SDL_KeyCode = 44;
pub const SDLK_MINUS: SDL_KeyCode = 45;
pub const SDLK_PERIOD: SDL_KeyCode = 46;
pub const SDLK_SLASH: SDL_KeyCode = 47;
pub const SDLK_0: SDL_KeyCode = 48;
pub const SDLK_1: SDL_KeyCode = 49;
pub const SDLK_2: SDL_KeyCode = 50;
pub const SDLK_3: SDL_KeyCode = 51;
pub const SDLK_4: SDL_KeyCode = 52;
pub const SDLK_5: SDL_KeyCode = 53;
pub const SDLK_6: SDL_KeyCode = 54;
pub const SDLK_7: SDL_KeyCode = 55;
pub const SDLK_8: SDL_KeyCode = 56;
pub const SDLK_9: SDL_KeyCode = 57;
pub const SDLK_COLON: SDL_KeyCode = 58;
pub const SDLK_SEMICOLON: SDL_KeyCode = 59;
pub const SDLK_LESS: SDL_KeyCode = 60;
pub const SDLK_EQUALS: SDL_KeyCode = 61;
pub const SDLK_GREATER: SDL_KeyCode = 62;
pub const SDLK_QUESTION: SDL_KeyCode = 63;
pub const SDLK_AT: SDL_KeyCode = 64;
pub const SDLK_LEFTBRACKET: SDL_KeyCode = 91;
pub const SDLK_BACKSLASH: SDL_KeyCode = 92;
pub const SDLK_RIGHTBRACKET: SDL_KeyCode = 93;
pub const SDLK_CARET: SDL_KeyCode = 94;
pub const SDLK_UNDERSCORE: SDL_KeyCode = 95;
pub const SDLK_BACKQUOTE: SDL_KeyCode = 96;
pub const SDLK_a: SDL_KeyCode = 97;
pub const SDLK_b: SDL_KeyCode = 98;
pub const SDLK_c: SDL_KeyCode = 99;
pub const SDLK_d: SDL_KeyCode = 100;
pub const SDLK_e: SDL_KeyCode = 101;
pub const SDLK_f: SDL_KeyCode = 102;
pub const SDLK_g: SDL_KeyCode = 103;
pub const SDLK_h: SDL_KeyCode = 104;
pub const SDLK_i: SDL_KeyCode = 105;
pub const SDLK_j: SDL_KeyCode = 106;
pub const SDLK_k: SDL_KeyCode = 107;
pub const SDLK_l: SDL_KeyCode = 108;
pub const SDLK_m: SDL_KeyCode = 109;
pub const SDLK_n: SDL_KeyCode = 110;
pub const SDLK_o: SDL_KeyCode = 111;
pub const SDLK_p: SDL_KeyCode = 112;
pub const SDLK_q: SDL_KeyCode = 113;
pub const SDLK_r: SDL_KeyCode = 114;
pub const SDLK_s: SDL_KeyCode = 115;
pub const SDLK_t: SDL_KeyCode = 116;
pub const SDLK_u: SDL_KeyCode = 117;
pub const SDLK_v: SDL_KeyCode = 118;
pub const SDLK_w: SDL_KeyCode = 119;
pub const SDLK_x: SDL_KeyCode = 120;
pub const SDLK_y: SDL_KeyCode = 121;
pub const SDLK_z: SDL_KeyCode = 122;
pub const SDLK_CAPSLOCK: SDL_KeyCode = 1073741881;
pub const SDLK_F1: SDL_KeyCode = 1073741882;
pub const SDLK_F2: SDL_KeyCode = 1073741883;
pub const SDLK_F3: SDL_KeyCode = 1073741884;
pub const SDLK_F4: SDL_KeyCode = 1073741885;
pub const SDLK_F5: SDL_KeyCode = 1073741886;
pub const SDLK_F6: SDL_KeyCode = 1073741887;
pub const SDLK_F7: SDL_KeyCode = 1073741888;
pub const SDLK_F8: SDL_KeyCode = 1073741889;
pub const SDLK_F9: SDL_KeyCode = 1073741890;
pub const SDLK_F10: SDL_KeyCode = 1073741891;
pub const SDLK_F11: SDL_KeyCode = 1073741892;
pub const SDLK_F12: SDL_KeyCode = 1073741893;
pub const SDLK_PRINTSCREEN: SDL_KeyCode = 1073741894;
pub const SDLK_SCROLLLOCK: SDL_KeyCode = 1073741895;
pub const SDLK_PAUSE: SDL_KeyCode = 1073741896;
pub const SDLK_INSERT: SDL_KeyCode = 1073741897;
pub const SDLK_HOME: SDL_KeyCode = 1073741898;
pub const SDLK_PAGEUP: SDL_KeyCode = 1073741899;
pub const SDLK_DELETE: SDL_KeyCode = 127;
pub const SDLK_END: SDL_KeyCode = 1073741901;
pub const SDLK_PAGEDOWN: SDL_KeyCode = 1073741902;
pub const SDLK_RIGHT: SDL_KeyCode = 1073741903;
pub const SDLK_LEFT: SDL_KeyCode = 1073741904;
pub const SDLK_DOWN: SDL_KeyCode = 1073741905;
pub const SDLK_UP: SDL_KeyCode = 1073741906;
pub const SDLK_NUMLOCKCLEAR: SDL_KeyCode = 1073741907;
pub const SDLK_KP_DIVIDE: SDL_KeyCode = 1073741908;
pub const SDLK_KP_MULTIPLY: SDL_KeyCode = 1073741909;
pub const SDLK_KP_MINUS: SDL_KeyCode = 1073741910;
pub const SDLK_KP_PLUS: SDL_KeyCode = 1073741911;
pub const SDLK_KP_ENTER: SDL_KeyCode = 1073741912;
pub const SDLK_KP_1: SDL_KeyCode = 1073741913;
pub const SDLK_KP_2: SDL_KeyCode = 1073741914;
pub const SDLK_KP_3: SDL_KeyCode = 1073741915;
pub const SDLK_KP_4: SDL_KeyCode = 1073741916;
pub const SDLK_KP_5: SDL_KeyCode = 1073741917;
pub const SDLK_KP_6: SDL_KeyCode = 1073741918;
pub const SDLK_KP_7: SDL_KeyCode = 1073741919;
pub const SDLK_KP_8: SDL_KeyCode = 1073741920;
pub const SDLK_KP_9: SDL_KeyCode = 1073741921;
pub const SDLK_KP_0: SDL_KeyCode = 1073741922;
pub const SDLK_KP_PERIOD: SDL_KeyCode = 1073741923;
pub const SDLK_APPLICATION: SDL_KeyCode = 1073741925;
pub const SDLK_POWER: SDL_KeyCode = 1073741926;
pub const SDLK_KP_EQUALS: SDL_KeyCode = 1073741927;
pub const SDLK_F13: SDL_KeyCode = 1073741928;
pub const SDLK_F14: SDL_KeyCode = 1073741929;
pub const SDLK_F15: SDL_KeyCode = 1073741930;
pub const SDLK_F16: SDL_KeyCode = 1073741931;
pub const SDLK_F17: SDL_KeyCode = 1073741932;
pub const SDLK_F18: SDL_KeyCode = 1073741933;
pub const SDLK_F19: SDL_KeyCode = 1073741934;
pub const SDLK_F20: SDL_KeyCode = 1073741935;
pub const SDLK_F21: SDL_KeyCode = 1073741936;
pub const SDLK_F22: SDL_KeyCode = 1073741937;
pub const SDLK_F23: SDL_KeyCode = 1073741938;
pub const SDLK_F24: SDL_KeyCode = 1073741939;
pub const SDLK_EXECUTE: SDL_KeyCode = 1073741940;
pub const SDLK_HELP: SDL_KeyCode = 1073741941;
pub const SDLK_MENU: SDL_KeyCode = 1073741942;
pub const SDLK_SELECT: SDL_KeyCode = 1073741943;
pub const SDLK_STOP: SDL_KeyCode = 1073741944;
pub const SDLK_AGAIN: SDL_KeyCode = 1073741945;
pub const SDLK_UNDO: SDL_KeyCode = 1073741946;
pub const SDLK_CUT: SDL_KeyCode = 1073741947;
pub const SDLK_COPY: SDL_KeyCode = 1073741948;
pub const SDLK_PASTE: SDL_KeyCode = 1073741949;
pub const SDLK_FIND: SDL_KeyCode = 1073741950;
pub const SDLK_MUTE: SDL_KeyCode = 1073741951;
pub const SDLK_VOLUMEUP: SDL_KeyCode = 1073741952;
pub const SDLK_VOLUMEDOWN: SDL_KeyCode = 1073741953;
pub const SDLK_KP_COMMA: SDL_KeyCode = 1073741957;
pub const SDLK_KP_EQUALSAS400: SDL_KeyCode = 1073741958;
pub const SDLK_ALTERASE: SDL_KeyCode = 1073741977;
pub const SDLK_SYSREQ: SDL_KeyCode = 1073741978;
pub const SDLK_CANCEL: SDL_KeyCode = 1073741979;
pub const SDLK_CLEAR: SDL_KeyCode = 1073741980;
pub const SDLK_PRIOR: SDL_KeyCode = 1073741981;
pub const SDLK_RETURN2: SDL_KeyCode = 1073741982;
pub const SDLK_SEPARATOR: SDL_KeyCode = 1073741983;
pub const SDLK_OUT: SDL_KeyCode = 1073741984;
pub const SDLK_OPER: SDL_KeyCode = 1073741985;
pub const SDLK_CLEARAGAIN: SDL_KeyCode = 1073741986;
pub const SDLK_CRSEL: SDL_KeyCode = 1073741987;
pub const SDLK_EXSEL: SDL_KeyCode = 1073741988;
pub const SDLK_KP_00: SDL_KeyCode = 1073742000;
pub const SDLK_KP_000: SDL_KeyCode = 1073742001;
pub const SDLK_THOUSANDSSEPARATOR: SDL_KeyCode = 1073742002;
pub const SDLK_DECIMALSEPARATOR: SDL_KeyCode = 1073742003;
pub const SDLK_CURRENCYUNIT: SDL_KeyCode = 1073742004;
pub const SDLK_CURRENCYSUBUNIT: SDL_KeyCode = 1073742005;
pub const SDLK_KP_LEFTPAREN: SDL_KeyCode = 1073742006;
pub const SDLK_KP_RIGHTPAREN: SDL_KeyCode = 1073742007;
pub const SDLK_KP_LEFTBRACE: SDL_KeyCode = 1073742008;
pub const SDLK_KP_RIGHTBRACE: SDL_KeyCode = 1073742009;
pub const SDLK_KP_TAB: SDL_KeyCode = 1073742010;
pub const SDLK_KP_BACKSPACE: SDL_KeyCode = 1073742011;
pub const SDLK_KP_A: SDL_KeyCode = 1073742012;
pub const SDLK_KP_B: SDL_KeyCode = 1073742013;
pub const SDLK_KP_C: SDL_KeyCode = 1073742014;
pub const SDLK_KP_D: SDL_KeyCode = 1073742015;
pub const SDLK_KP_E: SDL_KeyCode = 1073742016;
pub const SDLK_KP_F: SDL_KeyCode = 1073742017;
pub const SDLK_KP_XOR: SDL_KeyCode = 1073742018;
pub const SDLK_KP_POWER: SDL_KeyCode = 1073742019;
pub const SDLK_KP_PERCENT: SDL_KeyCode = 1073742020;
pub const SDLK_KP_LESS: SDL_KeyCode = 1073742021;
pub const SDLK_KP_GREATER: SDL_KeyCode = 1073742022;
pub const SDLK_KP_AMPERSAND: SDL_KeyCode = 1073742023;
pub const SDLK_KP_DBLAMPERSAND: SDL_KeyCode = 1073742024;
pub const SDLK_KP_VERTICALBAR: SDL_KeyCode = 1073742025;
pub const SDLK_KP_DBLVERTICALBAR: SDL_KeyCode = 1073742026;
pub const SDLK_KP_COLON: SDL_KeyCode = 1073742027;
pub const SDLK_KP_HASH: SDL_KeyCode = 1073742028;
pub const SDLK_KP_SPACE: SDL_KeyCode = 1073742029;
pub const SDLK_KP_AT: SDL_KeyCode = 1073742030;
pub const SDLK_KP_EXCLAM: SDL_KeyCode = 1073742031;
pub const SDLK_KP_MEMSTORE: SDL_KeyCode = 1073742032;
pub const SDLK_KP_MEMRECALL: SDL_KeyCode = 1073742033;
pub const SDLK_KP_MEMCLEAR: SDL_KeyCode = 1073742034;
pub const SDLK_KP_MEMADD: SDL_KeyCode = 1073742035;
pub const SDLK_KP_MEMSUBTRACT: SDL_KeyCode = 1073742036;
pub const SDLK_KP_MEMMULTIPLY: SDL_KeyCode = 1073742037;
pub const SDLK_KP_MEMDIVIDE: SDL_KeyCode = 1073742038;
pub const SDLK_KP_PLUSMINUS: SDL_KeyCode = 1073742039;
pub const SDLK_KP_CLEAR: SDL_KeyCode = 1073742040;
pub const SDLK_KP_CLEARENTRY: SDL_KeyCode = 1073742041;
pub const SDLK_KP_BINARY: SDL_KeyCode = 1073742042;
pub const SDLK_KP_OCTAL: SDL_KeyCode = 1073742043;
pub const SDLK_KP_DECIMAL: SDL_KeyCode = 1073742044;
pub const SDLK_KP_HEXADECIMAL: SDL_KeyCode = 1073742045;
pub const SDLK_LCTRL: SDL_KeyCode = 1073742048;
pub const SDLK_LSHIFT: SDL_KeyCode = 1073742049;
pub const SDLK_LALT: SDL_KeyCode = 1073742050;
pub const SDLK_LGUI: SDL_KeyCode = 1073742051;
pub const SDLK_RCTRL: SDL_KeyCode = 1073742052;
pub const SDLK_RSHIFT: SDL_KeyCode = 1073742053;
pub const SDLK_RALT: SDL_KeyCode = 1073742054;
pub const SDLK_RGUI: SDL_KeyCode = 1073742055;
pub const SDLK_MODE: SDL_KeyCode = 1073742081;
pub const SDLK_AUDIONEXT: SDL_KeyCode = 1073742082;
pub const SDLK_AUDIOPREV: SDL_KeyCode = 1073742083;
pub const SDLK_AUDIOSTOP: SDL_KeyCode = 1073742084;
pub const SDLK_AUDIOPLAY: SDL_KeyCode = 1073742085;
pub const SDLK_AUDIOMUTE: SDL_KeyCode = 1073742086;
pub const SDLK_MEDIASELECT: SDL_KeyCode = 1073742087;
pub const SDLK_WWW: SDL_KeyCode = 1073742088;
pub const SDLK_MAIL: SDL_KeyCode = 1073742089;
pub const SDLK_CALCULATOR: SDL_KeyCode = 1073742090;
pub const SDLK_COMPUTER: SDL_KeyCode = 1073742091;
pub const SDLK_AC_SEARCH: SDL_KeyCode = 1073742092;
pub const SDLK_AC_HOME: SDL_KeyCode = 1073742093;
pub const SDLK_AC_BACK: SDL_KeyCode = 1073742094;
pub const SDLK_AC_FORWARD: SDL_KeyCode = 1073742095;
pub const SDLK_AC_STOP: SDL_KeyCode = 1073742096;
pub const SDLK_AC_REFRESH: SDL_KeyCode = 1073742097;
pub const SDLK_AC_BOOKMARKS: SDL_KeyCode = 1073742098;
pub const SDLK_BRIGHTNESSDOWN: SDL_KeyCode = 1073742099;
pub const SDLK_BRIGHTNESSUP: SDL_KeyCode = 1073742100;
pub const SDLK_DISPLAYSWITCH: SDL_KeyCode = 1073742101;
pub const SDLK_KBDILLUMTOGGLE: SDL_KeyCode = 1073742102;
pub const SDLK_KBDILLUMDOWN: SDL_KeyCode = 1073742103;
pub const SDLK_KBDILLUMUP: SDL_KeyCode = 1073742104;
pub const SDLK_EJECT: SDL_KeyCode = 1073742105;
pub const SDLK_SLEEP: SDL_KeyCode = 1073742106;
pub const SDLK_APP1: SDL_KeyCode = 1073742107;
pub const SDLK_APP2: SDL_KeyCode = 1073742108;
pub const SDLK_AUDIOREWIND: SDL_KeyCode = 1073742109;
pub const SDLK_AUDIOFASTFORWARD: SDL_KeyCode = 1073742110;
pub const SDLK_SOFTLEFT: SDL_KeyCode = 1073742111;
pub const SDLK_SOFTRIGHT: SDL_KeyCode = 1073742112;
pub const SDLK_CALL: SDL_KeyCode = 1073742113;
pub const SDLK_ENDCALL: SDL_KeyCode = 1073742114;
pub const SDL_KMOD_NONE: SDL_Keymod = 0;
pub const SDL_KMOD_LSHIFT: SDL_Keymod = 1;
pub const SDL_KMOD_RSHIFT: SDL_Keymod = 2;
pub const SDL_KMOD_LCTRL: SDL_Keymod = 64;
pub const SDL_KMOD_RCTRL: SDL_Keymod = 128;
pub const SDL_KMOD_LALT: SDL_Keymod = 256;
pub const SDL_KMOD_RALT: SDL_Keymod = 512;
pub const SDL_KMOD_LGUI: SDL_Keymod = 1024;
pub const SDL_KMOD_RGUI: SDL_Keymod = 2048;
pub const SDL_KMOD_NUM: SDL_Keymod = 4096;
pub const SDL_KMOD_CAPS: SDL_Keymod = 8192;
pub const SDL_KMOD_MODE: SDL_Keymod = 16384;
pub const SDL_KMOD_SCROLL: SDL_Keymod = 32768;
pub const SDL_KMOD_CTRL: SDL_Keymod = 192;
pub const SDL_KMOD_SHIFT: SDL_Keymod = 3;
pub const SDL_KMOD_ALT: SDL_Keymod = 768;
pub const SDL_KMOD_GUI: SDL_Keymod = 3072;
pub const SDL_KMOD_RESERVED: SDL_Keymod = 32768;
pub const SDL_PIXELTYPE_UNKNOWN: SDL_PixelType = 0;
pub const SDL_PIXELTYPE_INDEX1: SDL_PixelType = 1;
pub const SDL_PIXELTYPE_INDEX4: SDL_PixelType = 2;
pub const SDL_PIXELTYPE_INDEX8: SDL_PixelType = 3;
pub const SDL_PIXELTYPE_PACKED8: SDL_PixelType = 4;
pub const SDL_PIXELTYPE_PACKED16: SDL_PixelType = 5;
pub const SDL_PIXELTYPE_PACKED32: SDL_PixelType = 6;
pub const SDL_PIXELTYPE_ARRAYU8: SDL_PixelType = 7;
pub const SDL_PIXELTYPE_ARRAYU16: SDL_PixelType = 8;
pub const SDL_PIXELTYPE_ARRAYU32: SDL_PixelType = 9;
pub const SDL_PIXELTYPE_ARRAYF16: SDL_PixelType = 10;
pub const SDL_PIXELTYPE_ARRAYF32: SDL_PixelType = 11;
pub const SDL_BITMAPORDER_NONE: SDL_BitmapOrder = 0;
pub const SDL_BITMAPORDER_4321: SDL_BitmapOrder = 1;
pub const SDL_BITMAPORDER_1234: SDL_BitmapOrder = 2;
pub const SDL_PACKEDORDER_NONE: SDL_PackedOrder = 0;
pub const SDL_PACKEDORDER_XRGB: SDL_PackedOrder = 1;
pub const SDL_PACKEDORDER_RGBX: SDL_PackedOrder = 2;
pub const SDL_PACKEDORDER_ARGB: SDL_PackedOrder = 3;
pub const SDL_PACKEDORDER_RGBA: SDL_PackedOrder = 4;
pub const SDL_PACKEDORDER_XBGR: SDL_PackedOrder = 5;
pub const SDL_PACKEDORDER_BGRX: SDL_PackedOrder = 6;
pub const SDL_PACKEDORDER_ABGR: SDL_PackedOrder = 7;
pub const SDL_PACKEDORDER_BGRA: SDL_PackedOrder = 8;
pub const SDL_ARRAYORDER_NONE: SDL_ArrayOrder = 0;
pub const SDL_ARRAYORDER_RGB: SDL_ArrayOrder = 1;
pub const SDL_ARRAYORDER_UNUSED1: SDL_ArrayOrder = 2;
pub const SDL_ARRAYORDER_UNUSED2: SDL_ArrayOrder = 3;
pub const SDL_ARRAYORDER_BGR: SDL_ArrayOrder = 4;
pub const SDL_PACKEDLAYOUT_NONE: SDL_PackedLayout = 0;
pub const SDL_PACKEDLAYOUT_332: SDL_PackedLayout = 1;
pub const SDL_PACKEDLAYOUT_4444: SDL_PackedLayout = 2;
pub const SDL_PACKEDLAYOUT_1555: SDL_PackedLayout = 3;
pub const SDL_PACKEDLAYOUT_5551: SDL_PackedLayout = 4;
pub const SDL_PACKEDLAYOUT_565: SDL_PackedLayout = 5;
pub const SDL_PACKEDLAYOUT_8888: SDL_PackedLayout = 6;
pub const SDL_PACKEDLAYOUT_2101010: SDL_PackedLayout = 7;
pub const SDL_PACKEDLAYOUT_1010102: SDL_PackedLayout = 8;
pub const SDL_PIXELFORMAT_UNKNOWN: SDL_PixelFormatEnum = 0;
pub const SDL_PIXELFORMAT_INDEX1LSB: SDL_PixelFormatEnum = 286261504;
pub const SDL_PIXELFORMAT_INDEX1MSB: SDL_PixelFormatEnum = 287310080;
pub const SDL_PIXELFORMAT_INDEX4LSB: SDL_PixelFormatEnum = 303039488;
pub const SDL_PIXELFORMAT_INDEX4MSB: SDL_PixelFormatEnum = 304088064;
pub const SDL_PIXELFORMAT_INDEX8: SDL_PixelFormatEnum = 318769153;
pub const SDL_PIXELFORMAT_RGB332: SDL_PixelFormatEnum = 336660481;
pub const SDL_PIXELFORMAT_XRGB4444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PIXELFORMAT_RGB444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PIXELFORMAT_XBGR4444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PIXELFORMAT_BGR444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PIXELFORMAT_XRGB1555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PIXELFORMAT_RGB555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PIXELFORMAT_XBGR1555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PIXELFORMAT_BGR555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PIXELFORMAT_ARGB4444: SDL_PixelFormatEnum = 355602434;
pub const SDL_PIXELFORMAT_RGBA4444: SDL_PixelFormatEnum = 356651010;
pub const SDL_PIXELFORMAT_ABGR4444: SDL_PixelFormatEnum = 359796738;
pub const SDL_PIXELFORMAT_BGRA4444: SDL_PixelFormatEnum = 360845314;
pub const SDL_PIXELFORMAT_ARGB1555: SDL_PixelFormatEnum = 355667970;
pub const SDL_PIXELFORMAT_RGBA5551: SDL_PixelFormatEnum = 356782082;
pub const SDL_PIXELFORMAT_ABGR1555: SDL_PixelFormatEnum = 359862274;
pub const SDL_PIXELFORMAT_BGRA5551: SDL_PixelFormatEnum = 360976386;
pub const SDL_PIXELFORMAT_RGB565: SDL_PixelFormatEnum = 353701890;
pub const SDL_PIXELFORMAT_BGR565: SDL_PixelFormatEnum = 357896194;
pub const SDL_PIXELFORMAT_RGB24: SDL_PixelFormatEnum = 386930691;
pub const SDL_PIXELFORMAT_BGR24: SDL_PixelFormatEnum = 390076419;
pub const SDL_PIXELFORMAT_XRGB8888: SDL_PixelFormatEnum = 370546692;
pub const SDL_PIXELFORMAT_RGBX8888: SDL_PixelFormatEnum = 371595268;
pub const SDL_PIXELFORMAT_XBGR8888: SDL_PixelFormatEnum = 374740996;
pub const SDL_PIXELFORMAT_BGRX8888: SDL_PixelFormatEnum = 375789572;
pub const SDL_PIXELFORMAT_ARGB8888: SDL_PixelFormatEnum = 372645892;
pub const SDL_PIXELFORMAT_RGBA8888: SDL_PixelFormatEnum = 373694468;
pub const SDL_PIXELFORMAT_ABGR8888: SDL_PixelFormatEnum = 376840196;
pub const SDL_PIXELFORMAT_BGRA8888: SDL_PixelFormatEnum = 377888772;
pub const SDL_PIXELFORMAT_ARGB2101010: SDL_PixelFormatEnum = 372711428;
pub const SDL_PIXELFORMAT_RGBA32: SDL_PixelFormatEnum = 376840196;
pub const SDL_PIXELFORMAT_ARGB32: SDL_PixelFormatEnum = 377888772;
pub const SDL_PIXELFORMAT_BGRA32: SDL_PixelFormatEnum = 372645892;
pub const SDL_PIXELFORMAT_ABGR32: SDL_PixelFormatEnum = 373694468;
pub const SDL_PIXELFORMAT_RGBX32: SDL_PixelFormatEnum = 374740996;
pub const SDL_PIXELFORMAT_XRGB32: SDL_PixelFormatEnum = 375789572;
pub const SDL_PIXELFORMAT_BGRX32: SDL_PixelFormatEnum = 370546692;
pub const SDL_PIXELFORMAT_XBGR32: SDL_PixelFormatEnum = 371595268;
pub const SDL_PIXELFORMAT_YV12: SDL_PixelFormatEnum = 842094169;
pub const SDL_PIXELFORMAT_IYUV: SDL_PixelFormatEnum = 1448433993;
pub const SDL_PIXELFORMAT_YUY2: SDL_PixelFormatEnum = 844715353;
pub const SDL_PIXELFORMAT_UYVY: SDL_PixelFormatEnum = 1498831189;
pub const SDL_PIXELFORMAT_YVYU: SDL_PixelFormatEnum = 1431918169;
pub const SDL_PIXELFORMAT_NV12: SDL_PixelFormatEnum = 842094158;
pub const SDL_PIXELFORMAT_NV21: SDL_PixelFormatEnum = 825382478;
pub const SDL_PIXELFORMAT_EXTERNAL_OES: SDL_PixelFormatEnum = 542328143;
pub const SDL_YUV_CONVERSION_JPEG: SDL_YUV_CONVERSION_MODE = 0;
pub const SDL_YUV_CONVERSION_BT601: SDL_YUV_CONVERSION_MODE = 1;
pub const SDL_YUV_CONVERSION_BT709: SDL_YUV_CONVERSION_MODE = 2;
pub const SDL_YUV_CONVERSION_AUTOMATIC: SDL_YUV_CONVERSION_MODE = 3;
pub const SDL_SYSTEM_THEME_UNKNOWN: SDL_SystemTheme = 0;
pub const SDL_SYSTEM_THEME_LIGHT: SDL_SystemTheme = 1;
pub const SDL_SYSTEM_THEME_DARK: SDL_SystemTheme = 2;
pub const SDL_ORIENTATION_UNKNOWN: SDL_DisplayOrientation = 0;
pub const SDL_ORIENTATION_LANDSCAPE: SDL_DisplayOrientation = 1;
pub const SDL_ORIENTATION_LANDSCAPE_FLIPPED: SDL_DisplayOrientation = 2;
pub const SDL_ORIENTATION_PORTRAIT: SDL_DisplayOrientation = 3;
pub const SDL_ORIENTATION_PORTRAIT_FLIPPED: SDL_DisplayOrientation = 4;
pub const SDL_WINDOW_FULLSCREEN: SDL_WindowFlags = 1;
pub const SDL_WINDOW_OPENGL: SDL_WindowFlags = 2;
pub const SDL_WINDOW_OCCLUDED: SDL_WindowFlags = 4;
pub const SDL_WINDOW_HIDDEN: SDL_WindowFlags = 8;
pub const SDL_WINDOW_BORDERLESS: SDL_WindowFlags = 16;
pub const SDL_WINDOW_RESIZABLE: SDL_WindowFlags = 32;
pub const SDL_WINDOW_MINIMIZED: SDL_WindowFlags = 64;
pub const SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = 128;
pub const SDL_WINDOW_MOUSE_GRABBED: SDL_WindowFlags = 256;
pub const SDL_WINDOW_INPUT_FOCUS: SDL_WindowFlags = 512;
pub const SDL_WINDOW_MOUSE_FOCUS: SDL_WindowFlags = 1024;
pub const SDL_WINDOW_FOREIGN: SDL_WindowFlags = 2048;
pub const SDL_WINDOW_HIGH_PIXEL_DENSITY: SDL_WindowFlags = 8192;
pub const SDL_WINDOW_MOUSE_CAPTURE: SDL_WindowFlags = 16384;
pub const SDL_WINDOW_ALWAYS_ON_TOP: SDL_WindowFlags = 32768;
pub const SDL_WINDOW_UTILITY: SDL_WindowFlags = 131072;
pub const SDL_WINDOW_TOOLTIP: SDL_WindowFlags = 262144;
pub const SDL_WINDOW_POPUP_MENU: SDL_WindowFlags = 524288;
pub const SDL_WINDOW_KEYBOARD_GRABBED: SDL_WindowFlags = 1048576;
pub const SDL_WINDOW_VULKAN: SDL_WindowFlags = 268435456;
pub const SDL_WINDOW_METAL: SDL_WindowFlags = 536870912;
pub const SDL_WINDOW_TRANSPARENT: SDL_WindowFlags = 1073741824;
pub const SDL_FLASH_CANCEL: SDL_FlashOperation = 0;
pub const SDL_FLASH_BRIEFLY: SDL_FlashOperation = 1;
pub const SDL_FLASH_UNTIL_FOCUSED: SDL_FlashOperation = 2;
pub const SDL_GL_RED_SIZE: SDL_GLattr = 0;
pub const SDL_GL_GREEN_SIZE: SDL_GLattr = 1;
pub const SDL_GL_BLUE_SIZE: SDL_GLattr = 2;
pub const SDL_GL_ALPHA_SIZE: SDL_GLattr = 3;
pub const SDL_GL_BUFFER_SIZE: SDL_GLattr = 4;
pub const SDL_GL_DOUBLEBUFFER: SDL_GLattr = 5;
pub const SDL_GL_DEPTH_SIZE: SDL_GLattr = 6;
pub const SDL_GL_STENCIL_SIZE: SDL_GLattr = 7;
pub const SDL_GL_ACCUM_RED_SIZE: SDL_GLattr = 8;
pub const SDL_GL_ACCUM_GREEN_SIZE: SDL_GLattr = 9;
pub const SDL_GL_ACCUM_BLUE_SIZE: SDL_GLattr = 10;
pub const SDL_GL_ACCUM_ALPHA_SIZE: SDL_GLattr = 11;
pub const SDL_GL_STEREO: SDL_GLattr = 12;
pub const SDL_GL_MULTISAMPLEBUFFERS: SDL_GLattr = 13;
pub const SDL_GL_MULTISAMPLESAMPLES: SDL_GLattr = 14;
pub const SDL_GL_ACCELERATED_VISUAL: SDL_GLattr = 15;
pub const SDL_GL_RETAINED_BACKING: SDL_GLattr = 16;
pub const SDL_GL_CONTEXT_MAJOR_VERSION: SDL_GLattr = 17;
pub const SDL_GL_CONTEXT_MINOR_VERSION: SDL_GLattr = 18;
pub const SDL_GL_CONTEXT_FLAGS: SDL_GLattr = 19;
pub const SDL_GL_CONTEXT_PROFILE_MASK: SDL_GLattr = 20;
pub const SDL_GL_SHARE_WITH_CURRENT_CONTEXT: SDL_GLattr = 21;
pub const SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: SDL_GLattr = 22;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR: SDL_GLattr = 23;
pub const SDL_GL_CONTEXT_RESET_NOTIFICATION: SDL_GLattr = 24;
pub const SDL_GL_CONTEXT_NO_ERROR: SDL_GLattr = 25;
pub const SDL_GL_FLOATBUFFERS: SDL_GLattr = 26;
pub const SDL_GL_EGL_PLATFORM: SDL_GLattr = 27;
pub const SDL_GL_CONTEXT_PROFILE_CORE: SDL_GLprofile = 1;
pub const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: SDL_GLprofile = 2;
pub const SDL_GL_CONTEXT_PROFILE_ES: SDL_GLprofile = 4;
pub const SDL_GL_CONTEXT_DEBUG_FLAG: SDL_GLcontextFlag = 1;
pub const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: SDL_GLcontextFlag = 2;
pub const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: SDL_GLcontextFlag = 4;
pub const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: SDL_GLcontextFlag = 8;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: SDL_GLcontextReleaseFlag = 0;
pub const SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: SDL_GLcontextReleaseFlag = 1;
pub const SDL_GL_CONTEXT_RESET_NO_NOTIFICATION: SDL_GLContextResetNotification = 0;
pub const SDL_GL_CONTEXT_RESET_LOSE_CONTEXT: SDL_GLContextResetNotification = 1;
pub const SDL_HITTEST_NORMAL: SDL_HitTestResult = 0;
pub const SDL_HITTEST_DRAGGABLE: SDL_HitTestResult = 1;
pub const SDL_HITTEST_RESIZE_TOPLEFT: SDL_HitTestResult = 2;
pub const SDL_HITTEST_RESIZE_TOP: SDL_HitTestResult = 3;
pub const SDL_HITTEST_RESIZE_TOPRIGHT: SDL_HitTestResult = 4;
pub const SDL_HITTEST_RESIZE_RIGHT: SDL_HitTestResult = 5;
pub const SDL_HITTEST_RESIZE_BOTTOMRIGHT: SDL_HitTestResult = 6;
pub const SDL_HITTEST_RESIZE_BOTTOM: SDL_HitTestResult = 7;
pub const SDL_HITTEST_RESIZE_BOTTOMLEFT: SDL_HitTestResult = 8;
pub const SDL_HITTEST_RESIZE_LEFT: SDL_HitTestResult = 9;
pub const SDL_SYSTEM_CURSOR_ARROW: SDL_SystemCursor = 0;
pub const SDL_SYSTEM_CURSOR_IBEAM: SDL_SystemCursor = 1;
pub const SDL_SYSTEM_CURSOR_WAIT: SDL_SystemCursor = 2;
pub const SDL_SYSTEM_CURSOR_CROSSHAIR: SDL_SystemCursor = 3;
pub const SDL_SYSTEM_CURSOR_WAITARROW: SDL_SystemCursor = 4;
pub const SDL_SYSTEM_CURSOR_SIZENWSE: SDL_SystemCursor = 5;
pub const SDL_SYSTEM_CURSOR_SIZENESW: SDL_SystemCursor = 6;
pub const SDL_SYSTEM_CURSOR_SIZEWE: SDL_SystemCursor = 7;
pub const SDL_SYSTEM_CURSOR_SIZENS: SDL_SystemCursor = 8;
pub const SDL_SYSTEM_CURSOR_SIZEALL: SDL_SystemCursor = 9;
pub const SDL_SYSTEM_CURSOR_NO: SDL_SystemCursor = 10;
pub const SDL_SYSTEM_CURSOR_HAND: SDL_SystemCursor = 11;
pub const SDL_NUM_SYSTEM_CURSORS: SDL_SystemCursor = 12;
pub const SDL_MOUSEWHEEL_NORMAL: SDL_MouseWheelDirection = 0;
pub const SDL_MOUSEWHEEL_FLIPPED: SDL_MouseWheelDirection = 1;
pub const SDL_TOUCH_DEVICE_INVALID: SDL_TouchDeviceType = -1;
pub const SDL_TOUCH_DEVICE_DIRECT: SDL_TouchDeviceType = 0;
pub const SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: SDL_TouchDeviceType = 1;
pub const SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: SDL_TouchDeviceType = 2;
pub const SDL_EVENT_FIRST: SDL_EventType = 0;
pub const SDL_EVENT_QUIT: SDL_EventType = 256;
pub const SDL_EVENT_TERMINATING: SDL_EventType = 257;
pub const SDL_EVENT_LOW_MEMORY: SDL_EventType = 258;
pub const SDL_EVENT_WILL_ENTER_BACKGROUND: SDL_EventType = 259;
pub const SDL_EVENT_DID_ENTER_BACKGROUND: SDL_EventType = 260;
pub const SDL_EVENT_WILL_ENTER_FOREGROUND: SDL_EventType = 261;
pub const SDL_EVENT_DID_ENTER_FOREGROUND: SDL_EventType = 262;
pub const SDL_EVENT_LOCALE_CHANGED: SDL_EventType = 263;
pub const SDL_EVENT_SYSTEM_THEME_CHANGED: SDL_EventType = 264;
pub const SDL_EVENT_DISPLAY_ORIENTATION: SDL_EventType = 337;
pub const SDL_EVENT_DISPLAY_CONNECTED: SDL_EventType = 338;
pub const SDL_EVENT_DISPLAY_DISCONNECTED: SDL_EventType = 339;
pub const SDL_EVENT_DISPLAY_MOVED: SDL_EventType = 340;
pub const SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED: SDL_EventType = 341;
pub const SDL_EVENT_DISPLAY_FIRST: SDL_EventType = 337;
pub const SDL_EVENT_DISPLAY_LAST: SDL_EventType = 341;
pub const SDL_EVENT_SYSWM: SDL_EventType = 513;
pub const SDL_EVENT_WINDOW_SHOWN: SDL_EventType = 514;
pub const SDL_EVENT_WINDOW_HIDDEN: SDL_EventType = 515;
pub const SDL_EVENT_WINDOW_EXPOSED: SDL_EventType = 516;
pub const SDL_EVENT_WINDOW_MOVED: SDL_EventType = 517;
pub const SDL_EVENT_WINDOW_RESIZED: SDL_EventType = 518;
pub const SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED: SDL_EventType = 519;
pub const SDL_EVENT_WINDOW_MINIMIZED: SDL_EventType = 520;
pub const SDL_EVENT_WINDOW_MAXIMIZED: SDL_EventType = 521;
pub const SDL_EVENT_WINDOW_RESTORED: SDL_EventType = 522;
pub const SDL_EVENT_WINDOW_MOUSE_ENTER: SDL_EventType = 523;
pub const SDL_EVENT_WINDOW_MOUSE_LEAVE: SDL_EventType = 524;
pub const SDL_EVENT_WINDOW_FOCUS_GAINED: SDL_EventType = 525;
pub const SDL_EVENT_WINDOW_FOCUS_LOST: SDL_EventType = 526;
pub const SDL_EVENT_WINDOW_CLOSE_REQUESTED: SDL_EventType = 527;
pub const SDL_EVENT_WINDOW_TAKE_FOCUS: SDL_EventType = 528;
pub const SDL_EVENT_WINDOW_HIT_TEST: SDL_EventType = 529;
pub const SDL_EVENT_WINDOW_ICCPROF_CHANGED: SDL_EventType = 530;
pub const SDL_EVENT_WINDOW_DISPLAY_CHANGED: SDL_EventType = 531;
pub const SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED: SDL_EventType = 532;
pub const SDL_EVENT_WINDOW_OCCLUDED: SDL_EventType = 533;
pub const SDL_EVENT_WINDOW_DESTROYED: SDL_EventType = 534;
pub const SDL_EVENT_WINDOW_FIRST: SDL_EventType = 514;
pub const SDL_EVENT_WINDOW_LAST: SDL_EventType = 534;
pub const SDL_EVENT_KEY_DOWN: SDL_EventType = 768;
pub const SDL_EVENT_KEY_UP: SDL_EventType = 769;
pub const SDL_EVENT_TEXT_EDITING: SDL_EventType = 770;
pub const SDL_EVENT_TEXT_INPUT: SDL_EventType = 771;
pub const SDL_EVENT_KEYMAP_CHANGED: SDL_EventType = 772;
pub const SDL_EVENT_TEXT_EDITING_EXT: SDL_EventType = 773;
pub const SDL_EVENT_MOUSE_MOTION: SDL_EventType = 1024;
pub const SDL_EVENT_MOUSE_BUTTON_DOWN: SDL_EventType = 1025;
pub const SDL_EVENT_MOUSE_BUTTON_UP: SDL_EventType = 1026;
pub const SDL_EVENT_MOUSE_WHEEL: SDL_EventType = 1027;
pub const SDL_EVENT_JOYSTICK_AXIS_MOTION: SDL_EventType = 1536;
pub const SDL_EVENT_JOYSTICK_HAT_MOTION: SDL_EventType = 1538;
pub const SDL_EVENT_JOYSTICK_BUTTON_DOWN: SDL_EventType = 1539;
pub const SDL_EVENT_JOYSTICK_BUTTON_UP: SDL_EventType = 1540;
pub const SDL_EVENT_JOYSTICK_ADDED: SDL_EventType = 1541;
pub const SDL_EVENT_JOYSTICK_REMOVED: SDL_EventType = 1542;
pub const SDL_EVENT_JOYSTICK_BATTERY_UPDATED: SDL_EventType = 1543;
pub const SDL_EVENT_JOYSTICK_UPDATE_COMPLETE: SDL_EventType = 1544;
pub const SDL_EVENT_GAMEPAD_AXIS_MOTION: SDL_EventType = 1616;
pub const SDL_EVENT_GAMEPAD_BUTTON_DOWN: SDL_EventType = 1617;
pub const SDL_EVENT_GAMEPAD_BUTTON_UP: SDL_EventType = 1618;
pub const SDL_EVENT_GAMEPAD_ADDED: SDL_EventType = 1619;
pub const SDL_EVENT_GAMEPAD_REMOVED: SDL_EventType = 1620;
pub const SDL_EVENT_GAMEPAD_REMAPPED: SDL_EventType = 1621;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN: SDL_EventType = 1622;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION: SDL_EventType = 1623;
pub const SDL_EVENT_GAMEPAD_TOUCHPAD_UP: SDL_EventType = 1624;
pub const SDL_EVENT_GAMEPAD_SENSOR_UPDATE: SDL_EventType = 1625;
pub const SDL_EVENT_GAMEPAD_UPDATE_COMPLETE: SDL_EventType = 1626;
pub const SDL_EVENT_FINGER_DOWN: SDL_EventType = 1792;
pub const SDL_EVENT_FINGER_UP: SDL_EventType = 1793;
pub const SDL_EVENT_FINGER_MOTION: SDL_EventType = 1794;
pub const SDL_EVENT_CLIPBOARD_UPDATE: SDL_EventType = 2304;
pub const SDL_EVENT_DROP_FILE: SDL_EventType = 4096;
pub const SDL_EVENT_DROP_TEXT: SDL_EventType = 4097;
pub const SDL_EVENT_DROP_BEGIN: SDL_EventType = 4098;
pub const SDL_EVENT_DROP_COMPLETE: SDL_EventType = 4099;
pub const SDL_EVENT_DROP_POSITION: SDL_EventType = 4100;
pub const SDL_EVENT_AUDIO_DEVICE_ADDED: SDL_EventType = 4352;
pub const SDL_EVENT_AUDIO_DEVICE_REMOVED: SDL_EventType = 4353;
pub const SDL_EVENT_SENSOR_UPDATE: SDL_EventType = 4608;
pub const SDL_EVENT_RENDER_TARGETS_RESET: SDL_EventType = 8192;
pub const SDL_EVENT_RENDER_DEVICE_RESET: SDL_EventType = 8193;
pub const SDL_EVENT_POLL_SENTINEL: SDL_EventType = 32512;
pub const SDL_EVENT_USER: SDL_EventType = 32768;
pub const SDL_EVENT_LAST: SDL_EventType = 65535;
pub const SDL_ADDEVENT: SDL_eventaction = 0;
pub const SDL_PEEKEVENT: SDL_eventaction = 1;
pub const SDL_GETEVENT: SDL_eventaction = 2;
pub const SDL_FOLDER_HOME: SDL_Folder = 0;
pub const SDL_FOLDER_DESKTOP: SDL_Folder = 1;
pub const SDL_FOLDER_DOCUMENTS: SDL_Folder = 2;
pub const SDL_FOLDER_DOWNLOADS: SDL_Folder = 3;
pub const SDL_FOLDER_MUSIC: SDL_Folder = 4;
pub const SDL_FOLDER_PICTURES: SDL_Folder = 5;
pub const SDL_FOLDER_PUBLICSHARE: SDL_Folder = 6;
pub const SDL_FOLDER_SAVEDGAMES: SDL_Folder = 7;
pub const SDL_FOLDER_SCREENSHOTS: SDL_Folder = 8;
pub const SDL_FOLDER_TEMPLATES: SDL_Folder = 9;
pub const SDL_FOLDER_VIDEOS: SDL_Folder = 10;
pub const SDL_HID_API_BUS_UNKNOWN: SDL_hid_bus_type = 0;
pub const SDL_HID_API_BUS_USB: SDL_hid_bus_type = 1;
pub const SDL_HID_API_BUS_BLUETOOTH: SDL_hid_bus_type = 2;
pub const SDL_HID_API_BUS_I2C: SDL_hid_bus_type = 3;
pub const SDL_HID_API_BUS_SPI: SDL_hid_bus_type = 4;
pub const SDL_HINT_DEFAULT: SDL_HintPriority = 0;
pub const SDL_HINT_NORMAL: SDL_HintPriority = 1;
pub const SDL_HINT_OVERRIDE: SDL_HintPriority = 2;
pub const SDL_INIT_TIMER: SDL_InitFlags = 1;
pub const SDL_INIT_AUDIO: SDL_InitFlags = 16;
pub const SDL_INIT_VIDEO: SDL_InitFlags = 32;
pub const SDL_INIT_JOYSTICK: SDL_InitFlags = 512;
pub const SDL_INIT_HAPTIC: SDL_InitFlags = 4096;
pub const SDL_INIT_GAMEPAD: SDL_InitFlags = 8192;
pub const SDL_INIT_EVENTS: SDL_InitFlags = 16384;
pub const SDL_INIT_SENSOR: SDL_InitFlags = 32768;
pub const SDL_LOG_CATEGORY_APPLICATION: SDL_LogCategory = 0;
pub const SDL_LOG_CATEGORY_ERROR: SDL_LogCategory = 1;
pub const SDL_LOG_CATEGORY_ASSERT: SDL_LogCategory = 2;
pub const SDL_LOG_CATEGORY_SYSTEM: SDL_LogCategory = 3;
pub const SDL_LOG_CATEGORY_AUDIO: SDL_LogCategory = 4;
pub const SDL_LOG_CATEGORY_VIDEO: SDL_LogCategory = 5;
pub const SDL_LOG_CATEGORY_RENDER: SDL_LogCategory = 6;
pub const SDL_LOG_CATEGORY_INPUT: SDL_LogCategory = 7;
pub const SDL_LOG_CATEGORY_TEST: SDL_LogCategory = 8;
pub const SDL_LOG_CATEGORY_RESERVED1: SDL_LogCategory = 9;
pub const SDL_LOG_CATEGORY_RESERVED2: SDL_LogCategory = 10;
pub const SDL_LOG_CATEGORY_RESERVED3: SDL_LogCategory = 11;
pub const SDL_LOG_CATEGORY_RESERVED4: SDL_LogCategory = 12;
pub const SDL_LOG_CATEGORY_RESERVED5: SDL_LogCategory = 13;
pub const SDL_LOG_CATEGORY_RESERVED6: SDL_LogCategory = 14;
pub const SDL_LOG_CATEGORY_RESERVED7: SDL_LogCategory = 15;
pub const SDL_LOG_CATEGORY_RESERVED8: SDL_LogCategory = 16;
pub const SDL_LOG_CATEGORY_RESERVED9: SDL_LogCategory = 17;
pub const SDL_LOG_CATEGORY_RESERVED10: SDL_LogCategory = 18;
pub const SDL_LOG_CATEGORY_CUSTOM: SDL_LogCategory = 19;
pub const SDL_LOG_PRIORITY_VERBOSE: SDL_LogPriority = 1;
pub const SDL_LOG_PRIORITY_DEBUG: SDL_LogPriority = 2;
pub const SDL_LOG_PRIORITY_INFO: SDL_LogPriority = 3;
pub const SDL_LOG_PRIORITY_WARN: SDL_LogPriority = 4;
pub const SDL_LOG_PRIORITY_ERROR: SDL_LogPriority = 5;
pub const SDL_LOG_PRIORITY_CRITICAL: SDL_LogPriority = 6;
pub const SDL_NUM_LOG_PRIORITIES: SDL_LogPriority = 7;
pub const SDL_MESSAGEBOX_ERROR: SDL_MessageBoxFlags = 16;
pub const SDL_MESSAGEBOX_WARNING: SDL_MessageBoxFlags = 32;
pub const SDL_MESSAGEBOX_INFORMATION: SDL_MessageBoxFlags = 64;
pub const SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT: SDL_MessageBoxFlags = 128;
pub const SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT: SDL_MessageBoxFlags = 256;
pub const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT: SDL_MessageBoxButtonFlags = 1;
pub const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT: SDL_MessageBoxButtonFlags = 2;
pub const SDL_MESSAGEBOX_COLOR_BACKGROUND: SDL_MessageBoxColorType = 0;
pub const SDL_MESSAGEBOX_COLOR_TEXT: SDL_MessageBoxColorType = 1;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: SDL_MessageBoxColorType = 2;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: SDL_MessageBoxColorType = 3;
pub const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: SDL_MessageBoxColorType = 4;
pub const SDL_MESSAGEBOX_COLOR_MAX: SDL_MessageBoxColorType = 5;
pub const SDL_POWERSTATE_UNKNOWN: SDL_PowerState = 0;
pub const SDL_POWERSTATE_ON_BATTERY: SDL_PowerState = 1;
pub const SDL_POWERSTATE_NO_BATTERY: SDL_PowerState = 2;
pub const SDL_POWERSTATE_CHARGING: SDL_PowerState = 3;
pub const SDL_POWERSTATE_CHARGED: SDL_PowerState = 4;
pub const SDL_RENDERER_SOFTWARE: SDL_RendererFlags = 1;
pub const SDL_RENDERER_ACCELERATED: SDL_RendererFlags = 2;
pub const SDL_RENDERER_PRESENTVSYNC: SDL_RendererFlags = 4;
pub const SDL_SCALEMODE_NEAREST: SDL_ScaleMode = 0;
pub const SDL_SCALEMODE_LINEAR: SDL_ScaleMode = 1;
pub const SDL_SCALEMODE_BEST: SDL_ScaleMode = 2;
pub const SDL_TEXTUREACCESS_STATIC: SDL_TextureAccess = 0;
pub const SDL_TEXTUREACCESS_STREAMING: SDL_TextureAccess = 1;
pub const SDL_TEXTUREACCESS_TARGET: SDL_TextureAccess = 2;
pub const SDL_TEXTUREMODULATE_NONE: SDL_TextureModulate = 0;
pub const SDL_TEXTUREMODULATE_COLOR: SDL_TextureModulate = 1;
pub const SDL_TEXTUREMODULATE_ALPHA: SDL_TextureModulate = 2;
pub const SDL_FLIP_NONE: SDL_RendererFlip = 0;
pub const SDL_FLIP_HORIZONTAL: SDL_RendererFlip = 1;
pub const SDL_FLIP_VERTICAL: SDL_RendererFlip = 2;
pub const SDL_LOGICAL_PRESENTATION_DISABLED: SDL_RendererLogicalPresentation = 0;
pub const SDL_LOGICAL_PRESENTATION_STRETCH: SDL_RendererLogicalPresentation = 1;
pub const SDL_LOGICAL_PRESENTATION_LETTERBOX: SDL_RendererLogicalPresentation = 2;
pub const SDL_LOGICAL_PRESENTATION_OVERSCAN: SDL_RendererLogicalPresentation = 3;
pub const SDL_LOGICAL_PRESENTATION_INTEGER_SCALE: SDL_RendererLogicalPresentation = 4;
pub const ShapeModeDefault: WindowShapeMode = 0;
pub const ShapeModeBinarizeAlpha: WindowShapeMode = 1;
pub const ShapeModeReverseBinarizeAlpha: WindowShapeMode = 2;
pub const ShapeModeColorKey: WindowShapeMode = 3;
pub const SDL_SYSWM_UNKNOWN: SDL_SYSWM_TYPE = 0;
pub const SDL_SYSWM_ANDROID: SDL_SYSWM_TYPE = 1;
pub const SDL_SYSWM_COCOA: SDL_SYSWM_TYPE = 2;
pub const SDL_SYSWM_HAIKU: SDL_SYSWM_TYPE = 3;
pub const SDL_SYSWM_KMSDRM: SDL_SYSWM_TYPE = 4;
pub const SDL_SYSWM_RISCOS: SDL_SYSWM_TYPE = 5;
pub const SDL_SYSWM_UIKIT: SDL_SYSWM_TYPE = 6;
pub const SDL_SYSWM_VIVANTE: SDL_SYSWM_TYPE = 7;
pub const SDL_SYSWM_WAYLAND: SDL_SYSWM_TYPE = 8;
pub const SDL_SYSWM_WINDOWS: SDL_SYSWM_TYPE = 9;
pub const SDL_SYSWM_WINRT: SDL_SYSWM_TYPE = 10;
pub const SDL_SYSWM_X11: SDL_SYSWM_TYPE = 11;
#[test]
fn bindgen_test_layout_SDL_AssertData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AssertData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AssertData>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AssertData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).always_ignore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(always_ignore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(trigger_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(next)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_AtomicInt() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AtomicInt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AtomicInt>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_AtomicInt))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AtomicInt>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_AtomicInt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AtomicInt),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(left)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(append)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoclose) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(autoclose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(fp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).here) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(here)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(stop)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_4>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(data2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowsio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(windowsio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(stdio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(unknown)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_RWops))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(hidden)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_AudioSpec() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AudioSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AudioSpec>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AudioSpec>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(freq)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GUID() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GUID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GUID>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_GUID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GUID),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_VirtualJoystickDesc() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_VirtualJoystickDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_VirtualJoystickDesc>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_VirtualJoystickDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_VirtualJoystickDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_VirtualJoystickDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naxes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(naxes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbuttons) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(nbuttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nhats) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(nhats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(button_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(axis_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(Update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPlayerIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SetPlayerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rumble) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(Rumble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RumbleTriggers) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(RumbleTriggers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLED) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SetLED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendEffect) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SendEffect)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Color() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Color>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_Color))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Color>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_Color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(a)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Palette() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Palette> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Palette>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Palette))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Palette>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Palette))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncolors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(ncolors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(refcount)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_PixelFormat() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_PixelFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_PixelFormat>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_PixelFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitsPerPixel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BytesPerPixel) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BytesPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rmask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gmask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bmask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Amask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rloss) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gloss) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bloss) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Aloss) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Aloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rshift) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gshift) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bshift) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ashift) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Ashift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(next)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Point() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Point>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_Point))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Point>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_FPoint() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_FPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_FPoint>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_FPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Rect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Rect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(h)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_FRect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_FRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_FRect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_FRect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_FRect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(h)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Surface() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Surface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Surface>(),
        96usize,
        concat!("Size of: ", stringify!(SDL_Surface))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Surface>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Surface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_blitmap) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(list_blitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_rect) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(clip_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(refcount)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_DisplayMode() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DisplayMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DisplayMode>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DisplayMode>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(displayID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_density) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(pixel_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh_rate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(refresh_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(driverdata)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Keysym() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Keysym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Keysym>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Keysym>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scancode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(scancode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sym) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(unused)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Finger() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Finger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Finger>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Finger))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Finger>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Finger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(pressure)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_CommonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_CommonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_CommonEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_CommonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_DisplayEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DisplayEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DisplayEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DisplayEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(displayID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(data1)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_WindowEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_KeyboardEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_KeyboardEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_KeyboardEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_KeyboardEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keysym) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(keysym)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_TextEditingEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextEditingEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextEditingEvent>(),
        64usize,
        concat!("Size of: ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextEditingEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(length)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_TextEditingExtEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextEditingExtEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextEditingExtEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_TextEditingExtEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextEditingExtEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextEditingExtEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(length)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_TextInputEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextInputEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextInputEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextInputEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(text)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MouseMotionEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseMotionEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseMotionEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseMotionEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(xrel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yrel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(yrel)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MouseButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseButtonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseButtonEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clicks) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(clicks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MouseWheelEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseWheelEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseWheelEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseWheelEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouseX) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(mouseX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouseY) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(mouseY)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_JoyAxisEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyAxisEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyAxisEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyAxisEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding4) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_JoyHatEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyHatEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyHatEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyHatEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hat) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(hat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_JoyButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyButtonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyButtonEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_JoyDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyDeviceEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_JoyBatteryEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyBatteryEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyBatteryEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyBatteryEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyBatteryEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyBatteryEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(level)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GamepadAxisEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadAxisEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadAxisEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_GamepadAxisEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadAxisEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadAxisEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding4) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GamepadButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadButtonEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadButtonEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_GamepadButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GamepadDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadDeviceEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_GamepadDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GamepadTouchpadEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadTouchpadEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadTouchpadEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_GamepadTouchpadEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadTouchpadEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadTouchpadEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchpad) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(touchpad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finger) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(finger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(pressure)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_GamepadSensorEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadSensorEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadSensorEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_GamepadSensorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadSensorEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadSensorEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(sensor_timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_AudioDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AudioDeviceEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AudioDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AudioDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iscapture) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(iscapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding3)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_TouchFingerEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TouchFingerEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TouchFingerEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TouchFingerEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(touchId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fingerId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(fingerId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(windowID)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_DropEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DropEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DropEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DropEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(y)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_ClipboardEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_ClipboardEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_ClipboardEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_ClipboardEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_ClipboardEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_ClipboardEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ClipboardEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ClipboardEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SensorEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SensorEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SensorEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SensorEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_timestamp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(sensor_timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_QuitEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_QuitEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_QuitEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_QuitEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_OSEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_OSEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_OSEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_OSEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_UserEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_UserEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_UserEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_UserEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(msg)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Event() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Event>(),
        128usize,
        concat!("Size of: ", stringify!(SDL_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).editExt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(editExt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wheel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(wheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jhat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jhat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jbutton) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jbutton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jdevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jdevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jbattery) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jbattery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gbutton) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gbutton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gdevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gtouchpad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gtouchpad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsensor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gsensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(adevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syswm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(syswm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfinger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(tfinger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(drop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipboard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(clipboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticDirection() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticDirection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticDirection>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticDirection>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(dir)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticConstant() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticConstant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticConstant>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticConstant>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_level)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticPeriodic() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticPeriodic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticPeriodic>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticPeriodic>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magnitude) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_level)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticCondition() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticCondition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticCondition>(),
        68usize,
        concat!("Size of: ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticCondition>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_sat) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_sat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_sat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_sat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_coeff) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_coeff) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadband) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(deadband)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(center)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticRamp() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticRamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticRamp>(),
        44usize,
        concat!("Size of: ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticRamp>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_level)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticLeftRight() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticLeftRight> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticLeftRight>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticLeftRight>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_magnitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(large_magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).small_magnitude) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(small_magnitude)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticCustom() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticCustom> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticCustom>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticCustom>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_level)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_HapticEffect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticEffect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticEffect>(),
        72usize,
        concat!("Size of: ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticEffect>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ramp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftright) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(leftright)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(custom)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_hid_device_info() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_hid_device_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_hid_device_info>(),
        80usize,
        concat!("Size of: ", stringify!(SDL_hid_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_hid_device_info>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_hid_device_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(serial_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(release_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer_string) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(manufacturer_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_string) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(product_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_page) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(usage_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_number) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_class) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_subclass) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_subclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_protocol) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_type) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(bus_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(next)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Locale() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Locale> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Locale>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Locale))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Locale>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Locale))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).country) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(country)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxButtonData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxButtonData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxButtonData>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxButtonData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttonid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(buttonid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(text)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColor() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxColor>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxColor>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(b)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColorScheme() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxColorScheme> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxColorScheme>(),
        15usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxColorScheme>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColorScheme),
            "::",
            stringify!(colors)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxData>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbuttons) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(numbuttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttons) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorScheme) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(colorScheme)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RendererInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RendererInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RendererInfo>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RendererInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_texture_formats) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(num_texture_formats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texture_formats) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(texture_formats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_texture_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_texture_height) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_height)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_Vertex() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Vertex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Vertex>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_Vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Vertex>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Vertex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex_coord) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(tex_coord)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeParams() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowShapeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowShapeParams>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowShapeParams>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binarizationCutoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(binarizationCutoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorKey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(colorKey)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeMode() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowShapeMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowShapeMode>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowShapeMode>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(parameters)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_version() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_version> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_version>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_version))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_version>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(patch)
        )
    );
}
#[test]
fn bindgen_test_layout_HINSTANCE__() {
    const UNINIT: ::std::mem::MaybeUninit<HINSTANCE__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HINSTANCE__>(),
        4usize,
        concat!("Size of: ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        ::std::mem::align_of::<HINSTANCE__>(),
        4usize,
        concat!("Alignment of ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HINSTANCE__),
            "::",
            stringify!(unused)
        )
    );
}
#[test]
fn bindgen_test_layout_HWND__() {
    const UNINIT: ::std::mem::MaybeUninit<HWND__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
#[test]
fn bindgen_test_layout_HDC__() {
    const UNINIT: ::std::mem::MaybeUninit<HDC__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HDC__>(),
        4usize,
        concat!("Size of: ", stringify!(HDC__))
    );
    assert_eq!(
        ::std::mem::align_of::<HDC__>(),
        4usize,
        concat!("Alignment of ", stringify!(HDC__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HDC__),
            "::",
            stringify!(unused)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hwnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hwnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wParam) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(wParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lParam) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lParam)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMmsg__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMmsg__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMmsg__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_SysWMmsg__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMmsg__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMmsg__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg__bindgen_ty_1),
            "::",
            stringify!(dummy)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMmsg() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMmsg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMmsg>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_SysWMmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMmsg>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMmsg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsystem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg),
            "::",
            stringify!(subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMmsg),
            "::",
            stringify!(msg)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hinstance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(hinstance)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMinfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMinfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMinfo__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(SDL_SysWMinfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMinfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMinfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_ptrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1),
            "::",
            stringify!(dummy_ptrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy_ints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo__bindgen_ty_1),
            "::",
            stringify!(dummy_ints)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_SysWMinfo() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMinfo>(),
        128usize,
        concat!("Size of: ", stringify!(SDL_SysWMinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsystem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo),
            "::",
            stringify!(subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMinfo),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_RWops__bindgen_ty_1 {
    pub windowsio: SDL_RWops__bindgen_ty_1__bindgen_ty_1,
    pub stdio: SDL_RWops__bindgen_ty_1__bindgen_ty_2,
    pub mem: SDL_RWops__bindgen_ty_1__bindgen_ty_3,
    pub unknown: SDL_RWops__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_Event {
    pub type_: Uint32,
    pub common: SDL_CommonEvent,
    pub display: SDL_DisplayEvent,
    pub window: SDL_WindowEvent,
    pub key: SDL_KeyboardEvent,
    pub edit: SDL_TextEditingEvent,
    pub editExt: SDL_TextEditingExtEvent,
    pub text: SDL_TextInputEvent,
    pub motion: SDL_MouseMotionEvent,
    pub button: SDL_MouseButtonEvent,
    pub wheel: SDL_MouseWheelEvent,
    pub jaxis: SDL_JoyAxisEvent,
    pub jhat: SDL_JoyHatEvent,
    pub jbutton: SDL_JoyButtonEvent,
    pub jdevice: SDL_JoyDeviceEvent,
    pub jbattery: SDL_JoyBatteryEvent,
    pub gaxis: SDL_GamepadAxisEvent,
    pub gbutton: SDL_GamepadButtonEvent,
    pub gdevice: SDL_GamepadDeviceEvent,
    pub gtouchpad: SDL_GamepadTouchpadEvent,
    pub gsensor: SDL_GamepadSensorEvent,
    pub adevice: SDL_AudioDeviceEvent,
    pub sensor: SDL_SensorEvent,
    pub quit: SDL_QuitEvent,
    pub user: SDL_UserEvent,
    pub syswm: SDL_SysWMEvent,
    pub tfinger: SDL_TouchFingerEvent,
    pub drop: SDL_DropEvent,
    pub clipboard: SDL_ClipboardEvent,
    pub padding: [Uint8; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_HapticEffect {
    pub type_: Uint16,
    pub constant: SDL_HapticConstant,
    pub periodic: SDL_HapticPeriodic,
    pub condition: SDL_HapticCondition,
    pub ramp: SDL_HapticRamp,
    pub leftright: SDL_HapticLeftRight,
    pub custom: SDL_HapticCustom,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_WindowShapeParams {
    pub binarizationCutoff: Uint8,
    pub colorKey: SDL_Color,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_SysWMmsg__bindgen_ty_1 {
    pub win: SDL_SysWMmsg__bindgen_ty_1__bindgen_ty_1,
    pub dummy: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_SysWMinfo__bindgen_ty_1 {
    pub win: SDL_SysWMinfo__bindgen_ty_1__bindgen_ty_1,
    pub dummy_ptrs: [*mut ::std::os::raw::c_void; 14usize],
    pub dummy_ints: [Uint64; 14usize],
}
extern "C" {
    pub fn SDL_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_calloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_realloc(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_free(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_GetOriginalMemoryFunctions(
        malloc_func: *mut SDL_malloc_func,
        calloc_func: *mut SDL_calloc_func,
        realloc_func: *mut SDL_realloc_func,
        free_func: *mut SDL_free_func,
    );
}
extern "C" {
    pub fn SDL_GetMemoryFunctions(
        malloc_func: *mut SDL_malloc_func,
        calloc_func: *mut SDL_calloc_func,
        realloc_func: *mut SDL_realloc_func,
        free_func: *mut SDL_free_func,
    );
}
extern "C" {
    pub fn SDL_SetMemoryFunctions(
        malloc_func: SDL_malloc_func,
        calloc_func: SDL_calloc_func,
        realloc_func: SDL_realloc_func,
        free_func: SDL_free_func,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_aligned_alloc(alignment: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_aligned_free(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_GetNumAllocations() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_getenv(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_setenv(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_qsort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SDL_bsearch(
        key: *const ::std::os::raw::c_void,
        base: *const ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_abs(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isalpha(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isalnum(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isblank(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_iscntrl(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isdigit(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isxdigit(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ispunct(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isspace(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isupper(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_islower(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isprint(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isgraph(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_toupper(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_tolower(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_crc16(crc: Uint16, data: *const ::std::os::raw::c_void, len: usize) -> Uint16;
}
extern "C" {
    pub fn SDL_crc32(crc: Uint32, data: *const ::std::os::raw::c_void, len: usize) -> Uint32;
}
extern "C" {
    pub fn SDL_memset(
        dst: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memset4(
        dst: *mut ::std::os::raw::c_void,
        val: Uint32,
        dwords: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memcpy(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memmove(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memcmp(
        s1: *const ::std::os::raw::c_void,
        s2: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcslen(wstr: *const wchar_t) -> usize;
}
extern "C" {
    pub fn SDL_wcsnlen(wstr: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcslcpy(dst: *mut wchar_t, src: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcslcat(dst: *mut wchar_t, src: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcsdup(wstr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcsstr(haystack: *const wchar_t, needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcscmp(str1: *const wchar_t, str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcsncmp(
        str1: *const wchar_t,
        str2: *const wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcscasecmp(str1: *const wchar_t, str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcsncasecmp(
        str1: *const wchar_t,
        str2: *const wchar_t,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcstol(
        str_: *const wchar_t,
        endp: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_strlen(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn SDL_strnlen(str_: *const ::std::os::raw::c_char, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_utf8strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_bytes: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strndup(
        str_: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strrev(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strupr(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strlwr(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strchr(
        str_: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strrchr(
        str_: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strstr(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strcasestr(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strtok_r(
        s1: *mut ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        saveptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_utf8strlen(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn SDL_utf8strnlen(str_: *const ::std::os::raw::c_char, bytes: usize) -> usize;
}
extern "C" {
    pub fn SDL_itoa(
        value: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_uitoa(
        value: ::std::os::raw::c_uint,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ltoa(
        value: ::std::os::raw::c_long,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ultoa(
        value: ::std::os::raw::c_ulong,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_lltoa(
        value: Sint64,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ulltoa(
        value: Uint64,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_atoi(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_atof(str_: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn SDL_strtol(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_strtoul(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn SDL_strtoll(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> Sint64;
}
extern "C" {
    pub fn SDL_strtoull(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> Uint64;
}
extern "C" {
    pub fn SDL_strtod(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn SDL_strcmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strncmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strcasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strncasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_sscanf(
        text: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_snprintf(
        text: *mut ::std::os::raw::c_char,
        maxlen: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_swprintf(
        text: *mut wchar_t,
        maxlen: usize,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_asprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_acos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_acosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_asin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_asinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_atanf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan2(y: f64, x: f64) -> f64;
}
extern "C" {
    pub fn SDL_atan2f(y: f32, x: f32) -> f32;
}
extern "C" {
    pub fn SDL_ceil(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_ceilf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_copysign(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_copysignf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_cos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_cosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_exp(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_expf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fabs(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_fabsf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_floor(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_floorf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_trunc(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_truncf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fmod(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_fmodf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_log(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_logf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_log10(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_log10f(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_modf(x: f64, y: *mut f64) -> f64;
}
extern "C" {
    pub fn SDL_modff(x: f32, y: *mut f32) -> f32;
}
extern "C" {
    pub fn SDL_pow(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_powf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_round(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_roundf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_lround(x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_lroundf(x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_scalbn(x: f64, n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn SDL_scalbnf(x: f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn SDL_sin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_sqrt(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sqrtf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_tan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_tanf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_iconv_open(
        tocode: *const ::std::os::raw::c_char,
        fromcode: *const ::std::os::raw::c_char,
    ) -> SDL_iconv_t;
}
extern "C" {
    pub fn SDL_iconv_close(cd: SDL_iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_iconv(
        cd: SDL_iconv_t,
        inbuf: *mut *const ::std::os::raw::c_char,
        inbytesleft: *mut usize,
        outbuf: *mut *mut ::std::os::raw::c_char,
        outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_iconv_string(
        tocode: *const ::std::os::raw::c_char,
        fromcode: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_char,
        inbytesleft: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ReportAssertion(
        data: *mut SDL_AssertData,
        func: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> SDL_AssertState;
}
extern "C" {
    pub fn SDL_SetAssertionHandler(
        handler: SDL_AssertionHandler,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SDL_GetDefaultAssertionHandler() -> SDL_AssertionHandler;
}
extern "C" {
    pub fn SDL_GetAssertionHandler(
        puserdata: *mut *mut ::std::os::raw::c_void,
    ) -> SDL_AssertionHandler;
}
extern "C" {
    pub fn SDL_GetAssertionReport() -> *const SDL_AssertData;
}
extern "C" {
    pub fn SDL_ResetAssertionReport();
}
extern "C" {
    pub fn SDL_AtomicTryLock(lock: *mut SDL_SpinLock) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicLock(lock: *mut SDL_SpinLock);
}
extern "C" {
    pub fn SDL_AtomicUnlock(lock: *mut SDL_SpinLock);
}
extern "C" {
    pub fn SDL_MemoryBarrierReleaseFunction();
}
extern "C" {
    pub fn SDL_MemoryBarrierAcquireFunction();
}
extern "C" {
    pub fn SDL_AtomicCAS(
        a: *mut SDL_AtomicInt,
        oldval: ::std::os::raw::c_int,
        newval: ::std::os::raw::c_int,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicSet(a: *mut SDL_AtomicInt, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_AtomicGet(a: *mut SDL_AtomicInt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_AtomicAdd(a: *mut SDL_AtomicInt, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_AtomicCASPtr(
        a: *mut *mut ::std::os::raw::c_void,
        oldval: *mut ::std::os::raw::c_void,
        newval: *mut ::std::os::raw::c_void,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AtomicSetPtr(
        a: *mut *mut ::std::os::raw::c_void,
        v: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_AtomicGetPtr(a: *mut *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_SetError(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetErrorMsg(
        errstr: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ClearError();
}
extern "C" {
    pub fn SDL_Error(code: SDL_errorcode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CreateMutex() -> *mut SDL_Mutex;
}
extern "C" {
    pub fn SDL_LockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_TryLockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnlockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyMutex(mutex: *mut SDL_Mutex);
}
extern "C" {
    pub fn SDL_CreateRWLock() -> *mut SDL_RWLock;
}
extern "C" {
    pub fn SDL_LockRWLockForReading(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LockRWLockForWriting(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_TryLockRWLockForReading(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_TryLockRWLockForWriting(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnlockRWLock(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyRWLock(rwlock: *mut SDL_RWLock);
}
extern "C" {
    pub fn SDL_CreateSemaphore(initial_value: Uint32) -> *mut SDL_Semaphore;
}
extern "C" {
    pub fn SDL_DestroySemaphore(sem: *mut SDL_Semaphore);
}
extern "C" {
    pub fn SDL_WaitSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_TryWaitSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitSemaphoreTimeout(
        sem: *mut SDL_Semaphore,
        timeoutMS: Sint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_PostSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSemaphoreValue(sem: *mut SDL_Semaphore) -> Uint32;
}
extern "C" {
    pub fn SDL_CreateCondition() -> *mut SDL_Condition;
}
extern "C" {
    pub fn SDL_DestroyCondition(cond: *mut SDL_Condition);
}
extern "C" {
    pub fn SDL_SignalCondition(cond: *mut SDL_Condition) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BroadcastCondition(cond: *mut SDL_Condition) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitCondition(
        cond: *mut SDL_Condition,
        mutex: *mut SDL_Mutex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitConditionTimeout(
        cond: *mut SDL_Condition,
        mutex: *mut SDL_Mutex,
        timeoutMS: Sint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CreateThread(
        fn_: SDL_ThreadFunction,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        pfnBeginThread: pfnSDL_CurrentBeginThread,
        pfnEndThread: pfnSDL_CurrentEndThread,
    ) -> *mut SDL_Thread;
}
extern "C" {
    pub fn SDL_CreateThreadWithStackSize(
        fn_: SDL_ThreadFunction,
        name: *const ::std::os::raw::c_char,
        stacksize: usize,
        data: *mut ::std::os::raw::c_void,
        pfnBeginThread: pfnSDL_CurrentBeginThread,
        pfnEndThread: pfnSDL_CurrentEndThread,
    ) -> *mut SDL_Thread;
}
extern "C" {
    pub fn SDL_GetThreadName(thread: *mut SDL_Thread) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ThreadID() -> SDL_threadID;
}
extern "C" {
    pub fn SDL_GetThreadID(thread: *mut SDL_Thread) -> SDL_threadID;
}
extern "C" {
    pub fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitThread(thread: *mut SDL_Thread, status: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn SDL_DetachThread(thread: *mut SDL_Thread);
}
extern "C" {
    pub fn SDL_CreateTLS() -> SDL_TLSID;
}
extern "C" {
    pub fn SDL_GetTLS(id: SDL_TLSID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_SetTLS(
        id: SDL_TLSID,
        value: *const ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CleanupTLS();
}
extern "C" {
    pub fn SDL_RWFromFile(
        file: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_RWFromMem(mem: *mut ::std::os::raw::c_void, size: usize) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_RWFromConstMem(mem: *const ::std::os::raw::c_void, size: usize) -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_CreateRW() -> *mut SDL_RWops;
}
extern "C" {
    pub fn SDL_DestroyRW(context: *mut SDL_RWops);
}
extern "C" {
    pub fn SDL_RWsize(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    pub fn SDL_RWseek(
        context: *mut SDL_RWops,
        offset: Sint64,
        whence: ::std::os::raw::c_int,
    ) -> Sint64;
}
extern "C" {
    pub fn SDL_RWtell(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    pub fn SDL_RWread(
        context: *mut SDL_RWops,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_RWwrite(
        context: *mut SDL_RWops,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_RWclose(context: *mut SDL_RWops) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LoadFile_RW(
        src: *mut SDL_RWops,
        datasize: *mut usize,
        freesrc: SDL_bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_LoadFile(
        file: *const ::std::os::raw::c_char,
        datasize: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_ReadU8(src: *mut SDL_RWops, value: *mut Uint8) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU16LE(src: *mut SDL_RWops, value: *mut Uint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS16LE(src: *mut SDL_RWops, value: *mut Sint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU16BE(src: *mut SDL_RWops, value: *mut Uint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS16BE(src: *mut SDL_RWops, value: *mut Sint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU32LE(src: *mut SDL_RWops, value: *mut Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS32LE(src: *mut SDL_RWops, value: *mut Sint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU32BE(src: *mut SDL_RWops, value: *mut Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS32BE(src: *mut SDL_RWops, value: *mut Sint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU64LE(src: *mut SDL_RWops, value: *mut Uint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS64LE(src: *mut SDL_RWops, value: *mut Sint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadU64BE(src: *mut SDL_RWops, value: *mut Uint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ReadS64BE(src: *mut SDL_RWops, value: *mut Sint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU8(dst: *mut SDL_RWops, value: Uint8) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU16LE(dst: *mut SDL_RWops, value: Uint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteS16LE(dst: *mut SDL_RWops, value: Sint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU16BE(dst: *mut SDL_RWops, value: Uint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteS16BE(dst: *mut SDL_RWops, value: Sint16) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU32LE(dst: *mut SDL_RWops, value: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteS32LE(dst: *mut SDL_RWops, value: Sint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU32BE(dst: *mut SDL_RWops, value: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteS32BE(dst: *mut SDL_RWops, value: Sint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU64LE(dst: *mut SDL_RWops, value: Uint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteS64LE(dst: *mut SDL_RWops, value: Sint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_WriteU64BE(dst: *mut SDL_RWops, value: Uint64) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetNumAudioDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetAudioDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetCurrentAudioDriver() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetAudioOutputDevices(count: *mut ::std::os::raw::c_int) -> *mut SDL_AudioDeviceID;
}
extern "C" {
    pub fn SDL_GetAudioCaptureDevices(count: *mut ::std::os::raw::c_int) -> *mut SDL_AudioDeviceID;
}
extern "C" {
    pub fn SDL_GetAudioDeviceName(devid: SDL_AudioDeviceID) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetAudioDeviceFormat(
        devid: SDL_AudioDeviceID,
        spec: *mut SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_OpenAudioDevice(
        devid: SDL_AudioDeviceID,
        spec: *const SDL_AudioSpec,
    ) -> SDL_AudioDeviceID;
}
extern "C" {
    pub fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ResumeAudioDevice(dev: SDL_AudioDeviceID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_IsAudioDevicePaused(dev: SDL_AudioDeviceID) -> SDL_bool;
}
extern "C" {
    pub fn SDL_CloseAudioDevice(devid: SDL_AudioDeviceID);
}
extern "C" {
    pub fn SDL_BindAudioStreams(
        devid: SDL_AudioDeviceID,
        streams: *mut *mut SDL_AudioStream,
        num_streams: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BindAudioStream(
        devid: SDL_AudioDeviceID,
        stream: *mut SDL_AudioStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnbindAudioStreams(
        streams: *mut *mut SDL_AudioStream,
        num_streams: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SDL_UnbindAudioStream(stream: *mut SDL_AudioStream);
}
extern "C" {
    pub fn SDL_GetAudioStreamBinding(stream: *mut SDL_AudioStream) -> SDL_AudioDeviceID;
}
extern "C" {
    pub fn SDL_CreateAudioStream(
        src_spec: *const SDL_AudioSpec,
        dst_spec: *const SDL_AudioSpec,
    ) -> *mut SDL_AudioStream;
}
extern "C" {
    pub fn SDL_GetAudioStreamFormat(
        stream: *mut SDL_AudioStream,
        src_spec: *mut SDL_AudioSpec,
        dst_spec: *mut SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetAudioStreamFormat(
        stream: *mut SDL_AudioStream,
        src_spec: *const SDL_AudioSpec,
        dst_spec: *const SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_PutAudioStreamData(
        stream: *mut SDL_AudioStream,
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetAudioStreamData(
        stream: *mut SDL_AudioStream,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetAudioStreamAvailable(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_FlushAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ClearAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LockAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnlockAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetAudioStreamGetCallback(
        stream: *mut SDL_AudioStream,
        callback: SDL_AudioStreamRequestCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetAudioStreamPutCallback(
        stream: *mut SDL_AudioStream,
        callback: SDL_AudioStreamRequestCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyAudioStream(stream: *mut SDL_AudioStream);
}
extern "C" {
    pub fn SDL_CreateAndBindAudioStream(
        devid: SDL_AudioDeviceID,
        spec: *const SDL_AudioSpec,
    ) -> *mut SDL_AudioStream;
}
extern "C" {
    pub fn SDL_LoadWAV_RW(
        src: *mut SDL_RWops,
        freesrc: SDL_bool,
        spec: *mut SDL_AudioSpec,
        audio_buf: *mut *mut Uint8,
        audio_len: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LoadWAV(
        path: *const ::std::os::raw::c_char,
        spec: *mut SDL_AudioSpec,
        audio_buf: *mut *mut Uint8,
        audio_len: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_MixAudioFormat(
        dst: *mut Uint8,
        src: *const Uint8,
        format: SDL_AudioFormat,
        len: Uint32,
        volume: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ConvertAudioSamples(
        src_spec: *const SDL_AudioSpec,
        src_data: *const Uint8,
        src_len: ::std::os::raw::c_int,
        dst_spec: *const SDL_AudioSpec,
        dst_data: *mut *mut Uint8,
        dst_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSilenceValueForFormat(format: SDL_AudioFormat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ComposeCustomBlendMode(
        srcColorFactor: SDL_BlendFactor,
        dstColorFactor: SDL_BlendFactor,
        colorOperation: SDL_BlendOperation,
        srcAlphaFactor: SDL_BlendFactor,
        dstAlphaFactor: SDL_BlendFactor,
        alphaOperation: SDL_BlendOperation,
    ) -> SDL_BlendMode;
}
extern "C" {
    pub fn SDL_SetClipboardText(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetClipboardText() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_HasClipboardText() -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetPrimarySelectionText(
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetPrimarySelectionText() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_HasPrimarySelectionText() -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetClipboardData(
        callback: SDL_ClipboardDataCallback,
        cleanup: SDL_ClipboardCleanupCallback,
        userdata: *mut ::std::os::raw::c_void,
        mime_types: *mut *const ::std::os::raw::c_char,
        num_mime_types: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ClearClipboardData() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetClipboardData(
        mime_type: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_HasClipboardData(mime_type: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetCPUCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetCPUCacheLineSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HasAltiVec() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasMMX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE2() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE3() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE41() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasSSE42() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX2() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasAVX512F() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasARMSIMD() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasNEON() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasLSX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasLASX() -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetSystemRAM() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SIMDGetAlignment() -> usize;
}
extern "C" {
    pub fn SDL_GetSensors(count: *mut ::std::os::raw::c_int) -> *mut SDL_SensorID;
}
extern "C" {
    pub fn SDL_GetSensorInstanceName(instance_id: SDL_SensorID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetSensorInstanceType(instance_id: SDL_SensorID) -> SDL_SensorType;
}
extern "C" {
    pub fn SDL_GetSensorInstanceNonPortableType(instance_id: SDL_SensorID)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_OpenSensor(instance_id: SDL_SensorID) -> *mut SDL_Sensor;
}
extern "C" {
    pub fn SDL_GetSensorFromInstanceID(instance_id: SDL_SensorID) -> *mut SDL_Sensor;
}
extern "C" {
    pub fn SDL_GetSensorName(sensor: *mut SDL_Sensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetSensorType(sensor: *mut SDL_Sensor) -> SDL_SensorType;
}
extern "C" {
    pub fn SDL_GetSensorNonPortableType(sensor: *mut SDL_Sensor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSensorInstanceID(sensor: *mut SDL_Sensor) -> SDL_SensorID;
}
extern "C" {
    pub fn SDL_GetSensorData(
        sensor: *mut SDL_Sensor,
        data: *mut f32,
        num_values: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CloseSensor(sensor: *mut SDL_Sensor);
}
extern "C" {
    pub fn SDL_UpdateSensors();
}
extern "C" {
    pub fn SDL_GUIDToString(
        guid: SDL_GUID,
        pszGUID: *mut ::std::os::raw::c_char,
        cbGUID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GUIDFromString(pchGUID: *const ::std::os::raw::c_char) -> SDL_GUID;
}
extern "C" {
    pub fn SDL_LockJoysticks();
}
extern "C" {
    pub fn SDL_UnlockJoysticks();
}
extern "C" {
    pub fn SDL_GetJoysticks(count: *mut ::std::os::raw::c_int) -> *mut SDL_JoystickID;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceName(
        instance_id: SDL_JoystickID,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetJoystickInstancePath(
        instance_id: SDL_JoystickID,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetJoystickInstancePlayerIndex(instance_id: SDL_JoystickID)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceGUID(instance_id: SDL_JoystickID) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceVendor(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceProduct(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceProductVersion(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceType(instance_id: SDL_JoystickID) -> SDL_JoystickType;
}
extern "C" {
    pub fn SDL_OpenJoystick(instance_id: SDL_JoystickID) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_GetJoystickFromInstanceID(instance_id: SDL_JoystickID) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_GetJoystickFromPlayerIndex(player_index: ::std::os::raw::c_int)
        -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_AttachVirtualJoystick(
        type_: SDL_JoystickType,
        naxes: ::std::os::raw::c_int,
        nbuttons: ::std::os::raw::c_int,
        nhats: ::std::os::raw::c_int,
    ) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_AttachVirtualJoystickEx(desc: *const SDL_VirtualJoystickDesc) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_DetachVirtualJoystick(instance_id: SDL_JoystickID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_IsJoystickVirtual(instance_id: SDL_JoystickID) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetJoystickVirtualAxis(
        joystick: *mut SDL_Joystick,
        axis: ::std::os::raw::c_int,
        value: Sint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetJoystickVirtualButton(
        joystick: *mut SDL_Joystick,
        button: ::std::os::raw::c_int,
        value: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetJoystickVirtualHat(
        joystick: *mut SDL_Joystick,
        hat: ::std::os::raw::c_int,
        value: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetJoystickName(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetJoystickPath(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetJoystickPlayerIndex(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetJoystickPlayerIndex(
        joystick: *mut SDL_Joystick,
        player_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetJoystickGUID(joystick: *mut SDL_Joystick) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_GetJoystickVendor(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickProduct(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickProductVersion(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickFirmwareVersion(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    pub fn SDL_GetJoystickSerial(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetJoystickType(joystick: *mut SDL_Joystick) -> SDL_JoystickType;
}
extern "C" {
    pub fn SDL_GetJoystickGUIDString(
        guid: SDL_JoystickGUID,
        pszGUID: *mut ::std::os::raw::c_char,
        cbGUID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetJoystickGUIDFromString(
        pchGUID: *const ::std::os::raw::c_char,
    ) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_GetJoystickGUIDInfo(
        guid: SDL_JoystickGUID,
        vendor: *mut Uint16,
        product: *mut Uint16,
        version: *mut Uint16,
        crc16: *mut Uint16,
    );
}
extern "C" {
    pub fn SDL_JoystickConnected(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetJoystickInstanceID(joystick: *mut SDL_Joystick) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_GetNumJoystickAxes(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetNumJoystickHats(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetNumJoystickButtons(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetJoystickEventsEnabled(enabled: SDL_bool);
}
extern "C" {
    pub fn SDL_JoystickEventsEnabled() -> SDL_bool;
}
extern "C" {
    pub fn SDL_UpdateJoysticks();
}
extern "C" {
    pub fn SDL_GetJoystickAxis(joystick: *mut SDL_Joystick, axis: ::std::os::raw::c_int) -> Sint16;
}
extern "C" {
    pub fn SDL_GetJoystickAxisInitialState(
        joystick: *mut SDL_Joystick,
        axis: ::std::os::raw::c_int,
        state: *mut Sint16,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetJoystickHat(joystick: *mut SDL_Joystick, hat: ::std::os::raw::c_int) -> Uint8;
}
extern "C" {
    pub fn SDL_GetJoystickButton(
        joystick: *mut SDL_Joystick,
        button: ::std::os::raw::c_int,
    ) -> Uint8;
}
extern "C" {
    pub fn SDL_RumbleJoystick(
        joystick: *mut SDL_Joystick,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RumbleJoystickTriggers(
        joystick: *mut SDL_Joystick,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_JoystickHasLED(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickHasRumble(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_JoystickHasRumbleTriggers(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetJoystickLED(
        joystick: *mut SDL_Joystick,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SendJoystickEffect(
        joystick: *mut SDL_Joystick,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CloseJoystick(joystick: *mut SDL_Joystick);
}
extern "C" {
    pub fn SDL_GetJoystickPowerLevel(joystick: *mut SDL_Joystick) -> SDL_JoystickPowerLevel;
}
extern "C" {
    pub fn SDL_AddGamepadMapping(mapping: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_AddGamepadMappingsFromRW(
        src: *mut SDL_RWops,
        freesrc: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_AddGamepadMappingsFromFile(
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ReloadGamepadMappings() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetNumGamepadMappings() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetGamepadMappingForIndex(
        mapping_index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadMappingForGUID(guid: SDL_JoystickGUID) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadMapping(gamepad: *mut SDL_Gamepad) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_SetGamepadMapping(
        instance_id: SDL_JoystickID,
        mapping: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetGamepads(count: *mut ::std::os::raw::c_int) -> *mut SDL_JoystickID;
}
extern "C" {
    pub fn SDL_IsGamepad(instance_id: SDL_JoystickID) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceName(instance_id: SDL_JoystickID)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadInstancePath(instance_id: SDL_JoystickID)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadInstancePlayerIndex(instance_id: SDL_JoystickID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceGUID(instance_id: SDL_JoystickID) -> SDL_JoystickGUID;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceVendor(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceProduct(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceProductVersion(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceType(instance_id: SDL_JoystickID) -> SDL_GamepadType;
}
extern "C" {
    pub fn SDL_GetRealGamepadInstanceType(instance_id: SDL_JoystickID) -> SDL_GamepadType;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceMapping(
        instance_id: SDL_JoystickID,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_OpenGamepad(instance_id: SDL_JoystickID) -> *mut SDL_Gamepad;
}
extern "C" {
    pub fn SDL_GetGamepadFromInstanceID(instance_id: SDL_JoystickID) -> *mut SDL_Gamepad;
}
extern "C" {
    pub fn SDL_GetGamepadFromPlayerIndex(player_index: ::std::os::raw::c_int) -> *mut SDL_Gamepad;
}
extern "C" {
    pub fn SDL_GetGamepadInstanceID(gamepad: *mut SDL_Gamepad) -> SDL_JoystickID;
}
extern "C" {
    pub fn SDL_GetGamepadName(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadPath(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadType(gamepad: *mut SDL_Gamepad) -> SDL_GamepadType;
}
extern "C" {
    pub fn SDL_GetRealGamepadType(gamepad: *mut SDL_Gamepad) -> SDL_GamepadType;
}
extern "C" {
    pub fn SDL_GetGamepadPlayerIndex(gamepad: *mut SDL_Gamepad) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetGamepadPlayerIndex(
        gamepad: *mut SDL_Gamepad,
        player_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetGamepadVendor(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadProduct(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadProductVersion(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadFirmwareVersion(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    pub fn SDL_GetGamepadSerial(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadPowerLevel(gamepad: *mut SDL_Gamepad) -> SDL_JoystickPowerLevel;
}
extern "C" {
    pub fn SDL_GamepadConnected(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGamepadJoystick(gamepad: *mut SDL_Gamepad) -> *mut SDL_Joystick;
}
extern "C" {
    pub fn SDL_SetGamepadEventsEnabled(enabled: SDL_bool);
}
extern "C" {
    pub fn SDL_GamepadEventsEnabled() -> SDL_bool;
}
extern "C" {
    pub fn SDL_UpdateGamepads();
}
extern "C" {
    pub fn SDL_GetGamepadTypeFromString(str_: *const ::std::os::raw::c_char) -> SDL_GamepadType;
}
extern "C" {
    pub fn SDL_GetGamepadStringForType(type_: SDL_GamepadType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadAxisFromString(str_: *const ::std::os::raw::c_char) -> SDL_GamepadAxis;
}
extern "C" {
    pub fn SDL_GetGamepadStringForAxis(axis: SDL_GamepadAxis) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GamepadHasAxis(gamepad: *mut SDL_Gamepad, axis: SDL_GamepadAxis) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGamepadAxis(gamepad: *mut SDL_Gamepad, axis: SDL_GamepadAxis) -> Sint16;
}
extern "C" {
    pub fn SDL_GetGamepadButtonFromString(str_: *const ::std::os::raw::c_char)
        -> SDL_GamepadButton;
}
extern "C" {
    pub fn SDL_GetGamepadStringForButton(
        button: SDL_GamepadButton,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GamepadHasButton(gamepad: *mut SDL_Gamepad, button: SDL_GamepadButton) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGamepadButton(gamepad: *mut SDL_Gamepad, button: SDL_GamepadButton) -> Uint8;
}
extern "C" {
    pub fn SDL_GetNumGamepadTouchpads(gamepad: *mut SDL_Gamepad) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetNumGamepadTouchpadFingers(
        gamepad: *mut SDL_Gamepad,
        touchpad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetGamepadTouchpadFinger(
        gamepad: *mut SDL_Gamepad,
        touchpad: ::std::os::raw::c_int,
        finger: ::std::os::raw::c_int,
        state: *mut Uint8,
        x: *mut f32,
        y: *mut f32,
        pressure: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GamepadHasSensor(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetGamepadSensorEnabled(
        gamepad: *mut SDL_Gamepad,
        type_: SDL_SensorType,
        enabled: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GamepadSensorEnabled(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGamepadSensorDataRate(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> f32;
}
extern "C" {
    pub fn SDL_GetGamepadSensorData(
        gamepad: *mut SDL_Gamepad,
        type_: SDL_SensorType,
        data: *mut f32,
        num_values: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RumbleGamepad(
        gamepad: *mut SDL_Gamepad,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RumbleGamepadTriggers(
        gamepad: *mut SDL_Gamepad,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GamepadHasLED(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GamepadHasRumble(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GamepadHasRumbleTriggers(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetGamepadLED(
        gamepad: *mut SDL_Gamepad,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SendGamepadEffect(
        gamepad: *mut SDL_Gamepad,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CloseGamepad(gamepad: *mut SDL_Gamepad);
}
extern "C" {
    pub fn SDL_GetGamepadAppleSFSymbolsNameForButton(
        gamepad: *mut SDL_Gamepad,
        button: SDL_GamepadButton,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetGamepadAppleSFSymbolsNameForAxis(
        gamepad: *mut SDL_Gamepad,
        axis: SDL_GamepadAxis,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetPixelFormatName(format: Uint32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetMasksForPixelFormatEnum(
        format: Uint32,
        bpp: *mut ::std::os::raw::c_int,
        Rmask: *mut Uint32,
        Gmask: *mut Uint32,
        Bmask: *mut Uint32,
        Amask: *mut Uint32,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetPixelFormatEnumForMasks(
        bpp: ::std::os::raw::c_int,
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
    ) -> Uint32;
}
extern "C" {
    pub fn SDL_CreatePixelFormat(pixel_format: Uint32) -> *mut SDL_PixelFormat;
}
extern "C" {
    pub fn SDL_DestroyPixelFormat(format: *mut SDL_PixelFormat);
}
extern "C" {
    pub fn SDL_CreatePalette(ncolors: ::std::os::raw::c_int) -> *mut SDL_Palette;
}
extern "C" {
    pub fn SDL_SetPixelFormatPalette(
        format: *mut SDL_PixelFormat,
        palette: *mut SDL_Palette,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetPaletteColors(
        palette: *mut SDL_Palette,
        colors: *const SDL_Color,
        firstcolor: ::std::os::raw::c_int,
        ncolors: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyPalette(palette: *mut SDL_Palette);
}
extern "C" {
    pub fn SDL_MapRGB(format: *const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) -> Uint32;
}
extern "C" {
    pub fn SDL_MapRGBA(
        format: *const SDL_PixelFormat,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> Uint32;
}
extern "C" {
    pub fn SDL_GetRGB(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    );
}
extern "C" {
    pub fn SDL_GetRGBA(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    );
}
extern "C" {
    pub fn SDL_HasRectIntersection(A: *const SDL_Rect, B: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectIntersection(
        A: *const SDL_Rect,
        B: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectUnion(
        A: *const SDL_Rect,
        B: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRectEnclosingPoints(
        points: *const SDL_Point,
        count: ::std::os::raw::c_int,
        clip: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectAndLineIntersection(
        rect: *const SDL_Rect,
        X1: *mut ::std::os::raw::c_int,
        Y1: *mut ::std::os::raw::c_int,
        X2: *mut ::std::os::raw::c_int,
        Y2: *mut ::std::os::raw::c_int,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasRectIntersectionFloat(A: *const SDL_FRect, B: *const SDL_FRect) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectIntersectionFloat(
        A: *const SDL_FRect,
        B: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectUnionFloat(
        A: *const SDL_FRect,
        B: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRectEnclosingPointsFloat(
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
        clip: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetRectAndLineIntersectionFloat(
        rect: *const SDL_FRect,
        X1: *mut f32,
        Y1: *mut f32,
        X2: *mut f32,
        Y2: *mut f32,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_CreateSurface(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_CreateSurfaceFrom(
        pixels: *mut ::std::os::raw::c_void,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pitch: ::std::os::raw::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_DestroySurface(surface: *mut SDL_Surface);
}
extern "C" {
    pub fn SDL_SetSurfacePalette(
        surface: *mut SDL_Surface,
        palette: *mut SDL_Palette,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LockSurface(surface: *mut SDL_Surface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnlockSurface(surface: *mut SDL_Surface);
}
extern "C" {
    pub fn SDL_LoadBMP_RW(src: *mut SDL_RWops, freesrc: SDL_bool) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_LoadBMP(file: *const ::std::os::raw::c_char) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_SaveBMP_RW(
        surface: *mut SDL_Surface,
        dst: *mut SDL_RWops,
        freedst: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SaveBMP(
        surface: *mut SDL_Surface,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceRLE(
        surface: *mut SDL_Surface,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SurfaceHasRLE(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetSurfaceColorKey(
        surface: *mut SDL_Surface,
        flag: ::std::os::raw::c_int,
        key: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SurfaceHasColorKey(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetSurfaceColorKey(
        surface: *mut SDL_Surface,
        key: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceAlphaMod(surface: *mut SDL_Surface, alpha: Uint8)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceAlphaMod(
        surface: *mut SDL_Surface,
        alpha: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetSurfaceClipRect(surface: *mut SDL_Surface, rect: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetSurfaceClipRect(
        surface: *mut SDL_Surface,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DuplicateSurface(surface: *mut SDL_Surface) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertSurface(
        surface: *mut SDL_Surface,
        format: *const SDL_PixelFormat,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertSurfaceFormat(
        surface: *mut SDL_Surface,
        pixel_format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_ConvertPixels(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        src_format: Uint32,
        src: *const ::std::os::raw::c_void,
        src_pitch: ::std::os::raw::c_int,
        dst_format: Uint32,
        dst: *mut ::std::os::raw::c_void,
        dst_pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_PremultiplyAlpha(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        src_format: Uint32,
        src: *const ::std::os::raw::c_void,
        src_pitch: ::std::os::raw::c_int,
        dst_format: Uint32,
        dst: *mut ::std::os::raw::c_void,
        dst_pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_FillSurfaceRect(
        dst: *mut SDL_Surface,
        rect: *const SDL_Rect,
        color: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_FillSurfaceRects(
        dst: *mut SDL_Surface,
        rects: *const SDL_Rect,
        count: ::std::os::raw::c_int,
        color: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BlitSurface(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BlitSurfaceUnchecked(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SoftStretch(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SoftStretchLinear(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BlitSurfaceScaled(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_BlitSurfaceUncheckedScaled(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetYUVConversionMode(mode: SDL_YUV_CONVERSION_MODE);
}
extern "C" {
    pub fn SDL_GetYUVConversionMode() -> SDL_YUV_CONVERSION_MODE;
}
extern "C" {
    pub fn SDL_GetYUVConversionModeForResolution(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> SDL_YUV_CONVERSION_MODE;
}
extern "C" {
    pub fn SDL_GetNumVideoDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetVideoDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetCurrentVideoDriver() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetSystemTheme() -> SDL_SystemTheme;
}
extern "C" {
    pub fn SDL_GetDisplays(count: *mut ::std::os::raw::c_int) -> *mut SDL_DisplayID;
}
extern "C" {
    pub fn SDL_GetPrimaryDisplay() -> SDL_DisplayID;
}
extern "C" {
    pub fn SDL_GetDisplayName(displayID: SDL_DisplayID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetDisplayBounds(
        displayID: SDL_DisplayID,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetDisplayUsableBounds(
        displayID: SDL_DisplayID,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetNaturalDisplayOrientation(displayID: SDL_DisplayID) -> SDL_DisplayOrientation;
}
extern "C" {
    pub fn SDL_GetCurrentDisplayOrientation(displayID: SDL_DisplayID) -> SDL_DisplayOrientation;
}
extern "C" {
    pub fn SDL_GetDisplayContentScale(displayID: SDL_DisplayID) -> f32;
}
extern "C" {
    pub fn SDL_GetFullscreenDisplayModes(
        displayID: SDL_DisplayID,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *const SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetClosestFullscreenDisplayMode(
        displayID: SDL_DisplayID,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        refresh_rate: f32,
        include_high_density_modes: SDL_bool,
    ) -> *const SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetDesktopDisplayMode(displayID: SDL_DisplayID) -> *const SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetCurrentDisplayMode(displayID: SDL_DisplayID) -> *const SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetDisplayForPoint(point: *const SDL_Point) -> SDL_DisplayID;
}
extern "C" {
    pub fn SDL_GetDisplayForRect(rect: *const SDL_Rect) -> SDL_DisplayID;
}
extern "C" {
    pub fn SDL_GetDisplayForWindow(window: *mut SDL_Window) -> SDL_DisplayID;
}
extern "C" {
    pub fn SDL_GetWindowPixelDensity(window: *mut SDL_Window) -> f32;
}
extern "C" {
    pub fn SDL_GetWindowDisplayScale(window: *mut SDL_Window) -> f32;
}
extern "C" {
    pub fn SDL_SetWindowFullscreenMode(
        window: *mut SDL_Window,
        mode: *const SDL_DisplayMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowFullscreenMode(window: *mut SDL_Window) -> *const SDL_DisplayMode;
}
extern "C" {
    pub fn SDL_GetWindowICCProfile(
        window: *mut SDL_Window,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_GetWindowPixelFormat(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    pub fn SDL_CreateWindow(
        title: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_CreateWindowWithPosition(
        title: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_CreatePopupWindow(
        parent: *mut SDL_Window,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_CreateWindowFrom(data: *const ::std::os::raw::c_void) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetWindowID(window: *mut SDL_Window) -> SDL_WindowID;
}
extern "C" {
    pub fn SDL_GetWindowFromID(id: SDL_WindowID) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetWindowParent(window: *mut SDL_Window) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetWindowFlags(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    pub fn SDL_SetWindowTitle(
        window: *mut SDL_Window,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowTitle(window: *mut SDL_Window) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_SetWindowIcon(
        window: *mut SDL_Window,
        icon: *mut SDL_Surface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowData(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_GetWindowData(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_SetWindowPosition(
        window: *mut SDL_Window,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowPosition(
        window: *mut SDL_Window,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowSize(
        window: *mut SDL_Window,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowBordersSize(
        window: *mut SDL_Window,
        top: *mut ::std::os::raw::c_int,
        left: *mut ::std::os::raw::c_int,
        bottom: *mut ::std::os::raw::c_int,
        right: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowSizeInPixels(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowMinimumSize(
        window: *mut SDL_Window,
        min_w: ::std::os::raw::c_int,
        min_h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowMinimumSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowMaximumSize(
        window: *mut SDL_Window,
        max_w: ::std::os::raw::c_int,
        max_h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowMaximumSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowBordered(
        window: *mut SDL_Window,
        bordered: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowResizable(
        window: *mut SDL_Window,
        resizable: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowAlwaysOnTop(
        window: *mut SDL_Window,
        on_top: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ShowWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HideWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RaiseWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_MaximizeWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_MinimizeWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RestoreWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowFullscreen(
        window: *mut SDL_Window,
        fullscreen: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HasWindowSurface(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetWindowSurface(window: *mut SDL_Window) -> *mut SDL_Surface;
}
extern "C" {
    pub fn SDL_UpdateWindowSurface(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UpdateWindowSurfaceRects(
        window: *mut SDL_Window,
        rects: *const SDL_Rect,
        numrects: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyWindowSurface(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowGrab(window: *mut SDL_Window, grabbed: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowKeyboardGrab(
        window: *mut SDL_Window,
        grabbed: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowMouseGrab(
        window: *mut SDL_Window,
        grabbed: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetWindowKeyboardGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetWindowMouseGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetGrabbedWindow() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_SetWindowMouseRect(
        window: *mut SDL_Window,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowMouseRect(window: *mut SDL_Window) -> *const SDL_Rect;
}
extern "C" {
    pub fn SDL_SetWindowOpacity(window: *mut SDL_Window, opacity: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetWindowOpacity(
        window: *mut SDL_Window,
        out_opacity: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowModalFor(
        modal_window: *mut SDL_Window,
        parent_window: *mut SDL_Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowInputFocus(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ShowWindowSystemMenu(
        window: *mut SDL_Window,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowHitTest(
        window: *mut SDL_Window,
        callback: SDL_HitTest,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_FlashWindow(
        window: *mut SDL_Window,
        operation: SDL_FlashOperation,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyWindow(window: *mut SDL_Window);
}
extern "C" {
    pub fn SDL_ScreenSaverEnabled() -> SDL_bool;
}
extern "C" {
    pub fn SDL_EnableScreenSaver() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DisableScreenSaver() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_LoadLibrary(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_GetProcAddress(proc_: *const ::std::os::raw::c_char) -> SDL_FunctionPointer;
}
extern "C" {
    pub fn SDL_EGL_GetProcAddress(proc_: *const ::std::os::raw::c_char) -> SDL_FunctionPointer;
}
extern "C" {
    pub fn SDL_GL_UnloadLibrary();
}
extern "C" {
    pub fn SDL_GL_ExtensionSupported(extension: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GL_ResetAttributes();
}
extern "C" {
    pub fn SDL_GL_SetAttribute(
        attr: SDL_GLattr,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_GetAttribute(
        attr: SDL_GLattr,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_CreateContext(window: *mut SDL_Window) -> SDL_GLContext;
}
extern "C" {
    pub fn SDL_GL_MakeCurrent(
        window: *mut SDL_Window,
        context: SDL_GLContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_GetCurrentWindow() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GL_GetCurrentContext() -> SDL_GLContext;
}
extern "C" {
    pub fn SDL_EGL_GetCurrentEGLDisplay() -> SDL_EGLDisplay;
}
extern "C" {
    pub fn SDL_EGL_GetCurrentEGLConfig() -> SDL_EGLConfig;
}
extern "C" {
    pub fn SDL_EGL_GetWindowEGLSurface(window: *mut SDL_Window) -> SDL_EGLSurface;
}
extern "C" {
    pub fn SDL_EGL_SetEGLAttributeCallbacks(
        platformAttribCallback: SDL_EGLAttribArrayCallback,
        surfaceAttribCallback: SDL_EGLIntArrayCallback,
        contextAttribCallback: SDL_EGLIntArrayCallback,
    );
}
extern "C" {
    pub fn SDL_GL_SetSwapInterval(interval: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_GetSwapInterval(interval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_SwapWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_DeleteContext(context: SDL_GLContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetKeyboardFocus() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetKeyboardState(numkeys: *mut ::std::os::raw::c_int) -> *const Uint8;
}
extern "C" {
    pub fn SDL_ResetKeyboard();
}
extern "C" {
    pub fn SDL_GetModState() -> SDL_Keymod;
}
extern "C" {
    pub fn SDL_SetModState(modstate: SDL_Keymod);
}
extern "C" {
    pub fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) -> SDL_Keycode;
}
extern "C" {
    pub fn SDL_GetScancodeFromKey(key: SDL_Keycode) -> SDL_Scancode;
}
extern "C" {
    pub fn SDL_GetScancodeName(scancode: SDL_Scancode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetScancodeFromName(name: *const ::std::os::raw::c_char) -> SDL_Scancode;
}
extern "C" {
    pub fn SDL_GetKeyName(key: SDL_Keycode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetKeyFromName(name: *const ::std::os::raw::c_char) -> SDL_Keycode;
}
extern "C" {
    pub fn SDL_StartTextInput();
}
extern "C" {
    pub fn SDL_TextInputActive() -> SDL_bool;
}
extern "C" {
    pub fn SDL_StopTextInput();
}
extern "C" {
    pub fn SDL_ClearComposition();
}
extern "C" {
    pub fn SDL_TextInputShown() -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetTextInputRect(rect: *const SDL_Rect) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HasScreenKeyboardSupport() -> SDL_bool;
}
extern "C" {
    pub fn SDL_ScreenKeyboardShown(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetMouseFocus() -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    pub fn SDL_GetGlobalMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    pub fn SDL_GetRelativeMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    pub fn SDL_WarpMouseInWindow(window: *mut SDL_Window, x: f32, y: f32);
}
extern "C" {
    pub fn SDL_WarpMouseGlobal(x: f32, y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetRelativeMouseMode(enabled: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CaptureMouse(enabled: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRelativeMouseMode() -> SDL_bool;
}
extern "C" {
    pub fn SDL_CreateCursor(
        data: *const Uint8,
        mask: *const Uint8,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        hot_x: ::std::os::raw::c_int,
        hot_y: ::std::os::raw::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_CreateColorCursor(
        surface: *mut SDL_Surface,
        hot_x: ::std::os::raw::c_int,
        hot_y: ::std::os::raw::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_CreateSystemCursor(id: SDL_SystemCursor) -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_SetCursor(cursor: *mut SDL_Cursor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetCursor() -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_GetDefaultCursor() -> *mut SDL_Cursor;
}
extern "C" {
    pub fn SDL_DestroyCursor(cursor: *mut SDL_Cursor);
}
extern "C" {
    pub fn SDL_ShowCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HideCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CursorVisible() -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetNumTouchDevices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTouchDevice(index: ::std::os::raw::c_int) -> SDL_TouchID;
}
extern "C" {
    pub fn SDL_GetTouchName(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) -> SDL_TouchDeviceType;
}
extern "C" {
    pub fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTouchFinger(
        touchID: SDL_TouchID,
        index: ::std::os::raw::c_int,
    ) -> *mut SDL_Finger;
}
extern "C" {
    pub fn SDL_PumpEvents();
}
extern "C" {
    pub fn SDL_PeepEvents(
        events: *mut SDL_Event,
        numevents: ::std::os::raw::c_int,
        action: SDL_eventaction,
        minType: Uint32,
        maxType: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HasEvent(type_: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_HasEvents(minType: Uint32, maxType: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_FlushEvent(type_: Uint32);
}
extern "C" {
    pub fn SDL_FlushEvents(minType: Uint32, maxType: Uint32);
}
extern "C" {
    pub fn SDL_PollEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_WaitEventTimeout(event: *mut SDL_Event, timeoutMS: Sint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_PushEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_GetEventFilter(
        filter: *mut SDL_EventFilter,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_SetEventEnabled(type_: Uint32, enabled: SDL_bool);
}
extern "C" {
    pub fn SDL_EventEnabled(type_: Uint32) -> SDL_bool;
}
extern "C" {
    pub fn SDL_RegisterEvents(numevents: ::std::os::raw::c_int) -> Uint32;
}
extern "C" {
    pub fn SDL_GetBasePath() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetPrefPath(
        org: *const ::std::os::raw::c_char,
        app: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetUserFolder(folder: SDL_Folder) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_NumHaptics() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticName(device_index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_HapticOpen(device_index: ::std::os::raw::c_int) -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_HapticOpened(device_index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticIndex(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_MouseIsHaptic() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticOpenFromMouse() -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_JoystickIsHaptic(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticOpenFromJoystick(joystick: *mut SDL_Joystick) -> *mut SDL_Haptic;
}
extern "C" {
    pub fn SDL_HapticClose(haptic: *mut SDL_Haptic);
}
extern "C" {
    pub fn SDL_HapticNumEffects(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticNumEffectsPlaying(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticQuery(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn SDL_HapticNumAxes(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticEffectSupported(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticNewEffect(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticUpdateEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
        data: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticRunEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
        iterations: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticStopEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticDestroyEffect(haptic: *mut SDL_Haptic, effect: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SDL_HapticGetEffectStatus(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticSetGain(
        haptic: *mut SDL_Haptic,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticSetAutocenter(
        haptic: *mut SDL_Haptic,
        autocenter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticPause(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticUnpause(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticStopAll(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleSupported(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleInit(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticRumblePlay(
        haptic: *mut SDL_Haptic,
        strength: f32,
        length: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_HapticRumbleStop(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_device_change_count() -> Uint32;
}
extern "C" {
    pub fn SDL_hid_enumerate(
        vendor_id: ::std::os::raw::c_ushort,
        product_id: ::std::os::raw::c_ushort,
    ) -> *mut SDL_hid_device_info;
}
extern "C" {
    pub fn SDL_hid_free_enumeration(devs: *mut SDL_hid_device_info);
}
extern "C" {
    pub fn SDL_hid_open(
        vendor_id: ::std::os::raw::c_ushort,
        product_id: ::std::os::raw::c_ushort,
        serial_number: *const wchar_t,
    ) -> *mut SDL_hid_device;
}
extern "C" {
    pub fn SDL_hid_open_path(path: *const ::std::os::raw::c_char) -> *mut SDL_hid_device;
}
extern "C" {
    pub fn SDL_hid_write(
        dev: *mut SDL_hid_device,
        data: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_read_timeout(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
        milliseconds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_read(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_set_nonblocking(
        dev: *mut SDL_hid_device,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_send_feature_report(
        dev: *mut SDL_hid_device,
        data: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_feature_report(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_input_report(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_close(dev: *mut SDL_hid_device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_manufacturer_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_product_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_serial_number_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_indexed_string(
        dev: *mut SDL_hid_device,
        string_index: ::std::os::raw::c_int,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_get_device_info(dev: *mut SDL_hid_device) -> *mut SDL_hid_device_info;
}
extern "C" {
    pub fn SDL_hid_get_report_descriptor(
        dev: *mut SDL_hid_device,
        buf: *mut ::std::os::raw::c_uchar,
        buf_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_hid_ble_scan(active: SDL_bool);
}
extern "C" {
    pub fn SDL_SetHintWithPriority(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        priority: SDL_HintPriority,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetHint(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ResetHint(name: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    pub fn SDL_ResetHints();
}
extern "C" {
    pub fn SDL_GetHint(name: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetHintBoolean(
        name: *const ::std::os::raw::c_char,
        default_value: SDL_bool,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_AddHintCallback(
        name: *const ::std::os::raw::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DelHintCallback(
        name: *const ::std::os::raw::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SDL_ClearHints();
}
extern "C" {
    pub fn SDL_Init(flags: Uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_InitSubSystem(flags: Uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_QuitSubSystem(flags: Uint32);
}
extern "C" {
    pub fn SDL_WasInit(flags: Uint32) -> Uint32;
}
extern "C" {
    pub fn SDL_Quit();
}
extern "C" {
    pub fn SDL_LoadObject(sofile: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_LoadFunction(
        handle: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> SDL_FunctionPointer;
}
extern "C" {
    pub fn SDL_UnloadObject(handle: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn SDL_GetPreferredLocales() -> *mut SDL_Locale;
}
extern "C" {
    pub fn SDL_LogSetAllPriority(priority: SDL_LogPriority);
}
extern "C" {
    pub fn SDL_LogSetPriority(category: ::std::os::raw::c_int, priority: SDL_LogPriority);
}
extern "C" {
    pub fn SDL_LogGetPriority(category: ::std::os::raw::c_int) -> SDL_LogPriority;
}
extern "C" {
    pub fn SDL_LogResetPriorities();
}
extern "C" {
    pub fn SDL_Log(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogVerbose(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogDebug(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogInfo(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogWarn(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogError(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDL_LogCritical(
        category: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn SDL_LogMessage(
        category: ::std::os::raw::c_int,
        priority: SDL_LogPriority,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn SDL_LogGetOutputFunction(
        callback: *mut SDL_LogOutputFunction,
        userdata: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SDL_LogSetOutputFunction(
        callback: SDL_LogOutputFunction,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SDL_ShowMessageBox(
        messageboxdata: *const SDL_MessageBoxData,
        buttonid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ShowSimpleMessageBox(
        flags: Uint32,
        title: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        window: *mut SDL_Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_Metal_CreateView(window: *mut SDL_Window) -> SDL_MetalView;
}
extern "C" {
    pub fn SDL_Metal_DestroyView(view: SDL_MetalView);
}
extern "C" {
    pub fn SDL_Metal_GetLayer(view: SDL_MetalView) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_OpenURL(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetPlatform() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetPowerInfo(
        seconds: *mut ::std::os::raw::c_int,
        percent: *mut ::std::os::raw::c_int,
    ) -> SDL_PowerState;
}
extern "C" {
    pub fn SDL_GetNumRenderDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_CreateWindowAndRenderer(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        window_flags: Uint32,
        window: *mut *mut SDL_Window,
        renderer: *mut *mut SDL_Renderer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CreateRenderer(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
        flags: Uint32,
    ) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_CreateSoftwareRenderer(surface: *mut SDL_Surface) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_GetRenderer(window: *mut SDL_Window) -> *mut SDL_Renderer;
}
extern "C" {
    pub fn SDL_GetRenderWindow(renderer: *mut SDL_Renderer) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_GetRendererInfo(
        renderer: *mut SDL_Renderer,
        info: *mut SDL_RendererInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderOutputSize(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetCurrentRenderOutputSize(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CreateTexture(
        renderer: *mut SDL_Renderer,
        format: Uint32,
        access: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_CreateTextureFromSurface(
        renderer: *mut SDL_Renderer,
        surface: *mut SDL_Surface,
    ) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_QueryTexture(
        texture: *mut SDL_Texture,
        format: *mut Uint32,
        access: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetTextureColorMod(
        texture: *mut SDL_Texture,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTextureColorMod(
        texture: *mut SDL_Texture,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetTextureAlphaMod(texture: *mut SDL_Texture, alpha: Uint8)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTextureAlphaMod(
        texture: *mut SDL_Texture,
        alpha: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: *mut SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetTextureUserData(
        texture: *mut SDL_Texture,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetTextureUserData(texture: *mut SDL_Texture) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_UpdateTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *const ::std::os::raw::c_void,
        pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UpdateYUVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ::std::os::raw::c_int,
        Uplane: *const Uint8,
        Upitch: ::std::os::raw::c_int,
        Vplane: *const Uint8,
        Vpitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UpdateNVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ::std::os::raw::c_int,
        UVplane: *const Uint8,
        UVpitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LockTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *mut *mut ::std::os::raw::c_void,
        pitch: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_LockTextureToSurface(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        surface: *mut *mut SDL_Surface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnlockTexture(texture: *mut SDL_Texture);
}
extern "C" {
    pub fn SDL_SetRenderTarget(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderTarget(renderer: *mut SDL_Renderer) -> *mut SDL_Texture;
}
extern "C" {
    pub fn SDL_SetRenderLogicalPresentation(
        renderer: *mut SDL_Renderer,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        mode: SDL_RendererLogicalPresentation,
        scale_mode: SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderLogicalPresentation(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        mode: *mut SDL_RendererLogicalPresentation,
        scale_mode: *mut SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderCoordinatesFromWindow(
        renderer: *mut SDL_Renderer,
        window_x: f32,
        window_y: f32,
        x: *mut f32,
        y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderCoordinatesToWindow(
        renderer: *mut SDL_Renderer,
        x: f32,
        y: f32,
        window_x: *mut f32,
        window_y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ConvertEventToRenderCoordinates(
        renderer: *mut SDL_Renderer,
        event: *mut SDL_Event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetRenderViewport(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderViewport(
        renderer: *mut SDL_Renderer,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetRenderClipRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderClipRect(
        renderer: *mut SDL_Renderer,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderClipEnabled(renderer: *mut SDL_Renderer) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetRenderScale(
        renderer: *mut SDL_Renderer,
        scaleX: f32,
        scaleY: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderScale(
        renderer: *mut SDL_Renderer,
        scaleX: *mut f32,
        scaleY: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderClear(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderPoint(renderer: *mut SDL_Renderer, x: f32, y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderPoints(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderLine(
        renderer: *mut SDL_Renderer,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderLines(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderFillRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderTexture(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_FRect,
        dstrect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderTextureRotated(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_FRect,
        dstrect: *const SDL_FRect,
        angle: f64,
        center: *const SDL_FPoint,
        flip: SDL_RendererFlip,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderGeometry(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        vertices: *const SDL_Vertex,
        num_vertices: ::std::os::raw::c_int,
        indices: *const ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderGeometryRaw(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        xy: *const f32,
        xy_stride: ::std::os::raw::c_int,
        color: *const SDL_Color,
        color_stride: ::std::os::raw::c_int,
        uv: *const f32,
        uv_stride: ::std::os::raw::c_int,
        num_vertices: ::std::os::raw::c_int,
        indices: *const ::std::os::raw::c_void,
        num_indices: ::std::os::raw::c_int,
        size_indices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderReadPixels(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
        format: Uint32,
        pixels: *mut ::std::os::raw::c_void,
        pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RenderPresent(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DestroyTexture(texture: *mut SDL_Texture);
}
extern "C" {
    pub fn SDL_DestroyRenderer(renderer: *mut SDL_Renderer);
}
extern "C" {
    pub fn SDL_RenderFlush(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_BindTexture(
        texture: *mut SDL_Texture,
        texw: *mut f32,
        texh: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GL_UnbindTexture(texture: *mut SDL_Texture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderMetalLayer(renderer: *mut SDL_Renderer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_GetRenderMetalCommandEncoder(
        renderer: *mut SDL_Renderer,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_SetRenderVSync(
        renderer: *mut SDL_Renderer,
        vsync: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderVSync(
        renderer: *mut SDL_Renderer,
        vsync: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_CreateShapedWindow(
        title: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    pub fn SDL_IsShapedWindow(window: *const SDL_Window) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetWindowShape(
        window: *mut SDL_Window,
        shape: *mut SDL_Surface,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetShapedWindowMode(
        window: *mut SDL_Window,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_SetWindowsMessageHook(
        callback: SDL_WindowsMessageHook,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn SDL_Direct3D9GetAdapterIndex(displayID: SDL_DisplayID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRenderD3D9Device(renderer: *mut SDL_Renderer) -> *mut IDirect3DDevice9;
}
extern "C" {
    pub fn SDL_GetRenderD3D11Device(renderer: *mut SDL_Renderer) -> *mut ID3D11Device;
}
extern "C" {
    pub fn SDL_RenderGetD3D12Device(renderer: *mut SDL_Renderer) -> *mut ID3D12Device;
}
extern "C" {
    pub fn SDL_DXGIGetOutputInfo(
        displayID: SDL_DisplayID,
        adapterIndex: *mut ::std::os::raw::c_int,
        outputIndex: *mut ::std::os::raw::c_int,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_IsTablet() -> SDL_bool;
}
extern "C" {
    pub fn SDL_OnApplicationWillTerminate();
}
extern "C" {
    pub fn SDL_OnApplicationDidReceiveMemoryWarning();
}
extern "C" {
    pub fn SDL_OnApplicationWillResignActive();
}
extern "C" {
    pub fn SDL_OnApplicationDidEnterBackground();
}
extern "C" {
    pub fn SDL_OnApplicationWillEnterForeground();
}
extern "C" {
    pub fn SDL_OnApplicationDidBecomeActive();
}
extern "C" {
    pub fn SDL_GetTicks() -> Uint64;
}
extern "C" {
    pub fn SDL_GetTicksNS() -> Uint64;
}
extern "C" {
    pub fn SDL_GetPerformanceCounter() -> Uint64;
}
extern "C" {
    pub fn SDL_GetPerformanceFrequency() -> Uint64;
}
extern "C" {
    pub fn SDL_Delay(ms: Uint32);
}
extern "C" {
    pub fn SDL_DelayNS(ns: Uint64);
}
extern "C" {
    pub fn SDL_AddTimer(
        interval: Uint32,
        callback: SDL_TimerCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> SDL_TimerID;
}
extern "C" {
    pub fn SDL_RemoveTimer(id: SDL_TimerID) -> SDL_bool;
}
extern "C" {
    pub fn SDL_GetVersion(ver: *mut SDL_version) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_GetRevision() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_GetWindowWMInfo(
        window: *mut SDL_Window,
        info: *mut SDL_SysWMinfo,
        version: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_Vulkan_LoadLibrary(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_Vulkan_GetVkGetInstanceProcAddr() -> SDL_FunctionPointer;
}
extern "C" {
    pub fn SDL_Vulkan_UnloadLibrary();
}
extern "C" {
    pub fn SDL_Vulkan_GetInstanceExtensions(
        pCount: *mut ::std::os::raw::c_uint,
        pNames: *mut *const ::std::os::raw::c_char,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_Vulkan_CreateSurface(
        window: *mut SDL_Window,
        instance: VkInstance,
        surface: *mut VkSurfaceKHR,
    ) -> SDL_bool;
}
extern "C" {
    pub fn SDL_SetMainReady();
}
extern "C" {
    pub fn SDL_RunApp(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        mainFunction: SDL_main_func,
        reserved: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_RegisterApp(
        name: *const ::std::os::raw::c_char,
        style: Uint32,
        hInst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_UnregisterApp();
}
