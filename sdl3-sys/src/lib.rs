/* automatically generated by rust-bindgen 0.66.1 */

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]

pub const __LINUX__: u32 = 1;
pub const SDL_SIZE_MAX: i32 = -1;
pub const SDL_PRIs64: &[u8; 3] = b"ld\0";
pub const SDL_PRIu64: &[u8; 3] = b"lu\0";
pub const SDL_PRIx64: &[u8; 3] = b"lx\0";
pub const SDL_PRIX64: &[u8; 3] = b"lX\0";
pub const SDL_PRIs32: &[u8; 2] = b"d\0";
pub const SDL_PRIu32: &[u8; 2] = b"u\0";
pub const SDL_PRIx32: &[u8; 2] = b"x\0";
pub const SDL_PRIX32: &[u8; 2] = b"X\0";
pub const SDL_PI_D: f64 = 3.141592653589793;
pub const SDL_PI_F: f64 = 3.141592653589793;
pub const SDL_ASSERT_LEVEL: u32 = 2;
pub const SDL_NULL_WHILE_LOOP_CONDITION: u32 = 0;
pub const SDL_LIL_ENDIAN: u32 = 1234;
pub const SDL_BIG_ENDIAN: u32 = 4321;
pub const SDL_BYTEORDER: u32 = 1234;
pub const SDL_FLOATWORDORDER: u32 = 1234;
pub const SDL_MUTEX_TIMEDOUT: u32 = 1;
pub const SDL_MUTEX_MAXWAIT: i32 = -1;
pub const SDL_RWLOCK_TIMEDOUT: u32 = 1;
pub const SDL_RWOPS_UNKNOWN: u32 = 0;
pub const SDL_RWOPS_WINFILE: u32 = 1;
pub const SDL_RWOPS_STDFILE: u32 = 2;
pub const SDL_RWOPS_JNIFILE: u32 = 3;
pub const SDL_RWOPS_MEMORY: u32 = 4;
pub const SDL_RWOPS_MEMORY_RO: u32 = 5;
pub const SDL_RWOPS_STATUS_READY: u32 = 0;
pub const SDL_RWOPS_STATUS_ERROR: u32 = 1;
pub const SDL_RWOPS_STATUS_EOF: u32 = 2;
pub const SDL_RWOPS_STATUS_NOT_READY: u32 = 3;
pub const SDL_RWOPS_STATUS_READONLY: u32 = 4;
pub const SDL_RWOPS_STATUS_WRITEONLY: u32 = 5;
pub const SDL_RW_SEEK_SET: u32 = 0;
pub const SDL_RW_SEEK_CUR: u32 = 1;
pub const SDL_RW_SEEK_END: u32 = 2;
pub const SDL_AUDIO_MASK_BITSIZE: u32 = 255;
pub const SDL_AUDIO_MASK_DATATYPE: u32 = 256;
pub const SDL_AUDIO_MASK_ENDIAN: u32 = 4096;
pub const SDL_AUDIO_MASK_SIGNED: u32 = 32768;
pub const SDL_AUDIO_U8: u32 = 8;
pub const SDL_AUDIO_S8: u32 = 32776;
pub const SDL_AUDIO_S16LSB: u32 = 32784;
pub const SDL_AUDIO_S16MSB: u32 = 36880;
pub const SDL_AUDIO_S16: u32 = 32784;
pub const SDL_AUDIO_S32LSB: u32 = 32800;
pub const SDL_AUDIO_S32MSB: u32 = 36896;
pub const SDL_AUDIO_S32: u32 = 32800;
pub const SDL_AUDIO_F32LSB: u32 = 33056;
pub const SDL_AUDIO_F32MSB: u32 = 37152;
pub const SDL_AUDIO_F32: u32 = 33056;
pub const SDL_AUDIO_S16SYS: u32 = 32784;
pub const SDL_AUDIO_S32SYS: u32 = 32800;
pub const SDL_AUDIO_F32SYS: u32 = 33056;
pub const SDL_MIX_MAXVOLUME: u32 = 128;
pub const SDL_CACHELINE_SIZE: u32 = 128;
pub const SDL_STANDARD_GRAVITY: f64 = 9.80665;
pub const SDL_JOYSTICK_AXIS_MAX: u32 = 32767;
pub const SDL_JOYSTICK_AXIS_MIN: i32 = -32768;
pub const SDL_IPHONE_MAX_GFORCE: f64 = 5.0;
pub const SDL_VIRTUAL_JOYSTICK_DESC_VERSION: u32 = 1;
pub const SDL_HAT_CENTERED: u32 = 0;
pub const SDL_HAT_UP: u32 = 1;
pub const SDL_HAT_RIGHT: u32 = 2;
pub const SDL_HAT_DOWN: u32 = 4;
pub const SDL_HAT_LEFT: u32 = 8;
pub const SDL_HAT_RIGHTUP: u32 = 3;
pub const SDL_HAT_RIGHTDOWN: u32 = 6;
pub const SDL_HAT_LEFTUP: u32 = 9;
pub const SDL_HAT_LEFTDOWN: u32 = 12;
pub const SDLK_SCANCODE_MASK: u32 = 1073741824;
pub const SDL_ALPHA_OPAQUE: u32 = 255;
pub const SDL_ALPHA_TRANSPARENT: u32 = 0;
pub const SDL_SWSURFACE: u32 = 0;
pub const SDL_PREALLOC: u32 = 1;
pub const SDL_RLEACCEL: u32 = 2;
pub const SDL_DONTFREE: u32 = 4;
pub const SDL_SIMD_ALIGNED: u32 = 8;
pub const SDL_WINDOWPOS_UNDEFINED_MASK: u32 = 536805376;
pub const SDL_WINDOWPOS_CENTERED_MASK: u32 = 805240832;
pub const SDL_BUTTON_LEFT: u32 = 1;
pub const SDL_BUTTON_MIDDLE: u32 = 2;
pub const SDL_BUTTON_RIGHT: u32 = 3;
pub const SDL_BUTTON_X1: u32 = 4;
pub const SDL_BUTTON_X2: u32 = 5;
pub const SDL_RELEASED: u32 = 0;
pub const SDL_PRESSED: u32 = 1;
pub const SDL_TEXTEDITINGEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_TEXTINPUTEVENT_TEXT_SIZE: u32 = 32;
pub const SDL_HAPTIC_CONSTANT: u32 = 1;
pub const SDL_HAPTIC_SINE: u32 = 2;
pub const SDL_HAPTIC_LEFTRIGHT: u32 = 4;
pub const SDL_HAPTIC_TRIANGLE: u32 = 8;
pub const SDL_HAPTIC_SAWTOOTHUP: u32 = 16;
pub const SDL_HAPTIC_SAWTOOTHDOWN: u32 = 32;
pub const SDL_HAPTIC_RAMP: u32 = 64;
pub const SDL_HAPTIC_SPRING: u32 = 128;
pub const SDL_HAPTIC_DAMPER: u32 = 256;
pub const SDL_HAPTIC_INERTIA: u32 = 512;
pub const SDL_HAPTIC_FRICTION: u32 = 1024;
pub const SDL_HAPTIC_CUSTOM: u32 = 2048;
pub const SDL_HAPTIC_GAIN: u32 = 4096;
pub const SDL_HAPTIC_AUTOCENTER: u32 = 8192;
pub const SDL_HAPTIC_STATUS: u32 = 16384;
pub const SDL_HAPTIC_PAUSE: u32 = 32768;
pub const SDL_HAPTIC_POLAR: u32 = 0;
pub const SDL_HAPTIC_CARTESIAN: u32 = 1;
pub const SDL_HAPTIC_SPHERICAL: u32 = 2;
pub const SDL_HAPTIC_STEERING_AXIS: u32 = 3;
pub const SDL_HAPTIC_INFINITY: u32 = 4294967295;
pub const SDL_HINT_ACCELEROMETER_AS_JOYSTICK: &[u8; 30] = b"SDL_ACCELEROMETER_AS_JOYSTICK\0";
pub const SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED: &[u8; 32] = b"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\0";
pub const SDL_HINT_ALLOW_TOPMOST: &[u8; 18] = b"SDL_ALLOW_TOPMOST\0";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE: &[u8; 27] = b"SDL_ANDROID_BLOCK_ON_PAUSE\0";
pub const SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO: &[u8; 38] =
    b"SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\0";
pub const SDL_HINT_ANDROID_TRAP_BACK_BUTTON: &[u8; 29] = b"SDL_ANDROID_TRAP_BACK_BUTTON\0";
pub const SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY: &[u8; 36] =
    b"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\0";
pub const SDL_HINT_APP_ID: &[u8; 11] = b"SDL_APP_ID\0";
pub const SDL_HINT_APP_NAME: &[u8; 13] = b"SDL_APP_NAME\0";
pub const SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS: &[u8; 34] =
    b"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\0";
pub const SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION: &[u8; 35] =
    b"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\0";
pub const SDL_HINT_AUDIO_CATEGORY: &[u8; 19] = b"SDL_AUDIO_CATEGORY\0";
pub const SDL_HINT_AUDIO_DEVICE_APP_NAME: &[u8; 26] = b"SDL_AUDIO_DEVICE_APP_NAME\0";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_NAME: &[u8; 29] = b"SDL_AUDIO_DEVICE_STREAM_NAME\0";
pub const SDL_HINT_AUDIO_DEVICE_STREAM_ROLE: &[u8; 29] = b"SDL_AUDIO_DEVICE_STREAM_ROLE\0";
pub const SDL_HINT_AUTO_UPDATE_JOYSTICKS: &[u8; 26] = b"SDL_AUTO_UPDATE_JOYSTICKS\0";
pub const SDL_HINT_AUTO_UPDATE_SENSORS: &[u8; 24] = b"SDL_AUTO_UPDATE_SENSORS\0";
pub const SDL_HINT_BMP_SAVE_LEGACY_FORMAT: &[u8; 27] = b"SDL_BMP_SAVE_LEGACY_FORMAT\0";
pub const SDL_HINT_DISPLAY_USABLE_BOUNDS: &[u8; 26] = b"SDL_DISPLAY_USABLE_BOUNDS\0";
pub const SDL_HINT_EMSCRIPTEN_ASYNCIFY: &[u8; 24] = b"SDL_EMSCRIPTEN_ASYNCIFY\0";
pub const SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR: &[u8; 31] = b"SDL_EMSCRIPTEN_CANVAS_SELECTOR\0";
pub const SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT: &[u8; 32] = b"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\0";
pub const SDL_HINT_ENABLE_SCREEN_KEYBOARD: &[u8; 27] = b"SDL_ENABLE_SCREEN_KEYBOARD\0";
pub const SDL_HINT_EVENT_LOGGING: &[u8; 18] = b"SDL_EVENT_LOGGING\0";
pub const SDL_HINT_FORCE_RAISEWINDOW: &[u8; 27] = b"SDL_HINT_FORCE_RAISEWINDOW\0";
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED: &[u8; 32] = b"SDL_WINDOW_ACTIVATE_WHEN_RAISED\0";
pub const SDL_HINT_FRAMEBUFFER_ACCELERATION: &[u8; 29] = b"SDL_FRAMEBUFFER_ACCELERATION\0";
pub const SDL_HINT_GAMECONTROLLERCONFIG: &[u8; 25] = b"SDL_GAMECONTROLLERCONFIG\0";
pub const SDL_HINT_GAMECONTROLLERCONFIG_FILE: &[u8; 30] = b"SDL_GAMECONTROLLERCONFIG_FILE\0";
pub const SDL_HINT_GAMECONTROLLERTYPE: &[u8; 23] = b"SDL_GAMECONTROLLERTYPE\0";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES: &[u8; 34] =
    b"SDL_GAMECONTROLLER_IGNORE_DEVICES\0";
pub const SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT: &[u8; 41] =
    b"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\0";
pub const SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS: &[u8; 37] =
    b"SDL_GAMECONTROLLER_USE_BUTTON_LABELS\0";
pub const SDL_HINT_GAMECONTROLLER_SENSOR_FUSION: &[u8; 33] = b"SDL_GAMECONTROLLER_SENSOR_FUSION\0";
pub const SDL_HINT_GRAB_KEYBOARD: &[u8; 18] = b"SDL_GRAB_KEYBOARD\0";
pub const SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS: &[u8; 38] =
    b"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\0";
pub const SDL_HINT_HIDAPI_IGNORE_DEVICES: &[u8; 26] = b"SDL_HIDAPI_IGNORE_DEVICES\0";
pub const SDL_HINT_IME_INTERNAL_EDITING: &[u8; 25] = b"SDL_IME_INTERNAL_EDITING\0";
pub const SDL_HINT_IME_SHOW_UI: &[u8; 16] = b"SDL_IME_SHOW_UI\0";
pub const SDL_HINT_IME_SUPPORT_EXTENDED_TEXT: &[u8; 30] = b"SDL_IME_SUPPORT_EXTENDED_TEXT\0";
pub const SDL_HINT_IOS_HIDE_HOME_INDICATOR: &[u8; 28] = b"SDL_IOS_HIDE_HOME_INDICATOR\0";
pub const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS: &[u8; 37] =
    b"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI: &[u8; 20] = b"SDL_JOYSTICK_HIDAPI\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE: &[u8; 29] = b"SDL_JOYSTICK_HIDAPI_GAMECUBE\0";
pub const SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE: &[u8; 35] =
    b"SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS: &[u8; 29] = b"SDL_JOYSTICK_HIDAPI_JOY_CONS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS: &[u8; 37] =
    b"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS: &[u8; 38] =
    b"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_LUNA: &[u8; 25] = b"SDL_JOYSTICK_HIDAPI_LUNA\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC: &[u8; 37] =
    b"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SHIELD: &[u8; 27] = b"SDL_JOYSTICK_HIDAPI_SHIELD\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS3: &[u8; 24] = b"SDL_JOYSTICK_HIDAPI_PS3\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4: &[u8; 24] = b"SDL_JOYSTICK_HIDAPI_PS4\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE: &[u8; 31] = b"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5: &[u8; 24] = b"SDL_JOYSTICK_HIDAPI_PS5\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED: &[u8; 35] =
    b"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE: &[u8; 31] = b"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_STADIA: &[u8; 27] = b"SDL_JOYSTICK_HIDAPI_STADIA\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_STEAM: &[u8; 26] = b"SDL_JOYSTICK_HIDAPI_STEAM\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH: &[u8; 27] = b"SDL_JOYSTICK_HIDAPI_SWITCH\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED: &[u8; 36] =
    b"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED: &[u8; 36] =
    b"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED: &[u8; 38] =
    b"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII: &[u8; 24] = b"SDL_JOYSTICK_HIDAPI_WII\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED: &[u8; 35] =
    b"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX: &[u8; 25] = b"SDL_JOYSTICK_HIDAPI_XBOX\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360: &[u8; 29] = b"SDL_JOYSTICK_HIDAPI_XBOX_360\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED: &[u8; 40] =
    b"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS: &[u8; 38] =
    b"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE: &[u8; 29] = b"SDL_JOYSTICK_HIDAPI_XBOX_ONE\0";
pub const SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED: &[u8; 38] =
    b"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\0";
pub const SDL_HINT_JOYSTICK_RAWINPUT: &[u8; 22] = b"SDL_JOYSTICK_RAWINPUT\0";
pub const SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT: &[u8; 39] =
    b"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\0";
pub const SDL_HINT_JOYSTICK_ROG_CHAKRAM: &[u8; 25] = b"SDL_JOYSTICK_ROG_CHAKRAM\0";
pub const SDL_HINT_JOYSTICK_THREAD: &[u8; 20] = b"SDL_JOYSTICK_THREAD\0";
pub const SDL_HINT_JOYSTICK_WGI: &[u8; 17] = b"SDL_JOYSTICK_WGI\0";
pub const SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER: &[u8; 30] = b"SDL_KMSDRM_REQUIRE_DRM_MASTER\0";
pub const SDL_HINT_JOYSTICK_DEVICE: &[u8; 20] = b"SDL_JOYSTICK_DEVICE\0";
pub const SDL_HINT_LINUX_DIGITAL_HATS: &[u8; 23] = b"SDL_LINUX_DIGITAL_HATS\0";
pub const SDL_HINT_LINUX_HAT_DEADZONES: &[u8; 24] = b"SDL_LINUX_HAT_DEADZONES\0";
pub const SDL_HINT_LINUX_JOYSTICK_CLASSIC: &[u8; 27] = b"SDL_LINUX_JOYSTICK_CLASSIC\0";
pub const SDL_HINT_LINUX_JOYSTICK_DEADZONES: &[u8; 29] = b"SDL_LINUX_JOYSTICK_DEADZONES\0";
pub const SDL_HINT_MAC_BACKGROUND_APP: &[u8; 23] = b"SDL_MAC_BACKGROUND_APP\0";
pub const SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK: &[u8; 39] =
    b"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\0";
pub const SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH: &[u8; 30] = b"SDL_MAC_OPENGL_ASYNC_DISPATCH\0";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS: &[u8; 30] = b"SDL_MOUSE_DOUBLE_CLICK_RADIUS\0";
pub const SDL_HINT_MOUSE_DOUBLE_CLICK_TIME: &[u8; 28] = b"SDL_MOUSE_DOUBLE_CLICK_TIME\0";
pub const SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH: &[u8; 29] = b"SDL_MOUSE_FOCUS_CLICKTHROUGH\0";
pub const SDL_HINT_MOUSE_NORMAL_SPEED_SCALE: &[u8; 29] = b"SDL_MOUSE_NORMAL_SPEED_SCALE\0";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_CENTER: &[u8; 31] = b"SDL_MOUSE_RELATIVE_MODE_CENTER\0";
pub const SDL_HINT_MOUSE_RELATIVE_MODE_WARP: &[u8; 29] = b"SDL_MOUSE_RELATIVE_MODE_WARP\0";
pub const SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE: &[u8; 31] = b"SDL_MOUSE_RELATIVE_SPEED_SCALE\0";
pub const SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE: &[u8; 32] = b"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\0";
pub const SDL_HINT_MOUSE_RELATIVE_WARP_MOTION: &[u8; 31] = b"SDL_MOUSE_RELATIVE_WARP_MOTION\0";
pub const SDL_HINT_MOUSE_TOUCH_EVENTS: &[u8; 23] = b"SDL_MOUSE_TOUCH_EVENTS\0";
pub const SDL_HINT_MOUSE_AUTO_CAPTURE: &[u8; 23] = b"SDL_MOUSE_AUTO_CAPTURE\0";
pub const SDL_HINT_NO_SIGNAL_HANDLERS: &[u8; 23] = b"SDL_NO_SIGNAL_HANDLERS\0";
pub const SDL_HINT_OPENGL_ES_DRIVER: &[u8; 21] = b"SDL_OPENGL_ES_DRIVER\0";
pub const SDL_HINT_ORIENTATIONS: &[u8; 21] = b"SDL_IOS_ORIENTATIONS\0";
pub const SDL_HINT_POLL_SENTINEL: &[u8; 18] = b"SDL_POLL_SENTINEL\0";
pub const SDL_HINT_PREFERRED_LOCALES: &[u8; 22] = b"SDL_PREFERRED_LOCALES\0";
pub const SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION: &[u8; 34] =
    b"SDL_QTWAYLAND_CONTENT_ORIENTATION\0";
pub const SDL_HINT_QTWAYLAND_WINDOW_FLAGS: &[u8; 27] = b"SDL_QTWAYLAND_WINDOW_FLAGS\0";
pub const SDL_HINT_RENDER_BATCHING: &[u8; 20] = b"SDL_RENDER_BATCHING\0";
pub const SDL_HINT_RENDER_LINE_METHOD: &[u8; 23] = b"SDL_RENDER_LINE_METHOD\0";
pub const SDL_HINT_RENDER_DIRECT3D11_DEBUG: &[u8; 28] = b"SDL_RENDER_DIRECT3D11_DEBUG\0";
pub const SDL_HINT_RENDER_DIRECT3D_THREADSAFE: &[u8; 31] = b"SDL_RENDER_DIRECT3D_THREADSAFE\0";
pub const SDL_HINT_RENDER_DRIVER: &[u8; 18] = b"SDL_RENDER_DRIVER\0";
pub const SDL_HINT_RENDER_OPENGL_SHADERS: &[u8; 26] = b"SDL_RENDER_OPENGL_SHADERS\0";
pub const SDL_HINT_RENDER_SCALE_QUALITY: &[u8; 25] = b"SDL_RENDER_SCALE_QUALITY\0";
pub const SDL_HINT_RENDER_VSYNC: &[u8; 17] = b"SDL_RENDER_VSYNC\0";
pub const SDL_HINT_PS2_DYNAMIC_VSYNC: &[u8; 22] = b"SDL_PS2_DYNAMIC_VSYNC\0";
pub const SDL_HINT_RETURN_KEY_HIDES_IME: &[u8; 25] = b"SDL_RETURN_KEY_HIDES_IME\0";
pub const SDL_HINT_RPI_VIDEO_LAYER: &[u8; 20] = b"SDL_RPI_VIDEO_LAYER\0";
pub const SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME: &[u8; 38] =
    b"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\0";
pub const SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL: &[u8; 40] =
    b"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\0";
pub const SDL_HINT_THREAD_PRIORITY_POLICY: &[u8; 27] = b"SDL_THREAD_PRIORITY_POLICY\0";
pub const SDL_HINT_THREAD_STACK_SIZE: &[u8; 22] = b"SDL_THREAD_STACK_SIZE\0";
pub const SDL_HINT_TIMER_RESOLUTION: &[u8; 21] = b"SDL_TIMER_RESOLUTION\0";
pub const SDL_HINT_TOUCH_MOUSE_EVENTS: &[u8; 23] = b"SDL_TOUCH_MOUSE_EVENTS\0";
pub const SDL_HINT_VITA_TOUCH_MOUSE_DEVICE: &[u8; 33] = b"SDL_HINT_VITA_TOUCH_MOUSE_DEVICE\0";
pub const SDL_HINT_TV_REMOTE_AS_JOYSTICK: &[u8; 26] = b"SDL_TV_REMOTE_AS_JOYSTICK\0";
pub const SDL_HINT_VIDEO_ALLOW_SCREENSAVER: &[u8; 28] = b"SDL_VIDEO_ALLOW_SCREENSAVER\0";
pub const SDL_HINT_VIDEO_DOUBLE_BUFFER: &[u8; 24] = b"SDL_VIDEO_DOUBLE_BUFFER\0";
pub const SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK: &[u8; 34] =
    b"SDL_VIDEO_EGL_GETDISPLAY_FALLBACK\0";
pub const SDL_HINT_VIDEO_EXTERNAL_CONTEXT: &[u8; 27] = b"SDL_VIDEO_EXTERNAL_CONTEXT\0";
pub const SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES: &[u8; 32] = b"SDL_VIDEO_MAC_FULLSCREEN_SPACES\0";
pub const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS: &[u8; 33] = b"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\0";
pub const SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR: &[u8; 33] = b"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\0";
pub const SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR: &[u8; 34] =
    b"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\0";
pub const SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION: &[u8; 33] = b"SDL_VIDEO_WAYLAND_MODE_EMULATION\0";
pub const SDL_HINT_VIDEO_WAYLAND_MODE_SCALING: &[u8; 31] = b"SDL_VIDEO_WAYLAND_MODE_SCALING\0";
pub const SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP: &[u8; 37] =
    b"SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP\0";
pub const SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT: &[u8; 36] =
    b"SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT\0";
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL: &[u8; 32] = b"SDL_VIDEO_FOREIGN_WINDOW_OPENGL\0";
pub const SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN: &[u8; 32] = b"SDL_VIDEO_FOREIGN_WINDOW_VULKAN\0";
pub const SDL_HINT_VIDEO_WIN_D3DCOMPILER: &[u8; 26] = b"SDL_VIDEO_WIN_D3DCOMPILER\0";
pub const SDL_HINT_VIDEO_FORCE_EGL: &[u8; 20] = b"SDL_VIDEO_FORCE_EGL\0";
pub const SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR: &[u8; 39] =
    b"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\0";
pub const SDL_HINT_VIDEO_X11_NET_WM_PING: &[u8; 26] = b"SDL_VIDEO_X11_NET_WM_PING\0";
pub const SDL_HINT_VIDEO_X11_WINDOW_VISUALID: &[u8; 30] = b"SDL_VIDEO_X11_WINDOW_VISUALID\0";
pub const SDL_HINT_VIDEO_X11_SCALING_FACTOR: &[u8; 29] = b"SDL_VIDEO_X11_SCALING_FACTOR\0";
pub const SDL_HINT_VIDEO_X11_XRANDR: &[u8; 21] = b"SDL_VIDEO_X11_XRANDR\0";
pub const SDL_HINT_WAVE_FACT_CHUNK: &[u8; 20] = b"SDL_WAVE_FACT_CHUNK\0";
pub const SDL_HINT_WAVE_RIFF_CHUNK_SIZE: &[u8; 25] = b"SDL_WAVE_RIFF_CHUNK_SIZE\0";
pub const SDL_HINT_WAVE_TRUNCATION: &[u8; 20] = b"SDL_WAVE_TRUNCATION\0";
pub const SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING: &[u8; 34] =
    b"SDL_WINDOWS_DISABLE_THREAD_NAMING\0";
pub const SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS: &[u8; 34] =
    b"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\0";
pub const SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP: &[u8; 31] = b"SDL_WINDOWS_ENABLE_MESSAGELOOP\0";
pub const SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS: &[u8; 42] =
    b"SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\0";
pub const SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL: &[u8; 35] =
    b"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\0";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON: &[u8; 29] = b"SDL_WINDOWS_INTRESOURCE_ICON\0";
pub const SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL: &[u8; 35] =
    b"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\0";
pub const SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4: &[u8; 31] = b"SDL_WINDOWS_NO_CLOSE_ON_ALT_F4\0";
pub const SDL_HINT_WINDOWS_USE_D3D9EX: &[u8; 23] = b"SDL_WINDOWS_USE_D3D9EX\0";
pub const SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN: &[u8; 44] =
    b"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\0";
pub const SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN: &[u8; 31] = b"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\0";
pub const SDL_HINT_WINRT_HANDLE_BACK_BUTTON: &[u8; 29] = b"SDL_WINRT_HANDLE_BACK_BUTTON\0";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_LABEL: &[u8; 31] = b"SDL_WINRT_PRIVACY_POLICY_LABEL\0";
pub const SDL_HINT_WINRT_PRIVACY_POLICY_URL: &[u8; 29] = b"SDL_WINRT_PRIVACY_POLICY_URL\0";
pub const SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT: &[u8; 32] = b"SDL_X11_FORCE_OVERRIDE_REDIRECT\0";
pub const SDL_HINT_XINPUT_ENABLED: &[u8; 19] = b"SDL_XINPUT_ENABLED\0";
pub const SDL_HINT_DIRECTINPUT_ENABLED: &[u8; 24] = b"SDL_DIRECTINPUT_ENABLED\0";
pub const SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING: &[u8; 36] =
    b"SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING\0";
pub const SDL_HINT_AUDIO_INCLUDE_MONITORS: &[u8; 27] = b"SDL_AUDIO_INCLUDE_MONITORS\0";
pub const SDL_HINT_X11_WINDOW_TYPE: &[u8; 20] = b"SDL_X11_WINDOW_TYPE\0";
pub const SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE: &[u8; 30] = b"SDL_QUIT_ON_LAST_WINDOW_CLOSE\0";
pub const SDL_HINT_VIDEO_DRIVER: &[u8; 17] = b"SDL_VIDEO_DRIVER\0";
pub const SDL_HINT_AUDIO_DRIVER: &[u8; 17] = b"SDL_AUDIO_DRIVER\0";
pub const SDL_HINT_KMSDRM_DEVICE_INDEX: &[u8; 24] = b"SDL_KMSDRM_DEVICE_INDEX\0";
pub const SDL_HINT_TRACKPAD_IS_TOUCH_ONLY: &[u8; 27] = b"SDL_TRACKPAD_IS_TOUCH_ONLY\0";
pub const SDL_HINT_GDK_TEXTINPUT_TITLE: &[u8; 24] = b"SDL_GDK_TEXTINPUT_TITLE\0";
pub const SDL_HINT_GDK_TEXTINPUT_DESCRIPTION: &[u8; 30] = b"SDL_GDK_TEXTINPUT_DESCRIPTION\0";
pub const SDL_HINT_GDK_TEXTINPUT_DEFAULT: &[u8; 26] = b"SDL_GDK_TEXTINPUT_DEFAULT\0";
pub const SDL_HINT_GDK_TEXTINPUT_SCOPE: &[u8; 24] = b"SDL_GDK_TEXTINPUT_SCOPE\0";
pub const SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH: &[u8; 29] = b"SDL_GDK_TEXTINPUT_MAX_LENGTH\0";
pub const SDL_MAX_LOG_MESSAGE: u32 = 4096;
pub const SDL_NONSHAPEABLE_WINDOW: i32 = -1;
pub const SDL_INVALID_SHAPE_ARGUMENT: i32 = -2;
pub const SDL_WINDOW_LACKS_SHAPE: i32 = -3;
pub const SDL_MS_PER_SECOND: u32 = 1000;
pub const SDL_US_PER_SECOND: u32 = 1000000;
pub const SDL_NS_PER_SECOND: u32 = 1000000000;
pub const SDL_NS_PER_MS: u32 = 1000000;
pub const SDL_NS_PER_US: u32 = 1000;
pub const SDL_MAJOR_VERSION: u32 = 3;
pub const SDL_MINOR_VERSION: u32 = 0;
pub const SDL_PATCHLEVEL: u32 = 0;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
pub const SDL_bool_SDL_FALSE: SDL_bool = 0;
pub const SDL_bool_SDL_TRUE: SDL_bool = 1;
pub type SDL_bool = ::std::os::raw::c_uint;
pub type Sint8 = i8;
pub type Uint8 = u8;
pub type Sint16 = i16;
pub type Uint16 = u16;
pub type Sint32 = i32;
pub type Uint32 = u32;
pub type Sint64 = i64;
pub type Uint64 = u64;
pub const SDL_DUMMY_ENUM_DUMMY_ENUM_VALUE: SDL_DUMMY_ENUM = 0;
pub type SDL_DUMMY_ENUM = ::std::os::raw::c_uint;
extern "C" {
    pub fn SDL_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_calloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_realloc(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_free(mem: *mut ::std::os::raw::c_void);
}
pub type SDL_malloc_func =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type SDL_calloc_func = ::std::option::Option<
    unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void,
>;
pub type SDL_realloc_func = ::std::option::Option<
    unsafe extern "C" fn(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type SDL_free_func =
    ::std::option::Option<unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void)>;
extern "C" {
    #[doc = " Get the original set of SDL memory functions\n\n \\param malloc_func filled with malloc function\n \\param calloc_func filled with calloc function\n \\param realloc_func filled with realloc function\n \\param free_func filled with free function\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetOriginalMemoryFunctions(
        malloc_func: *mut SDL_malloc_func,
        calloc_func: *mut SDL_calloc_func,
        realloc_func: *mut SDL_realloc_func,
        free_func: *mut SDL_free_func,
    );
}
extern "C" {
    #[doc = " Get the current set of SDL memory functions\n\n \\param malloc_func filled with malloc function\n \\param calloc_func filled with calloc function\n \\param realloc_func filled with realloc function\n \\param free_func filled with free function\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetMemoryFunctions(
        malloc_func: *mut SDL_malloc_func,
        calloc_func: *mut SDL_calloc_func,
        realloc_func: *mut SDL_realloc_func,
        free_func: *mut SDL_free_func,
    );
}
extern "C" {
    #[doc = " Replace SDL's memory allocation functions with a custom set\n\n \\param malloc_func custom malloc function\n \\param calloc_func custom calloc function\n \\param realloc_func custom realloc function\n \\param free_func custom free function\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetMemoryFunctions(
        malloc_func: SDL_malloc_func,
        calloc_func: SDL_calloc_func,
        realloc_func: SDL_realloc_func,
        free_func: SDL_free_func,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Allocate memory aligned to a specific value\n\n If `alignment` is less than the size of `void *`, then it will be increased\n to match that.\n\n The returned memory address will be a multiple of the alignment value, and\n the amount of memory allocated will be a multiple of the alignment value.\n\n The memory returned by this function must be freed with SDL_aligned_free()\n\n \\param alignment the alignment requested\n \\param size the size to allocate\n \\returns a pointer to the aligned memory\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_aligned_free"]
    pub fn SDL_aligned_alloc(alignment: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Free memory allocated by SDL_aligned_alloc()\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_aligned_alloc"]
    pub fn SDL_aligned_free(mem: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Get the number of outstanding (unfreed) allocations\n\n \\returns the number of allocations\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetNumAllocations() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_getenv(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_setenv(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_qsort(
        base: *mut ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn SDL_bsearch(
        key: *const ::std::os::raw::c_void,
        base: *const ::std::os::raw::c_void,
        nmemb: usize,
        size: usize,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_abs(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isalpha(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isalnum(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isblank(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_iscntrl(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isdigit(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isxdigit(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_ispunct(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isspace(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isupper(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_islower(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isprint(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_isgraph(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_toupper(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_tolower(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_crc16(crc: Uint16, data: *const ::std::os::raw::c_void, len: usize) -> Uint16;
}
extern "C" {
    pub fn SDL_crc32(crc: Uint32, data: *const ::std::os::raw::c_void, len: usize) -> Uint32;
}
extern "C" {
    pub fn SDL_memset(
        dst: *mut ::std::os::raw::c_void,
        c: ::std::os::raw::c_int,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memset4(
        dst: *mut ::std::os::raw::c_void,
        val: Uint32,
        dwords: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memcpy(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memmove(
        dst: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_void,
        len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn SDL_memcmp(
        s1: *const ::std::os::raw::c_void,
        s2: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcslen(wstr: *const wchar_t) -> usize;
}
extern "C" {
    pub fn SDL_wcsnlen(wstr: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcslcpy(dst: *mut wchar_t, src: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcslcat(dst: *mut wchar_t, src: *const wchar_t, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_wcsdup(wstr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcsstr(haystack: *const wchar_t, needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn SDL_wcscmp(str1: *const wchar_t, str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcsncmp(
        str1: *const wchar_t,
        str2: *const wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcscasecmp(str1: *const wchar_t, str2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcsncasecmp(
        str1: *const wchar_t,
        str2: *const wchar_t,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_wcstol(
        str_: *const wchar_t,
        endp: *mut *mut wchar_t,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_strlen(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn SDL_strnlen(str_: *const ::std::os::raw::c_char, maxlen: usize) -> usize;
}
extern "C" {
    pub fn SDL_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_utf8strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_bytes: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> usize;
}
extern "C" {
    pub fn SDL_strdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strndup(
        str_: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strrev(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strupr(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strlwr(str_: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strchr(
        str_: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strrchr(
        str_: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strstr(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strcasestr(
        haystack: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_strtok_r(
        s1: *mut ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        saveptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_utf8strlen(str_: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn SDL_utf8strnlen(str_: *const ::std::os::raw::c_char, bytes: usize) -> usize;
}
extern "C" {
    pub fn SDL_itoa(
        value: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_uitoa(
        value: ::std::os::raw::c_uint,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ltoa(
        value: ::std::os::raw::c_long,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ultoa(
        value: ::std::os::raw::c_ulong,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_lltoa(
        value: Sint64,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_ulltoa(
        value: Uint64,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDL_atoi(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_atof(str_: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn SDL_strtol(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_strtoul(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn SDL_strtoll(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> Sint64;
}
extern "C" {
    pub fn SDL_strtoull(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> Uint64;
}
extern "C" {
    pub fn SDL_strtod(
        str_: *const ::std::os::raw::c_char,
        endp: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn SDL_strcmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strncmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strcasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_strncasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_sscanf(
        text: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_vsscanf(
        text: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_snprintf(
        text: *mut ::std::os::raw::c_char,
        maxlen: usize,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_swprintf(
        text: *mut wchar_t,
        maxlen: usize,
        fmt: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_vsnprintf(
        text: *mut ::std::os::raw::c_char,
        maxlen: usize,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_vswprintf(
        text: *mut wchar_t,
        maxlen: usize,
        fmt: *const wchar_t,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_asprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_vasprintf(
        strp: *mut *mut ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Use this function to compute arc cosine of `x`.\n\n The definition of `y = acos(x)` is `x = cos(y)`.\n\n Domain: `-1 <= x <= 1`\n\n Range: `0 <= y <= Pi`\n\n \\param x floating point value, in radians.\n \\returns arc cosine of `x`.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_acos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_acosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_asin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_asinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_atanf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_atan2(y: f64, x: f64) -> f64;
}
extern "C" {
    pub fn SDL_atan2f(y: f32, x: f32) -> f32;
}
extern "C" {
    pub fn SDL_ceil(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_ceilf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_copysign(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_copysignf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_cos(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_cosf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_exp(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_expf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fabs(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_fabsf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_floor(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_floorf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_trunc(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_truncf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_fmod(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_fmodf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_log(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_logf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_log10(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_log10f(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_modf(x: f64, y: *mut f64) -> f64;
}
extern "C" {
    pub fn SDL_modff(x: f32, y: *mut f32) -> f32;
}
extern "C" {
    pub fn SDL_pow(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn SDL_powf(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn SDL_round(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_roundf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_lround(x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_lroundf(x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn SDL_scalbn(x: f64, n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn SDL_scalbnf(x: f32, n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn SDL_sin(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sinf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_sqrt(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_sqrtf(x: f32) -> f32;
}
extern "C" {
    pub fn SDL_tan(x: f64) -> f64;
}
extern "C" {
    pub fn SDL_tanf(x: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_iconv_data_t {
    _unused: [u8; 0],
}
pub type SDL_iconv_t = *mut SDL_iconv_data_t;
extern "C" {
    pub fn SDL_iconv_open(
        tocode: *const ::std::os::raw::c_char,
        fromcode: *const ::std::os::raw::c_char,
    ) -> SDL_iconv_t;
}
extern "C" {
    pub fn SDL_iconv_close(cd: SDL_iconv_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_iconv(
        cd: SDL_iconv_t,
        inbuf: *mut *const ::std::os::raw::c_char,
        inbytesleft: *mut usize,
        outbuf: *mut *mut ::std::os::raw::c_char,
        outbytesleft: *mut usize,
    ) -> usize;
}
extern "C" {
    #[doc = " This function converts a buffer or string between encodings in one pass,\n returning a string that must be freed with SDL_free() or NULL on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_iconv_string(
        tocode: *const ::std::os::raw::c_char,
        fromcode: *const ::std::os::raw::c_char,
        inbuf: *const ::std::os::raw::c_char,
        inbytesleft: usize,
    ) -> *mut ::std::os::raw::c_char;
}
pub type SDL_FunctionPointer = ::std::option::Option<unsafe extern "C" fn()>;
#[doc = "< Retry the assert immediately."]
pub const SDL_AssertState_SDL_ASSERTION_RETRY: SDL_AssertState = 0;
#[doc = "< Make the debugger trigger a breakpoint."]
pub const SDL_AssertState_SDL_ASSERTION_BREAK: SDL_AssertState = 1;
#[doc = "< Terminate the program."]
pub const SDL_AssertState_SDL_ASSERTION_ABORT: SDL_AssertState = 2;
#[doc = "< Ignore the assert."]
pub const SDL_AssertState_SDL_ASSERTION_IGNORE: SDL_AssertState = 3;
#[doc = "< Ignore the assert from now on."]
pub const SDL_AssertState_SDL_ASSERTION_ALWAYS_IGNORE: SDL_AssertState = 4;
pub type SDL_AssertState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AssertData {
    pub always_ignore: ::std::os::raw::c_int,
    pub trigger_count: ::std::os::raw::c_uint,
    pub condition: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
    pub linenum: ::std::os::raw::c_int,
    pub function: *const ::std::os::raw::c_char,
    pub next: *const SDL_AssertData,
}
#[test]
fn bindgen_test_layout_SDL_AssertData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AssertData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AssertData>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AssertData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AssertData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).always_ignore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(always_ignore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(trigger_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AssertData),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    #[doc = " Never call this directly.\n\n Use the SDL_assert* macros.\n\n \\param data assert data structure\n \\param func function name\n \\param file file name\n \\param line line number\n \\returns assert state\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReportAssertion(
        data: *mut SDL_AssertData,
        func: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> SDL_AssertState;
}
#[doc = " A callback that fires when an SDL assertion fails.\n\n \\param data a pointer to the SDL_AssertData structure corresponding to the\n             current assertion\n \\param userdata what was passed as `userdata` to SDL_SetAssertionHandler()\n \\returns an SDL_AssertState value indicating how to handle the failure."]
pub type SDL_AssertionHandler = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const SDL_AssertData,
        userdata: *mut ::std::os::raw::c_void,
    ) -> SDL_AssertState,
>;
extern "C" {
    #[doc = " Set an application-defined assertion handler.\n\n This function allows an application to show its own assertion UI and/or\n force the response to an assertion failure. If the application doesn't\n provide this, SDL will try to do the right thing, popping up a\n system-specific GUI dialog, and probably minimizing any fullscreen windows.\n\n This callback may fire from any thread, but it runs wrapped in a mutex, so\n it will only fire from one thread at a time.\n\n This callback is NOT reset to SDL's internal handler upon SDL_Quit()!\n\n \\param handler the SDL_AssertionHandler function to call when an assertion\n                fails or NULL for the default handler\n \\param userdata a pointer that is passed to `handler`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetAssertionHandler"]
    pub fn SDL_SetAssertionHandler(
        handler: SDL_AssertionHandler,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Get the default assertion handler.\n\n This returns the function pointer that is called by default when an\n assertion is triggered. This is an internal function provided by SDL, that\n is used for assertions when SDL_SetAssertionHandler() hasn't been used to\n provide a different function.\n\n \\returns the default SDL_AssertionHandler that is called when an assert\n          triggers.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetAssertionHandler"]
    pub fn SDL_GetDefaultAssertionHandler() -> SDL_AssertionHandler;
}
extern "C" {
    #[doc = " Get the current assertion handler.\n\n This returns the function pointer that is called when an assertion is\n triggered. This is either the value last passed to\n SDL_SetAssertionHandler(), or if no application-specified function is set,\n is equivalent to calling SDL_GetDefaultAssertionHandler().\n\n The parameter `puserdata` is a pointer to a void*, which will store the\n \"userdata\" pointer that was passed to SDL_SetAssertionHandler(). This value\n will always be NULL for the default handler. If you don't care about this\n data, it is safe to pass a NULL pointer to this function to ignore it.\n\n \\param puserdata pointer which is filled with the \"userdata\" pointer that\n                  was passed to SDL_SetAssertionHandler()\n \\returns the SDL_AssertionHandler that is called when an assert triggers.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetAssertionHandler"]
    pub fn SDL_GetAssertionHandler(
        puserdata: *mut *mut ::std::os::raw::c_void,
    ) -> SDL_AssertionHandler;
}
extern "C" {
    #[doc = " Get a list of all assertion failures.\n\n This function gets all assertions triggered since the last call to\n SDL_ResetAssertionReport(), or the start of the program.\n\n The proper way to examine this data looks something like this:\n\n ```c\n const SDL_AssertData *item = SDL_GetAssertionReport();\n while (item) {\n    printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\\\n\",\n           item->condition, item->function, item->filename,\n           item->linenum, item->trigger_count,\n           item->always_ignore ? \"yes\" : \"no\");\n    item = item->next;\n }\n ```\n\n \\returns a list of all failed assertions or NULL if the list is empty. This\n          memory should not be modified or freed by the application.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ResetAssertionReport"]
    pub fn SDL_GetAssertionReport() -> *const SDL_AssertData;
}
extern "C" {
    #[doc = " Clear the list of all assertion failures.\n\n This function will clear the list of all assertions triggered up to that\n point. Immediately following this call, SDL_GetAssertionReport will return\n no items. In addition, any previously-triggered assertions will be reset to\n a trigger_count of zero, and their always_ignore state will be false.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetAssertionReport"]
    pub fn SDL_ResetAssertionReport();
}
pub type SDL_SpinLock = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Try to lock a spin lock by setting it to a non-zero value.\n\n ***Please note that spinlocks are dangerous if you don't know what you're\n doing. Please be careful using any sort of spinlock!***\n\n \\param lock a pointer to a lock variable\n \\returns SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already\n          held.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicLock\n \\sa SDL_AtomicUnlock"]
    pub fn SDL_AtomicTryLock(lock: *mut SDL_SpinLock) -> SDL_bool;
}
extern "C" {
    #[doc = " Lock a spin lock by setting it to a non-zero value.\n\n ***Please note that spinlocks are dangerous if you don't know what you're\n doing. Please be careful using any sort of spinlock!***\n\n \\param lock a pointer to a lock variable\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicTryLock\n \\sa SDL_AtomicUnlock"]
    pub fn SDL_AtomicLock(lock: *mut SDL_SpinLock);
}
extern "C" {
    #[doc = " Unlock a spin lock by setting it to 0.\n\n Always returns immediately.\n\n ***Please note that spinlocks are dangerous if you don't know what you're\n doing. Please be careful using any sort of spinlock!***\n\n \\param lock a pointer to a lock variable\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicLock\n \\sa SDL_AtomicTryLock"]
    pub fn SDL_AtomicUnlock(lock: *mut SDL_SpinLock);
}
extern "C" {
    #[doc = " Memory barriers are designed to prevent reads and writes from being\n reordered by the compiler and being seen out of order on multi-core CPUs.\n\n A typical pattern would be for thread A to write some data and a flag, and\n for thread B to read the flag and get the data. In this case you would\n insert a release barrier between writing the data and the flag,\n guaranteeing that the data write completes no later than the flag is\n written, and you would insert an acquire barrier between reading the flag\n and reading the data, to ensure that all the reads associated with the flag\n have completed.\n\n In this pattern you should always see a release barrier paired with an\n acquire barrier and you should gate the data reads/writes with a single\n flag variable.\n\n For more information on these semantics, take a look at the blog post:\n http://preshing.com/20120913/acquire-and-release-semantics\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_MemoryBarrierReleaseFunction();
}
extern "C" {
    pub fn SDL_MemoryBarrierAcquireFunction();
}
#[doc = " \\brief A type representing an atomic integer value.  It is a struct\n        so people don't accidentally use numeric operations on it."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AtomicInt {
    pub value: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_AtomicInt() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AtomicInt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AtomicInt>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_AtomicInt))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AtomicInt>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_AtomicInt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AtomicInt),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[doc = " Set an atomic variable to a new value if it is currently an old value.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to an SDL_AtomicInt variable to be modified\n \\param oldval the old value\n \\param newval the new value\n \\returns SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicCASPtr\n \\sa SDL_AtomicGet\n \\sa SDL_AtomicSet"]
    pub fn SDL_AtomicCAS(
        a: *mut SDL_AtomicInt,
        oldval: ::std::os::raw::c_int,
        newval: ::std::os::raw::c_int,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Set an atomic variable to a value.\n\n This function also acts as a full memory barrier.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to an SDL_AtomicInt variable to be modified\n \\param v the desired value\n \\returns the previous value of the atomic variable.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicGet"]
    pub fn SDL_AtomicSet(a: *mut SDL_AtomicInt, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the value of an atomic variable.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to an SDL_AtomicInt variable\n \\returns the current value of an atomic variable.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicSet"]
    pub fn SDL_AtomicGet(a: *mut SDL_AtomicInt) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add to an atomic variable.\n\n This function also acts as a full memory barrier.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to an SDL_AtomicInt variable to be modified\n \\param v the desired value to add\n \\returns the previous value of the atomic variable.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicDecRef\n \\sa SDL_AtomicIncRef"]
    pub fn SDL_AtomicAdd(a: *mut SDL_AtomicInt, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a pointer to a new value if it is currently an old value.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to a pointer\n \\param oldval the old pointer value\n \\param newval the new pointer value\n \\returns SDL_TRUE if the pointer was set, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicCAS\n \\sa SDL_AtomicGetPtr\n \\sa SDL_AtomicSetPtr"]
    pub fn SDL_AtomicCASPtr(
        a: *mut *mut ::std::os::raw::c_void,
        oldval: *mut ::std::os::raw::c_void,
        newval: *mut ::std::os::raw::c_void,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Set a pointer to a value atomically.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to a pointer\n \\param v the desired pointer value\n \\returns the previous value of the pointer.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicCASPtr\n \\sa SDL_AtomicGetPtr"]
    pub fn SDL_AtomicSetPtr(
        a: *mut *mut ::std::os::raw::c_void,
        v: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Get the value of a pointer atomically.\n\n ***Note: If you don't know what this function is for, you shouldn't use\n it!***\n\n \\param a a pointer to a pointer\n \\returns the current value of a pointer.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AtomicCASPtr\n \\sa SDL_AtomicSetPtr"]
    pub fn SDL_AtomicGetPtr(a: *mut *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Set the SDL error message for the current thread.\n\n Calling this function will replace any previous error message that was set.\n\n This function always returns -1, since SDL frequently uses -1 to signify an\n failing result, leading to this idiom:\n\n ```c\n if (error_code) {\n     return SDL_SetError(\"This operation has failed: %d\", error_code);\n }\n ```\n\n \\param fmt a printf()-style message format string\n \\param ... additional parameters matching % tokens in the `fmt` string, if\n            any\n \\returns always -1.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ClearError\n \\sa SDL_GetError"]
    pub fn SDL_SetError(fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Retrieve a message about the last error that occurred on the current\n thread.\n\n It is possible for multiple errors to occur before calling SDL_GetError().\n Only the last error is returned.\n\n The message is only applicable when an SDL function has signaled an error.\n You must check the return values of SDL function calls to determine when to\n appropriately call SDL_GetError(). You should *not* use the results of\n SDL_GetError() to decide if an error has occurred! Sometimes SDL will set\n an error string even when reporting success.\n\n SDL will *not* clear the error string for successful API calls. You *must*\n check return values for failure cases before you can assume the error\n string applies.\n\n Error strings are set per-thread, so an error set in a different thread\n will not interfere with the current thread's operation.\n\n The returned string is internally allocated and must not be freed by the\n application.\n\n \\returns a message with information about the specific error that occurred,\n          or an empty string if there hasn't been an error message set since\n          the last call to SDL_ClearError(). The message is only applicable\n          when an SDL function has signaled an error. You must check the\n          return values of SDL function calls to determine when to\n          appropriately call SDL_GetError().\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ClearError\n \\sa SDL_SetError"]
    pub fn SDL_GetError() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the last error message that was set for the current thread.\n\n This allows the caller to copy the error string into a provided buffer, but\n otherwise operates exactly the same as SDL_GetError().\n\n \\param errstr A buffer to fill with the last error message that was set for\n               the current thread\n \\param maxlen The size of the buffer pointed to by the errstr parameter\n \\returns the pointer passed in as the `errstr` parameter.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetError"]
    pub fn SDL_GetErrorMsg(
        errstr: *mut ::std::os::raw::c_char,
        maxlen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Clear any previous error message for this thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetError\n \\sa SDL_SetError"]
    pub fn SDL_ClearError();
}
pub const SDL_errorcode_SDL_ENOMEM: SDL_errorcode = 0;
pub const SDL_errorcode_SDL_EFREAD: SDL_errorcode = 1;
pub const SDL_errorcode_SDL_EFWRITE: SDL_errorcode = 2;
pub const SDL_errorcode_SDL_EFSEEK: SDL_errorcode = 3;
pub const SDL_errorcode_SDL_UNSUPPORTED: SDL_errorcode = 4;
pub const SDL_errorcode_SDL_LASTERROR: SDL_errorcode = 5;
pub type SDL_errorcode = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " SDL_Error()\n\n \\param code Error code\n \\returns unconditionally -1.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_Error(code: SDL_errorcode) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Mutex {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a new mutex.\n\n All newly-created mutexes begin in the _unlocked_ state.\n\n Calls to SDL_LockMutex() will not return while the mutex is locked by\n another thread. See SDL_TryLockMutex() to attempt to lock without blocking.\n\n SDL mutexes are reentrant.\n\n \\returns the initialized and unlocked mutex or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyMutex\n \\sa SDL_LockMutex\n \\sa SDL_TryLockMutex\n \\sa SDL_UnlockMutex"]
    pub fn SDL_CreateMutex() -> *mut SDL_Mutex;
}
extern "C" {
    #[doc = " Lock the mutex.\n\n This will block until the mutex is available, which is to say it is in the\n unlocked state and the OS has chosen the caller as the next thread to lock\n it. Of all threads waiting to lock the mutex, only one may do so at a time.\n\n It is legal for the owning thread to lock an already-locked mutex. It must\n unlock it the same number of times before it is actually made available for\n other threads in the system (this is known as a \"recursive mutex\").\n\n \\param mutex the mutex to lock\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Try to lock a mutex without blocking.\n\n This works just like SDL_LockMutex(), but if the mutex is not available,\n this function returns `SDL_MUTEX_TIMEDOUT` immediately.\n\n This technique is useful if you need exclusive access to a resource but\n don't want to wait for it, and will return to it to try again later.\n\n \\param mutex the mutex to try to lock\n \\returns 0, `SDL_MUTEX_TIMEDOUT`, or -1 on error; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateMutex\n \\sa SDL_DestroyMutex\n \\sa SDL_LockMutex\n \\sa SDL_UnlockMutex"]
    pub fn SDL_TryLockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unlock the mutex.\n\n It is legal for the owning thread to lock an already-locked mutex. It must\n unlock it the same number of times before it is actually made available for\n other threads in the system (this is known as a \"recursive mutex\").\n\n It is illegal to unlock a mutex that has not been locked by the current\n thread, and doing so results in undefined behavior.\n\n \\param mutex the mutex to unlock.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UnlockMutex(mutex: *mut SDL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy a mutex created with SDL_CreateMutex().\n\n This function must be called on any mutex that is no longer needed. Failure\n to destroy a mutex will result in a system memory or resource leak. While\n it is safe to destroy a mutex that is _unlocked_, it is not safe to attempt\n to destroy a locked mutex, and may result in undefined behavior depending\n on the platform.\n\n \\param mutex the mutex to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateMutex\n \\sa SDL_LockMutex\n \\sa SDL_TryLockMutex\n \\sa SDL_UnlockMutex"]
    pub fn SDL_DestroyMutex(mutex: *mut SDL_Mutex);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWLock {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a new read/write lock.\n\n A read/write lock is useful for situations where you have multiple threads\n trying to access a resource that is rarely updated. All threads requesting\n a read-only lock will be allowed to run in parallel; if a thread requests a\n write lock, it will be provided exclusive access. This makes it safe for\n multiple threads to use a resource at the same time if they promise not to\n change it, and when it has to be changed, the rwlock will serve as a\n gateway to make sure those changes can be made safely.\n\n In the right situation, a rwlock can be more efficient than a mutex, which\n only lets a single thread proceed at a time, even if it won't be modifying\n the data.\n\n All newly-created read/write locks begin in the _unlocked_ state.\n\n Calls to SDL_LockRWLockForReading() and SDL_LockRWLockForWriting will not\n return while the rwlock is locked _for writing_ by another thread. See\n SDL_TryLockRWLockForReading() and SDL_TryLockRWLockForWriting() to attempt\n to lock without blocking.\n\n SDL read/write locks are only recursive for read-only locks! They are not\n guaranteed to be fair, or provide access in a FIFO manner! They are not\n guaranteed to favor writers. You may not lock a rwlock for both read-only\n and write access at the same time from the same thread (so you can't\n promote your read-only lock to a write lock without unlocking first).\n\n \\returns the initialized and unlocked read/write lock or NULL on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyRWLock\n \\sa SDL_LockRWLockForReading\n \\sa SDL_TryLockRWLockForReading\n \\sa SDL_LockRWLockForWriting\n \\sa SDL_TryLockRWLockForWriting\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_CreateRWLock() -> *mut SDL_RWLock;
}
extern "C" {
    #[doc = " Lock the read/write lock for _read only_ operations.\n\n This will block until the rwlock is available, which is to say it is not\n locked for writing by any other thread. Of all threads waiting to lock the\n rwlock, all may do so at the same time as long as they are requesting\n read-only access; if a thread wants to lock for writing, only one may do so\n at a time, and no other threads, read-only or not, may hold the lock at the\n same time.\n\n It is legal for the owning thread to lock an already-locked rwlock for\n reading. It must unlock it the same number of times before it is actually\n made available for other threads in the system (this is known as a\n \"recursive rwlock\").\n\n Note that locking for writing is not recursive (this is only available to\n read-only locks).\n\n It is illegal to request a read-only lock from a thread that already holds\n the write lock. Doing so results in undefined behavior. Unlock the write\n lock before requesting a read-only lock. (But, of course, if you have the\n write lock, you don't need further locks to read in any case.)\n\n \\param rwlock the read/write lock to lock\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_LockRWLockForReading(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Lock the read/write lock for _write_ operations.\n\n This will block until the rwlock is available, which is to say it is not\n locked for reading or writing by any other thread. Only one thread may hold\n the lock when it requests write access; all other threads, whether they\n also want to write or only want read-only access, must wait until the\n writer thread has released the lock.\n\n It is illegal for the owning thread to lock an already-locked rwlock for\n writing (read-only may be locked recursively, writing can not). Doing so\n results in undefined behavior.\n\n It is illegal to request a write lock from a thread that already holds a\n read-only lock. Doing so results in undefined behavior. Unlock the\n read-only lock before requesting a write lock.\n\n \\param rwlock the read/write lock to lock\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_LockRWLockForWriting(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Try to lock a read/write lock _for reading_ without blocking.\n\n This works just like SDL_LockRWLockForReading(), but if the rwlock is not\n available, then this function returns `SDL_RWLOCK_TIMEDOUT` immediately.\n\n This technique is useful if you need access to a resource but don't want to\n wait for it, and will return to it to try again later.\n\n Trying to lock for read-only access can succeed if other threads are\n holding read-only locks, as this won't prevent access.\n\n \\param rwlock the rwlock to try to lock\n \\returns 0, `SDL_RWLOCK_TIMEDOUT`, or -1 on error; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRWLock\n \\sa SDL_DestroyRWLock\n \\sa SDL_TryLockRWLockForReading\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_TryLockRWLockForReading(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Try to lock a read/write lock _for writing_ without blocking.\n\n This works just like SDL_LockRWLockForWriting(), but if the rwlock is not\n available, this function returns `SDL_RWLOCK_TIMEDOUT` immediately.\n\n This technique is useful if you need exclusive access to a resource but\n don't want to wait for it, and will return to it to try again later.\n\n It is illegal for the owning thread to lock an already-locked rwlock for\n writing (read-only may be locked recursively, writing can not). Doing so\n results in undefined behavior.\n\n It is illegal to request a write lock from a thread that already holds a\n read-only lock. Doing so results in undefined behavior. Unlock the\n read-only lock before requesting a write lock.\n\n \\param rwlock the rwlock to try to lock\n \\returns 0, `SDL_RWLOCK_TIMEDOUT`, or -1 on error; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRWLock\n \\sa SDL_DestroyRWLock\n \\sa SDL_TryLockRWLockForWriting\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_TryLockRWLockForWriting(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unlock the read/write lock.\n\n Use this function to unlock the rwlock, whether it was locked for read-only\n or write operations.\n\n It is legal for the owning thread to lock an already-locked read-only lock.\n It must unlock it the same number of times before it is actually made\n available for other threads in the system (this is known as a \"recursive\n rwlock\").\n\n It is illegal to unlock a rwlock that has not been locked by the current\n thread, and doing so results in undefined behavior.\n\n \\param rwlock the rwlock to unlock.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UnlockRWLock(rwlock: *mut SDL_RWLock) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy a read/write lock created with SDL_CreateRWLock().\n\n This function must be called on any read/write lock that is no longer\n needed. Failure to destroy a rwlock will result in a system memory or\n resource leak. While it is safe to destroy a rwlock that is _unlocked_, it\n is not safe to attempt to destroy a locked rwlock, and may result in\n undefined behavior depending on the platform.\n\n \\param rwlock the rwlock to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRWLock\n \\sa SDL_LockRWLockForReading\n \\sa SDL_LockRWLockForWriting\n \\sa SDL_TryLockRWLockForReading\n \\sa SDL_TryLockRWLockForWriting\n \\sa SDL_UnlockRWLock"]
    pub fn SDL_DestroyRWLock(rwlock: *mut SDL_RWLock);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Semaphore {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a semaphore.\n\n This function creates a new semaphore and initializes it with the value\n `initial_value`. Each wait operation on the semaphore will atomically\n decrement the semaphore value and potentially block if the semaphore value\n is 0. Each post operation will atomically increment the semaphore value and\n wake waiting threads and allow them to retry the wait operation.\n\n \\param initial_value the starting value of the semaphore\n \\returns a new semaphore or NULL on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroySemaphore\n \\sa SDL_PostSemaphore\n \\sa SDL_TryWaitSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore\n \\sa SDL_WaitSemaphoreTimeout"]
    pub fn SDL_CreateSemaphore(initial_value: Uint32) -> *mut SDL_Semaphore;
}
extern "C" {
    #[doc = " Destroy a semaphore.\n\n It is not safe to destroy a semaphore if there are threads currently\n waiting on it.\n\n \\param sem the semaphore to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore\n \\sa SDL_PostSemaphore\n \\sa SDL_TryWaitSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore\n \\sa SDL_WaitSemaphoreTimeout"]
    pub fn SDL_DestroySemaphore(sem: *mut SDL_Semaphore);
}
extern "C" {
    #[doc = " Wait until a semaphore has a positive value and then decrements it.\n\n This function suspends the calling thread until either the semaphore\n pointed to by `sem` has a positive value or the call is interrupted by a\n signal or error. If the call is successful it will atomically decrement the\n semaphore value.\n\n This function is the equivalent of calling SDL_WaitSemaphoreTimeout() with\n a time length of `SDL_MUTEX_MAXWAIT`.\n\n \\param sem the semaphore wait on\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore\n \\sa SDL_DestroySemaphore\n \\sa SDL_PostSemaphore\n \\sa SDL_TryWaitSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore\n \\sa SDL_WaitSemaphoreTimeout"]
    pub fn SDL_WaitSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " See if a semaphore has a positive value and decrement it if it does.\n\n This function checks to see if the semaphore pointed to by `sem` has a\n positive value and atomically decrements the semaphore value if it does. If\n the semaphore doesn't have a positive value, the function immediately\n returns SDL_MUTEX_TIMEDOUT.\n\n \\param sem the semaphore to wait on\n \\returns 0 if the wait succeeds, `SDL_MUTEX_TIMEDOUT` if the wait would\n          block, or a negative error code on failure; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore\n \\sa SDL_DestroySemaphore\n \\sa SDL_PostSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore\n \\sa SDL_WaitSemaphoreTimeout"]
    pub fn SDL_TryWaitSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait until a semaphore has a positive value and then decrements it.\n\n This function suspends the calling thread until either the semaphore\n pointed to by `sem` has a positive value, the call is interrupted by a\n signal or error, or the specified time has elapsed. If the call is\n successful it will atomically decrement the semaphore value.\n\n \\param sem the semaphore to wait on\n \\param timeoutMS the length of the timeout, in milliseconds\n \\returns 0 if the wait succeeds, `SDL_MUTEX_TIMEDOUT` if the wait does not\n          succeed in the allotted time, or a negative error code on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore\n \\sa SDL_DestroySemaphore\n \\sa SDL_PostSemaphore\n \\sa SDL_TryWaitSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore"]
    pub fn SDL_WaitSemaphoreTimeout(
        sem: *mut SDL_Semaphore,
        timeoutMS: Sint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Atomically increment a semaphore's value and wake waiting threads.\n\n \\param sem the semaphore to increment\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore\n \\sa SDL_DestroySemaphore\n \\sa SDL_TryWaitSemaphore\n \\sa SDL_GetSemaphoreValue\n \\sa SDL_WaitSemaphore\n \\sa SDL_WaitSemaphoreTimeout"]
    pub fn SDL_PostSemaphore(sem: *mut SDL_Semaphore) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current value of a semaphore.\n\n \\param sem the semaphore to query\n \\returns the current value of the semaphore.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSemaphore"]
    pub fn SDL_GetSemaphoreValue(sem: *mut SDL_Semaphore) -> Uint32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Condition {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a condition variable.\n\n \\returns a new condition variable or NULL on failure; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BroadcastCondition\n \\sa SDL_SignalCondition\n \\sa SDL_WaitCondition\n \\sa SDL_WaitConditionTimeout\n \\sa SDL_DestroyCondition"]
    pub fn SDL_CreateCondition() -> *mut SDL_Condition;
}
extern "C" {
    #[doc = " Destroy a condition variable.\n\n \\param cond the condition variable to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BroadcastCondition\n \\sa SDL_SignalCondition\n \\sa SDL_WaitCondition\n \\sa SDL_WaitConditionTimeout\n \\sa SDL_CreateCondition"]
    pub fn SDL_DestroyCondition(cond: *mut SDL_Condition);
}
extern "C" {
    #[doc = " Restart one of the threads that are waiting on the condition variable.\n\n \\param cond the condition variable to signal\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BroadcastCondition\n \\sa SDL_WaitCondition\n \\sa SDL_WaitConditionTimeout\n \\sa SDL_CreateCondition\n \\sa SDL_DestroyCondition"]
    pub fn SDL_SignalCondition(cond: *mut SDL_Condition) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Restart all threads that are waiting on the condition variable.\n\n \\param cond the condition variable to signal\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SignalCondition\n \\sa SDL_WaitCondition\n \\sa SDL_WaitConditionTimeout\n \\sa SDL_CreateCondition\n \\sa SDL_DestroyCondition"]
    pub fn SDL_BroadcastCondition(cond: *mut SDL_Condition) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait until a condition variable is signaled.\n\n This function unlocks the specified `mutex` and waits for another thread to\n call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\n variable `cond`. Once the condition variable is signaled, the mutex is\n re-locked and the function returns.\n\n The mutex must be locked before calling this function. Locking the mutex\n recursively (more than once) is not supported and leads to undefined\n behavior.\n\n This function is the equivalent of calling SDL_WaitConditionTimeout() with\n a time length of `SDL_MUTEX_MAXWAIT`.\n\n \\param cond the condition variable to wait on\n \\param mutex the mutex used to coordinate thread access\n \\returns 0 when it is signaled or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BroadcastCondition\n \\sa SDL_SignalCondition\n \\sa SDL_WaitConditionTimeout\n \\sa SDL_CreateCondition\n \\sa SDL_DestroyCondition"]
    pub fn SDL_WaitCondition(
        cond: *mut SDL_Condition,
        mutex: *mut SDL_Mutex,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait until a condition variable is signaled or a certain time has passed.\n\n This function unlocks the specified `mutex` and waits for another thread to\n call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\n variable `cond`, or for the specified time to elapse. Once the condition\n variable is signaled or the time elapsed, the mutex is re-locked and the\n function returns.\n\n The mutex must be locked before calling this function. Locking the mutex\n recursively (more than once) is not supported and leads to undefined\n behavior.\n\n \\param cond the condition variable to wait on\n \\param mutex the mutex used to coordinate thread access\n \\param timeoutMS the maximum time to wait, in milliseconds, or\n                  `SDL_MUTEX_MAXWAIT` to wait indefinitely\n \\returns 0 if the condition variable is signaled, `SDL_MUTEX_TIMEDOUT` if\n          the condition is not signaled in the allotted time, or a negative\n          error code on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BroadcastCondition\n \\sa SDL_SignalCondition\n \\sa SDL_WaitCondition\n \\sa SDL_CreateCondition\n \\sa SDL_DestroyCondition"]
    pub fn SDL_WaitConditionTimeout(
        cond: *mut SDL_Condition,
        mutex: *mut SDL_Mutex,
        timeoutMS: Sint32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Thread {
    _unused: [u8; 0],
}
pub type SDL_threadID = ::std::os::raw::c_ulong;
pub type SDL_TLSID = ::std::os::raw::c_uint;
pub const SDL_ThreadPriority_SDL_THREAD_PRIORITY_LOW: SDL_ThreadPriority = 0;
pub const SDL_ThreadPriority_SDL_THREAD_PRIORITY_NORMAL: SDL_ThreadPriority = 1;
pub const SDL_ThreadPriority_SDL_THREAD_PRIORITY_HIGH: SDL_ThreadPriority = 2;
pub const SDL_ThreadPriority_SDL_THREAD_PRIORITY_TIME_CRITICAL: SDL_ThreadPriority = 3;
#[doc = "  The SDL thread priority.\n\n  SDL will make system changes as necessary in order to apply the thread priority.\n  Code which attempts to control thread state related to priority should be aware\n  that calling SDL_SetThreadPriority may alter such state.\n  SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of this behavior.\n\n  \\note On many systems you require special privileges to set high or time critical priority."]
pub type SDL_ThreadPriority = ::std::os::raw::c_uint;
#[doc = " The function passed to SDL_CreateThread().\n\n \\param data what was passed as `data` to SDL_CreateThread()\n \\returns a value that can be reported through SDL_WaitThread()."]
pub type SDL_ThreadFunction = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " Create a new thread with a default stack size.\n\n This is equivalent to calling:\n\n ```c\n SDL_CreateThreadWithStackSize(fn, name, 0, data);\n ```\n\n \\param fn the SDL_ThreadFunction function to call in the new thread\n \\param name the name of the thread\n \\param data a pointer that is passed to `fn`\n \\returns an opaque pointer to the new thread object on success, NULL if the\n          new thread could not be created; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateThreadWithStackSize\n \\sa SDL_WaitThread"]
    pub fn SDL_CreateThread(
        fn_: SDL_ThreadFunction,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut SDL_Thread;
}
extern "C" {
    #[doc = " Create a new thread with a specific stack size.\n\n SDL makes an attempt to report `name` to the system, so that debuggers can\n display it. Not all platforms support this.\n\n Thread naming is a little complicated: Most systems have very small limits\n for the string length (Haiku has 32 bytes, Linux currently has 16, Visual\n C++ 6.0 has _nine_!), and possibly other arbitrary rules. You'll have to\n see what happens with your system's debugger. The name should be UTF-8 (but\n using the naming limits of C identifiers is a better bet). There are no\n requirements for thread naming conventions, so long as the string is\n null-terminated UTF-8, but these guidelines are helpful in choosing a name:\n\n https://stackoverflow.com/questions/149932/naming-conventions-for-threads\n\n If a system imposes requirements, SDL will try to munge the string for it\n (truncate, etc), but the original string contents will be available from\n SDL_GetThreadName().\n\n The size (in bytes) of the new stack can be specified. Zero means \"use the\n system default\" which might be wildly different between platforms. x86\n Linux generally defaults to eight megabytes, an embedded device might be a\n few kilobytes instead. You generally need to specify a stack that is a\n multiple of the system's page size (in many cases, this is 4 kilobytes, but\n check your system documentation).\n\n In SDL 2.1, stack size will be folded into the original SDL_CreateThread\n function, but for backwards compatibility, this is currently a separate\n function.\n\n \\param fn the SDL_ThreadFunction function to call in the new thread\n \\param name the name of the thread\n \\param stacksize the size, in bytes, to allocate for the new thread stack.\n \\param data a pointer that is passed to `fn`\n \\returns an opaque pointer to the new thread object on success, NULL if the\n          new thread could not be created; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_WaitThread"]
    pub fn SDL_CreateThreadWithStackSize(
        fn_: SDL_ThreadFunction,
        name: *const ::std::os::raw::c_char,
        stacksize: usize,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut SDL_Thread;
}
extern "C" {
    #[doc = " Get the thread name as it was specified in SDL_CreateThread().\n\n This is internal memory, not to be freed by the caller, and remains valid\n until the specified thread is cleaned up by SDL_WaitThread().\n\n \\param thread the thread to query\n \\returns a pointer to a UTF-8 string that names the specified thread, or\n          NULL if it doesn't have a name.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateThread"]
    pub fn SDL_GetThreadName(thread: *mut SDL_Thread) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the thread identifier for the current thread.\n\n This thread identifier is as reported by the underlying operating system.\n If SDL is running on a platform that does not support threads the return\n value will always be zero.\n\n This function also returns a valid thread ID when called from the main\n thread.\n\n \\returns the ID of the current thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetThreadID"]
    pub fn SDL_ThreadID() -> SDL_threadID;
}
extern "C" {
    #[doc = " Get the thread identifier for the specified thread.\n\n This thread identifier is as reported by the underlying operating system.\n If SDL is running on a platform that does not support threads the return\n value will always be zero.\n\n \\param thread the thread to query\n \\returns the ID of the specified thread, or the ID of the current thread if\n          `thread` is NULL.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ThreadID"]
    pub fn SDL_GetThreadID(thread: *mut SDL_Thread) -> SDL_threadID;
}
extern "C" {
    #[doc = " Set the priority for the current thread.\n\n Note that some platforms will not let you alter the priority (or at least,\n promote the thread to a higher priority) at all, and some require you to be\n an administrator account. Be prepared for this to fail.\n\n \\param priority the SDL_ThreadPriority to set\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetThreadPriority(priority: SDL_ThreadPriority) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait for a thread to finish.\n\n Threads that haven't been detached will remain (as a \"zombie\") until this\n function cleans them up. Not doing so is a resource leak.\n\n Once a thread has been cleaned up through this function, the SDL_Thread\n that references it becomes invalid and should not be referenced again. As\n such, only one thread may call SDL_WaitThread() on another.\n\n The return code for the thread function is placed in the area pointed to by\n `status`, if `status` is not NULL.\n\n You may not wait on a thread that has been used in a call to\n SDL_DetachThread(). Use either that function or this one, but not both, or\n behavior is undefined.\n\n It is safe to pass a NULL thread to this function; it is a no-op.\n\n Note that the thread pointer is freed by this function and is not valid\n afterward.\n\n \\param thread the SDL_Thread pointer that was returned from the\n               SDL_CreateThread() call that started this thread\n \\param status pointer to an integer that will receive the value returned\n               from the thread function by its 'return', or NULL to not\n               receive such value back.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateThread\n \\sa SDL_DetachThread"]
    pub fn SDL_WaitThread(thread: *mut SDL_Thread, status: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Let a thread clean up on exit without intervention.\n\n A thread may be \"detached\" to signify that it should not remain until\n another thread has called SDL_WaitThread() on it. Detaching a thread is\n useful for long-running threads that nothing needs to synchronize with or\n further manage. When a detached thread is done, it simply goes away.\n\n There is no way to recover the return code of a detached thread. If you\n need this, don't detach the thread and instead use SDL_WaitThread().\n\n Once a thread is detached, you should usually assume the SDL_Thread isn't\n safe to reference again, as it will become invalid immediately upon the\n detached thread's exit, instead of remaining until someone has called\n SDL_WaitThread() to finally clean it up. As such, don't detach the same\n thread more than once.\n\n If a thread has already exited when passed to SDL_DetachThread(), it will\n stop waiting for a call to SDL_WaitThread() and clean up immediately. It is\n not safe to detach a thread that might be used with SDL_WaitThread().\n\n You may not call SDL_WaitThread() on a thread that has been detached. Use\n either that function or this one, but not both, or behavior is undefined.\n\n It is safe to pass NULL to this function; it is a no-op.\n\n \\param thread the SDL_Thread pointer that was returned from the\n               SDL_CreateThread() call that started this thread\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateThread\n \\sa SDL_WaitThread"]
    pub fn SDL_DetachThread(thread: *mut SDL_Thread);
}
extern "C" {
    #[doc = " Create a piece of thread-local storage.\n\n This creates an identifier that is globally visible to all threads but\n refers to data that is thread-specific.\n\n \\returns the newly created thread local storage identifier or 0 on error.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTLS\n \\sa SDL_SetTLS"]
    pub fn SDL_CreateTLS() -> SDL_TLSID;
}
extern "C" {
    #[doc = " Get the current thread's value associated with a thread local storage ID.\n\n \\param id the thread local storage ID\n \\returns the value associated with the ID for the current thread or NULL if\n          no value has been set; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTLS\n \\sa SDL_SetTLS"]
    pub fn SDL_GetTLS(id: SDL_TLSID) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Set the current thread's value associated with a thread local storage ID.\n\n The function prototype for `destructor` is:\n\n ```c\n void destructor(void *value)\n ```\n\n where its parameter `value` is what was passed as `value` to SDL_SetTLS().\n\n \\param id the thread local storage ID\n \\param value the value to associate with the ID for the current thread\n \\param destructor a function called when the thread exits, to free the\n                   value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTLS\n \\sa SDL_GetTLS"]
    pub fn SDL_SetTLS(
        id: SDL_TLSID,
        value: *const ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Cleanup all TLS data for this thread.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_CleanupTLS();
}
#[doc = " This is the read/write operation structure -- very basic."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_RWops {
    #[doc = "  Return the number of bytes in this rwops\n\n  \\return the total size of the data stream, or -1 on error."]
    pub size: ::std::option::Option<unsafe extern "C" fn(context: *mut SDL_RWops) -> Sint64>,
    #[doc = "  Seek to \\c offset relative to \\c whence, one of stdio's whence values:\n  SDL_RW_SEEK_SET, SDL_RW_SEEK_CUR, SDL_RW_SEEK_END\n\n  \\return the final offset in the data stream, or -1 on error."]
    pub seek: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            offset: Sint64,
            whence: ::std::os::raw::c_int,
        ) -> Sint64,
    >,
    #[doc = "  Read up to \\c size bytes from the data stream to the area pointed\n  at by \\c ptr.\n\n  \\return the number of bytes read"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
    #[doc = "  Write exactly \\c size bytes from the area pointed at by \\c ptr\n  to data stream.\n\n  \\return the number of bytes written"]
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut SDL_RWops,
            ptr: *const ::std::os::raw::c_void,
            size: usize,
        ) -> usize,
    >,
    #[doc = "  Close and free an allocated SDL_RWops structure.\n\n  \\return 0 if successful or -1 on write error when flushing data."]
    pub close: ::std::option::Option<
        unsafe extern "C" fn(context: *mut SDL_RWops) -> ::std::os::raw::c_int,
    >,
    pub type_: Uint32,
    pub status: Uint32,
    pub hidden: SDL_RWops__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_RWops__bindgen_ty_1 {
    pub stdio: SDL_RWops__bindgen_ty_1__bindgen_ty_1,
    pub mem: SDL_RWops__bindgen_ty_1__bindgen_ty_2,
    pub unknown: SDL_RWops__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_1 {
    pub autoclose: SDL_bool,
    pub fp: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoclose) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(autoclose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_2 {
    pub base: *mut Uint8,
    pub here: *mut Uint8,
    pub stop: *mut Uint8,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).here) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(here)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(stop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RWops__bindgen_ty_1__bindgen_ty_3 {
    pub data1: *mut ::std::os::raw::c_void,
    pub data2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(data2)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(stdio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops__bindgen_ty_1),
            "::",
            stringify!(unknown)
        )
    );
}
#[test]
fn bindgen_test_layout_SDL_RWops() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RWops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RWops>(),
        72usize,
        concat!("Size of: ", stringify!(SDL_RWops))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RWops>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RWops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hidden) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RWops),
            "::",
            stringify!(hidden)
        )
    );
}
extern "C" {
    #[doc = " Use this function to create a new SDL_RWops structure for reading from\n and/or writing to a named file.\n\n The `mode` string is treated roughly the same as in a call to the C\n library's fopen(), even if SDL doesn't happen to use fopen() behind the\n scenes.\n\n Available `mode` strings:\n\n - \"r\": Open a file for reading. The file must exist.\n - \"w\": Create an empty file for writing. If a file with the same name\n   already exists its content is erased and the file is treated as a new\n   empty file.\n - \"a\": Append to a file. Writing operations append data at the end of the\n   file. The file is created if it does not exist.\n - \"r+\": Open a file for update both reading and writing. The file must\n   exist.\n - \"w+\": Create an empty file for both reading and writing. If a file with\n   the same name already exists its content is erased and the file is\n   treated as a new empty file.\n - \"a+\": Open a file for reading and appending. All writing operations are\n   performed at the end of the file, protecting the previous content to be\n   overwritten. You can reposition (fseek, rewind) the internal pointer to\n   anywhere in the file for reading, but writing operations will move it\n   back to the end of file. The file is created if it does not exist.\n\n **NOTE**: In order to open a file as a binary file, a \"b\" character has to\n be included in the `mode` string. This additional \"b\" character can either\n be appended at the end of the string (thus making the following compound\n modes: \"rb\", \"wb\", \"ab\", \"r+b\", \"w+b\", \"a+b\") or be inserted between the\n letter and the \"+\" sign for the mixed modes (\"rb+\", \"wb+\", \"ab+\").\n Additional characters may follow the sequence, although they should have no\n effect. For example, \"t\" is sometimes appended to make explicit the file is\n a text file.\n\n This function supports Unicode filenames, but they must be encoded in UTF-8\n format, regardless of the underlying operating system.\n\n As a fallback, SDL_RWFromFile() will transparently open a matching filename\n in an Android app's `assets`.\n\n Closing the SDL_RWops will close the file handle SDL is holding internally.\n\n \\param file a UTF-8 string representing the filename to open\n \\param mode an ASCII string representing the mode to be used for opening\n             the file.\n \\returns a pointer to the SDL_RWops structure that is created, or NULL on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek\n \\sa SDL_RWtell\n \\sa SDL_RWwrite"]
    pub fn SDL_RWFromFile(
        file: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut SDL_RWops;
}
extern "C" {
    #[doc = " Use this function to prepare a read-write memory buffer for use with\n SDL_RWops.\n\n This function sets up an SDL_RWops struct based on a memory area of a\n certain size, for both read and write access.\n\n This memory buffer is not copied by the RWops; the pointer you provide must\n remain valid until you close the stream. Closing the stream will not free\n the original buffer.\n\n If you need to make sure the RWops never writes to the memory buffer, you\n should use SDL_RWFromConstMem() with a read-only buffer of memory instead.\n\n \\param mem a pointer to a buffer to feed an SDL_RWops stream\n \\param size the buffer size, in bytes\n \\returns a pointer to a new SDL_RWops structure, or NULL if it fails; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek\n \\sa SDL_RWtell\n \\sa SDL_RWwrite"]
    pub fn SDL_RWFromMem(mem: *mut ::std::os::raw::c_void, size: usize) -> *mut SDL_RWops;
}
extern "C" {
    #[doc = " Use this function to prepare a read-only memory buffer for use with RWops.\n\n This function sets up an SDL_RWops struct based on a memory area of a\n certain size. It assumes the memory area is not writable.\n\n Attempting to write to this RWops stream will report an error without\n writing to the memory buffer.\n\n This memory buffer is not copied by the RWops; the pointer you provide must\n remain valid until you close the stream. Closing the stream will not free\n the original buffer.\n\n If you need to write to a memory buffer, you should use SDL_RWFromMem()\n with a writable buffer of memory instead.\n\n \\param mem a pointer to a read-only buffer to feed an SDL_RWops stream\n \\param size the buffer size, in bytes\n \\returns a pointer to a new SDL_RWops structure, or NULL if it fails; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek\n \\sa SDL_RWtell"]
    pub fn SDL_RWFromConstMem(mem: *const ::std::os::raw::c_void, size: usize) -> *mut SDL_RWops;
}
extern "C" {
    #[doc = " Use this function to allocate an empty, unpopulated SDL_RWops structure.\n\n Applications do not need to use this function unless they are providing\n their own SDL_RWops implementation. If you just need an SDL_RWops to\n read/write a common data source, you should use the built-in\n implementations in SDL, like SDL_RWFromFile() or SDL_RWFromMem(), etc.\n\n You must free the returned pointer with SDL_DestroyRW(). Depending on your\n operating system and compiler, there may be a difference between the\n malloc() and free() your program uses and the versions SDL calls\n internally. Trying to mix the two can cause crashing such as segmentation\n faults. Since all SDL_RWops must free themselves when their **close**\n method is called, all SDL_RWops must be allocated through this function, so\n they can all be freed correctly with SDL_DestroyRW().\n\n \\returns a pointer to the allocated memory on success, or NULL on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyRW"]
    pub fn SDL_CreateRW() -> *mut SDL_RWops;
}
extern "C" {
    #[doc = " Use this function to free an SDL_RWops structure allocated by\n SDL_CreateRW().\n\n Applications do not need to use this function unless they are providing\n their own SDL_RWops implementation. If you just need an SDL_RWops to\n read/write a common data source, you should use the built-in\n implementations in SDL, like SDL_RWFromFile() or SDL_RWFromMem(), etc, and\n call the **close** method on those SDL_RWops pointers when you are done\n with them.\n\n Only use SDL_DestroyRW() on pointers returned by SDL_CreateRW(). The\n pointer is invalid as soon as this function returns. Any extra memory\n allocated during creation of the SDL_RWops is not freed by SDL_DestroyRW();\n the programmer must be responsible for managing that memory in their\n **close** method.\n\n \\param context the SDL_RWops structure to be freed\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRW"]
    pub fn SDL_DestroyRW(context: *mut SDL_RWops);
}
extern "C" {
    #[doc = " Use this function to get the size of the data stream in an SDL_RWops.\n\n \\param context the SDL_RWops to get the size of the data stream from\n \\returns the size of the data stream in the SDL_RWops on success or a\n          negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RWsize(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    #[doc = " Seek within an SDL_RWops data stream.\n\n This function seeks to byte `offset`, relative to `whence`.\n\n `whence` may be any of the following values:\n\n - `SDL_RW_SEEK_SET`: seek from the beginning of data\n - `SDL_RW_SEEK_CUR`: seek relative to current read point\n - `SDL_RW_SEEK_END`: seek relative to the end of data\n\n If this stream can not seek, it will return -1.\n\n SDL_RWseek() is actually a wrapper function that calls the SDL_RWops's\n `seek` method appropriately, to simplify application development.\n\n \\param context a pointer to an SDL_RWops structure\n \\param offset an offset in bytes, relative to **whence** location; can be\n               negative\n \\param whence any of `SDL_RW_SEEK_SET`, `SDL_RW_SEEK_CUR`,\n               `SDL_RW_SEEK_END`\n \\returns the final offset in the data stream after the seek or a negative\n          error code on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWtell\n \\sa SDL_RWwrite"]
    pub fn SDL_RWseek(
        context: *mut SDL_RWops,
        offset: Sint64,
        whence: ::std::os::raw::c_int,
    ) -> Sint64;
}
extern "C" {
    #[doc = " Determine the current read/write offset in an SDL_RWops data stream.\n\n SDL_RWtell is actually a wrapper function that calls the SDL_RWops's `seek`\n method, with an offset of 0 bytes from `SDL_RW_SEEK_CUR`, to simplify\n application development.\n\n \\param context an SDL_RWops data stream object from which to get the\n                current offset\n \\returns the current offset in the stream, or -1 if the information can not\n          be determined.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek\n \\sa SDL_RWwrite"]
    pub fn SDL_RWtell(context: *mut SDL_RWops) -> Sint64;
}
extern "C" {
    #[doc = " Read from a data source.\n\n This function reads up `size` bytes from the data source to the area\n pointed at by `ptr`. This function may read less bytes than requested. It\n will return zero when the data stream is completely read, or -1 on error.\n For streams that support non-blocking operation, if nothing was read\n because it would require blocking, this function returns -2 to distinguish\n that this is not an error or end-of-file, and the caller can try again\n later.\n\n SDL_RWread() is actually a function wrapper that calls the SDL_RWops's\n `read` method appropriately, to simplify application development.\n\n It is an error to specify a negative `size`, but this parameter is signed\n so you definitely cannot overflow the return value on a successful run with\n enormous amounts of data.\n\n \\param context a pointer to an SDL_RWops structure\n \\param ptr a pointer to a buffer to read data into\n \\param size the number of bytes to read from the data source.\n \\returns the number of bytes read, or 0 on end of file or other error.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWseek\n \\sa SDL_RWwrite"]
    pub fn SDL_RWread(
        context: *mut SDL_RWops,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Write to an SDL_RWops data stream.\n\n This function writes exactly `size` bytes from the area pointed at by `ptr`\n to the stream. If this fails for any reason, it'll return less than `size`\n to demonstrate how far the write progressed. On success, it returns `num`.\n\n On error, this function still attempts to write as much as possible, so it\n might return a positive value less than the requested write size. If the\n function failed to write anything and there was an actual error, it will\n return -1. For streams that support non-blocking operation, if nothing was\n written because it would require blocking, this function returns -2 to\n distinguish that this is not an error and the caller can try again later.\n\n SDL_RWwrite is actually a function wrapper that calls the SDL_RWops's\n `write` method appropriately, to simplify application development.\n\n It is an error to specify a negative `size`, but this parameter is signed\n so you definitely cannot overflow the return value on a successful run with\n enormous amounts of data.\n\n \\param context a pointer to an SDL_RWops structure\n \\param ptr a pointer to a buffer containing data to write\n \\param size the number of bytes to write\n \\returns the number of bytes written, which will be less than `num` on\n          error; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWclose\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek"]
    pub fn SDL_RWwrite(
        context: *mut SDL_RWops,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Close and free an allocated SDL_RWops structure.\n\n SDL_RWclose() closes and cleans up the SDL_RWops stream. It releases any\n resources used by the stream and frees the SDL_RWops itself with\n SDL_DestroyRW(). This returns 0 on success, or -1 if the stream failed to\n flush to its output (e.g. to disk).\n\n Note that if this fails to flush the stream to disk, this function reports\n an error, but the SDL_RWops is still invalid once this function returns.\n\n \\param context SDL_RWops structure to close\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RWFromConstMem\n \\sa SDL_RWFromFile\n \\sa SDL_RWFromMem\n \\sa SDL_RWread\n \\sa SDL_RWseek\n \\sa SDL_RWwrite"]
    pub fn SDL_RWclose(context: *mut SDL_RWops) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Load all the data from an SDL data stream.\n\n The data is allocated with a zero byte at the end (null terminated) for\n convenience. This extra byte is not included in the value reported via\n `datasize`.\n\n The data should be freed with SDL_free().\n\n \\param src the SDL_RWops to read all available data from\n \\param datasize if not NULL, will store the number of bytes read\n \\param freesrc if SDL_TRUE, calls SDL_RWclose() on `src` before returning,\n                even in the case of an error\n \\returns the data, or NULL if there was an error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LoadFile_RW(
        src: *mut SDL_RWops,
        datasize: *mut usize,
        freesrc: SDL_bool,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Load all the data from a file path.\n\n The data is allocated with a zero byte at the end (null terminated) for\n convenience. This extra byte is not included in the value reported via\n `datasize`.\n\n The data should be freed with SDL_free().\n\n \\param file the path to read all available data from\n \\param datasize if not NULL, will store the number of bytes read\n \\returns the data, or NULL if there was an error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LoadFile(
        file: *const ::std::os::raw::c_char,
        datasize: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Use this function to read a byte from an SDL_RWops.\n\n \\param src the SDL_RWops to read from\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on success or SDL_FALSE on failure; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU8(src: *mut SDL_RWops, value: *mut Uint8) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 16 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU16LE(src: *mut SDL_RWops, value: *mut Uint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 16 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS16LE(src: *mut SDL_RWops, value: *mut Sint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 16 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU16BE(src: *mut SDL_RWops, value: *mut Uint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 16 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS16BE(src: *mut SDL_RWops, value: *mut Sint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 32 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU32LE(src: *mut SDL_RWops, value: *mut Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 32 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS32LE(src: *mut SDL_RWops, value: *mut Sint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 32 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU32BE(src: *mut SDL_RWops, value: *mut Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 32 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS32BE(src: *mut SDL_RWops, value: *mut Sint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 64 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU64LE(src: *mut SDL_RWops, value: *mut Uint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 64 bits of little-endian data from an SDL_RWops\n and return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS64LE(src: *mut SDL_RWops, value: *mut Sint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 64 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadU64BE(src: *mut SDL_RWops, value: *mut Uint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to read 64 bits of big-endian data from an SDL_RWops and\n return in native format.\n\n SDL byteswaps the data only if necessary, so the data returned will be in\n the native byte order.\n\n \\param src the stream from which to read data\n \\param value a pointer filled in with the data read\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReadS64BE(src: *mut SDL_RWops, value: *mut Sint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write a byte to an SDL_RWops.\n\n \\param dst the SDL_RWops to write to\n \\param value the byte value to write\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU8(dst: *mut SDL_RWops, value: Uint8) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 16 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU16LE(dst: *mut SDL_RWops, value: Uint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 16 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteS16LE(dst: *mut SDL_RWops, value: Sint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 16 bits in native format to an SDL_RWops as\n big-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in big-endian format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU16BE(dst: *mut SDL_RWops, value: Uint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 16 bits in native format to an SDL_RWops as\n big-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in big-endian format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteS16BE(dst: *mut SDL_RWops, value: Sint16) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 32 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU32LE(dst: *mut SDL_RWops, value: Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 32 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteS32LE(dst: *mut SDL_RWops, value: Sint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 32 bits in native format to an SDL_RWops as\n big-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in big-endian format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU32BE(dst: *mut SDL_RWops, value: Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 32 bits in native format to an SDL_RWops as\n big-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in big-endian format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteS32BE(dst: *mut SDL_RWops, value: Sint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 64 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU64LE(dst: *mut SDL_RWops, value: Uint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 64 bits in native format to an SDL_RWops as\n little-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in little-endian\n format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteS64LE(dst: *mut SDL_RWops, value: Sint64) -> SDL_bool;
}
extern "C" {
    #[doc = " Use this function to write 64 bits in native format to an SDL_RWops as\n big-endian data.\n\n SDL byteswaps the data only if necessary, so the application always\n specifies native format, and the data written will be in big-endian format.\n\n \\param dst the stream to which data will be written\n \\param value the data to be written, in native format\n \\returns SDL_TRUE on successful write, SDL_FALSE on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_WriteU64BE(dst: *mut SDL_RWops, value: Uint64) -> SDL_bool;
}
#[doc = "  \\brief Audio format flags.\n\n  These are what the 16 bits in SDL_AudioFormat currently mean...\n  (Unspecified bits are always zero).\n\n  \\verbatim\n++-----------------------sample is signed if set\n||\n||       ++-----------sample is bigendian if set\n||       ||\n||       ||          ++---sample is float if set\n||       ||          ||\n||       ||          || +---sample bit size---+\n||       ||          || |                     |\n15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00\n\\endverbatim\n\n  There are macros in SDL 2.0 and later to query these bits."]
pub type SDL_AudioFormat = Uint16;
#[doc = " SDL Audio Device instance IDs."]
pub type SDL_AudioDeviceID = Uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioSpec {
    #[doc = "< Audio data format"]
    pub format: SDL_AudioFormat,
    #[doc = "< Number of channels: 1 mono, 2 stereo, etc"]
    pub channels: ::std::os::raw::c_int,
    #[doc = "< sample rate: sample frames per second"]
    pub freq: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_AudioSpec() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AudioSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AudioSpec>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AudioSpec>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_AudioSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioSpec),
            "::",
            stringify!(freq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioStream {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Use this function to get the number of built-in audio drivers.\n\n This function returns a hardcoded number. This never returns a negative\n value; if there are no drivers compiled into this build of SDL, this\n function returns zero. The presence of a driver in this list does not mean\n it will function, it just means SDL is capable of interacting with that\n interface. For example, a build of SDL might have esound support, but if\n there's no esound server available, SDL's esound driver would fail if used.\n\n By default, SDL tries all drivers, in its preferred order, until one is\n found to be usable.\n\n \\returns the number of built-in audio drivers.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetAudioDriver"]
    pub fn SDL_GetNumAudioDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Use this function to get the name of a built in audio driver.\n\n The list of audio drivers is given in the order that they are normally\n initialized by default; the drivers that seem more reasonable to choose\n first (as far as the SDL developers believe) are earlier in the list.\n\n The names of drivers are all simple, low-ASCII identifiers, like \"alsa\",\n \"coreaudio\" or \"xaudio2\". These never have Unicode characters, and are not\n meant to be proper names.\n\n \\param index the index of the audio driver; the value ranges from 0 to\n              SDL_GetNumAudioDrivers() - 1\n \\returns the name of the audio driver at the requested index, or NULL if an\n          invalid index was specified.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumAudioDrivers"]
    pub fn SDL_GetAudioDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the name of the current audio driver.\n\n The returned string points to internal static memory and thus never becomes\n invalid, even if you quit the audio subsystem and initialize a new driver\n (although such a case would return a different static string from another\n call to this function, of course). As such, you should not modify or free\n the returned string.\n\n \\returns the name of the current audio driver or NULL if no driver has been\n          initialized.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetCurrentAudioDriver() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get a list of currently-connected audio output devices.\n\n This returns of list of available devices that play sound, perhaps to\n speakers or headphones (\"output\" devices). If you want devices that record\n audio, like a microphone (\"capture\" devices), use\n SDL_GetAudioCaptureDevices() instead.\n\n This only returns a list of physical devices; it will not have any device\n IDs returned by SDL_OpenAudioDevice().\n\n \\param count a pointer filled in with the number of devices returned\n \\returns a 0 terminated array of device instance IDs which should be freed\n          with SDL_free(), or NULL on error; call SDL_GetError() for more\n          details.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenAudioDevice\n \\sa SDL_GetAudioCaptureDevices"]
    pub fn SDL_GetAudioOutputDevices(count: *mut ::std::os::raw::c_int) -> *mut SDL_AudioDeviceID;
}
extern "C" {
    #[doc = " Get a list of currently-connected audio capture devices.\n\n This returns of list of available devices that record audio, like a\n microphone (\"capture\" devices). If you want devices that play sound,\n perhaps to speakers or headphones (\"output\" devices), use\n SDL_GetAudioOutputDevices() instead.\n\n This only returns a list of physical devices; it will not have any device\n IDs returned by SDL_OpenAudioDevice().\n\n \\param count a pointer filled in with the number of devices returned\n \\returns a 0 terminated array of device instance IDs which should be freed\n          with SDL_free(), or NULL on error; call SDL_GetError() for more\n          details.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenAudioDevice\n \\sa SDL_GetAudioOutputDevices"]
    pub fn SDL_GetAudioCaptureDevices(count: *mut ::std::os::raw::c_int) -> *mut SDL_AudioDeviceID;
}
extern "C" {
    #[doc = " Get the human-readable name of a specific audio device.\n\n The string returned by this function is UTF-8 encoded. The caller should\n call SDL_free on the return value when done with it.\n\n \\param devid the instance ID of the device to query.\n \\returns the name of the audio device, or NULL on error.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumAudioDevices\n \\sa SDL_GetDefaultAudioInfo"]
    pub fn SDL_GetAudioDeviceName(devid: SDL_AudioDeviceID) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the current audio format of a specific audio device.\n\n For an opened device, this will report the format the device is currently\n using. If the device isn't yet opened, this will report the device's\n preferred format (or a reasonable default if this can't be determined).\n\n You may also specify SDL_AUDIO_DEVICE_DEFAULT_OUTPUT or\n SDL_AUDIO_DEVICE_DEFAULT_CAPTURE here, which is useful for getting a\n reasonable recommendation before opening the system-recommended default\n device.\n\n \\param devid the instance ID of the device to query.\n \\param spec On return, will be filled with device details.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetAudioDeviceFormat(
        devid: SDL_AudioDeviceID,
        spec: *mut SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Open a specific audio device.\n\n You can open both output and capture devices through this function. Output\n devices will take data from bound audio streams, mix it, and send it to the\n hardware. Capture devices will feed any bound audio streams with a copy of\n any incoming data.\n\n An opened audio device starts out with no audio streams bound. To start\n audio playing, bind a stream and supply audio data to it. Unlike SDL2,\n there is no audio callback; you only bind audio streams and make sure they\n have data flowing into them (although, as an optional feature, each audio\n stream may have its own callback, which can be used to simulate SDL2's\n semantics).\n\n If you don't care about opening a specific device, pass a `devid` of either\n `SDL_AUDIO_DEVICE_DEFAULT_OUTPUT` or `SDL_AUDIO_DEVICE_DEFAULT_CAPTURE`. In\n this case, SDL will try to pick the most reasonable default, and may also\n switch between physical devices seamlessly later, if the most reasonable\n default changes during the lifetime of this opened device (user changed the\n default in the OS's system preferences, the default got unplugged so the\n system jumped to a new default, the user plugged in headphones on a mobile\n device, etc). Unless you have a good reason to choose a specific device,\n this is probably what you want.\n\n You may request a specific format for the audio device, but there is no\n promise the device will honor that request for several reasons. As such,\n it's only meant to be a hint as to what data your app will provide. Audio\n streams will accept data in whatever format you specify and manage\n conversion for you as appropriate. SDL_GetAudioDeviceFormat can tell you\n the preferred format for the device before opening and the actual format\n the device is using after opening.\n\n It's legal to open the same device ID more than once; each successful open\n will generate a new logical SDL_AudioDeviceID that is managed separately\n from others on the same physical device. This allows libraries to open a\n device separately from the main app and bind its own streams without\n conflicting.\n\n It is also legal to open a device ID returned by a previous call to this\n function; doing so just creates another logical device on the same physical\n device. This may be useful for making logical groupings of audio streams.\n\n This function returns the opened device ID on success. This is a new,\n unique SDL_AudioDeviceID that represents a logical device.\n\n Some backends might offer arbitrary devices (for example, a networked audio\n protocol that can connect to an arbitrary server). For these, as a change\n from SDL2, you should open a default device ID and use an SDL hint to\n specify the target if you care, or otherwise let the backend figure out a\n reasonable default. Most backends don't offer anything like this, and often\n this would be an end user setting an environment variable for their custom\n need, and not something an application should specifically manage.\n\n When done with an audio device, possibly at the end of the app's life, one\n should call SDL_CloseAudioDevice() on the returned device id.\n\n \\param devid the device instance id to open, or\n              SDL_AUDIO_DEVICE_DEFAULT_OUTPUT or\n              SDL_AUDIO_DEVICE_DEFAULT_CAPTURE for the most reasonable\n              default device.\n \\param spec the requested device configuration. Can be NULL to use\n             reasonable defaults.\n \\returns The device ID on success, 0 on error; call SDL_GetError() for more\n          information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CloseAudioDevice\n \\sa SDL_GetAudioDeviceFormat"]
    pub fn SDL_OpenAudioDevice(
        devid: SDL_AudioDeviceID,
        spec: *const SDL_AudioSpec,
    ) -> SDL_AudioDeviceID;
}
extern "C" {
    #[doc = " Use this function to pause audio playback on a specified device.\n\n This function pauses audio processing for a given device. Any bound audio\n streams will not progress, and no audio will be generated. Pausing one\n device does not prevent other unpaused devices from running.\n\n Unlike in SDL2, audio devices start in an _unpaused_ state, since an app\n has to bind a stream before any audio will flow. Pausing a paused device is\n a legal no-op.\n\n Pausing a device can be useful to halt all audio without unbinding all the\n audio streams. This might be useful while a game is paused, or a level is\n loading, etc.\n\n Physical devices can not be paused or unpaused, only logical devices\n created through SDL_OpenAudioDevice() can be.\n\n \\param dev a device opened by SDL_OpenAudioDevice()\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ResumeAudioDevice\n \\sa SDL_IsAudioDevicePaused"]
    pub fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Use this function to unpause audio playback on a specified device.\n\n This function unpauses audio processing for a given device that has\n previously been paused with SDL_PauseAudioDevice(). Once unpaused, any\n bound audio streams will begin to progress again, and audio can be\n generated.\n\n Unlike in SDL2, audio devices start in an _unpaused_ state, since an app\n has to bind a stream before any audio will flow. Unpausing an unpaused\n device is a legal no-op.\n\n Physical devices can not be paused or unpaused, only logical devices\n created through SDL_OpenAudioDevice() can be.\n\n \\param dev a device opened by SDL_OpenAudioDevice()\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ResumeAudioDevice\n \\sa SDL_IsAudioDevicePaused"]
    pub fn SDL_ResumeAudioDevice(dev: SDL_AudioDeviceID) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Use this function to query if an audio device is paused.\n\n Unlike in SDL2, audio devices start in an _unpaused_ state, since an app\n has to bind a stream before any audio will flow.\n\n Physical devices can not be paused or unpaused, only logical devices\n created through SDL_OpenAudioDevice() can be. Physical and invalid device\n IDs will report themselves as unpaused here.\n\n \\param dev a device opened by SDL_OpenAudioDevice()\n \\returns SDL_TRUE if device is valid and paused, SDL_FALSE otherwise.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PauseAudioDevice\n \\sa SDL_ResumeAudioDevice\n \\sa SDL_IsAudioDevicePaused"]
    pub fn SDL_IsAudioDevicePaused(dev: SDL_AudioDeviceID) -> SDL_bool;
}
extern "C" {
    #[doc = " Close a previously-opened audio device.\n\n The application should close open audio devices once they are no longer\n needed.\n\n This function may block briefly while pending audio data is played by the\n hardware, so that applications don't drop the last buffer of data they\n supplied if terminating immediately afterwards.\n\n \\param devid an audio device id previously returned by\n              SDL_OpenAudioDevice()\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenAudioDevice"]
    pub fn SDL_CloseAudioDevice(devid: SDL_AudioDeviceID);
}
extern "C" {
    #[doc = " Bind a list of audio streams to an audio device.\n\n Audio data will flow through any bound streams. For an output device, data\n for all bound streams will be mixed together and fed to the device. For a\n capture device, a copy of recorded data will be provided to each bound\n stream.\n\n Audio streams can only be bound to an open device. This operation is\n atomic--all streams bound in the same call will start processing at the\n same time, so they can stay in sync. Also: either all streams will be bound\n or none of them will be.\n\n It is an error to bind an already-bound stream; it must be explicitly\n unbound first.\n\n Binding a stream to a device will set its output format for output devices,\n and its input format for capture devices, so they match the device's\n settings. The caller is welcome to change the other end of the stream's\n format at any time.\n\n \\param devid an audio device to bind a stream to.\n \\param streams an array of audio streams to unbind.\n \\param num_streams Number streams listed in the `streams` array.\n \\returns 0 on success, -1 on error; call SDL_GetError() for more\n          information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStreams\n \\sa SDL_UnbindAudioStreams\n \\sa SDL_UnbindAudioStream\n \\sa SDL_GetAudioStreamBinding"]
    pub fn SDL_BindAudioStreams(
        devid: SDL_AudioDeviceID,
        streams: *mut *mut SDL_AudioStream,
        num_streams: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Bind a single audio stream to an audio device.\n\n This is a convenience function, equivalent to calling\n `SDL_BindAudioStreams(devid, &stream, 1)`.\n\n \\param devid an audio device to bind a stream to.\n \\param stream an audio stream to bind to a device.\n \\returns 0 on success, -1 on error; call SDL_GetError() for more\n          information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStreams\n \\sa SDL_UnbindAudioStreams\n \\sa SDL_UnbindAudioStream\n \\sa SDL_GetAudioStreamBinding"]
    pub fn SDL_BindAudioStream(
        devid: SDL_AudioDeviceID,
        stream: *mut SDL_AudioStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unbind a list of audio streams from their audio devices.\n\n The streams being unbound do not all have to be on the same device. All\n streams on the same device will be unbound atomically (data will stop\n flowing through them all unbound streams on the same device at the same\n time).\n\n Unbinding a stream that isn't bound to a device is a legal no-op.\n\n \\param streams an array of audio streams to unbind.\n \\param num_streams Number streams listed in the `streams` array.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStreams\n \\sa SDL_BindAudioStream\n \\sa SDL_UnbindAudioStream\n \\sa SDL_GetAudioStreamBinding"]
    pub fn SDL_UnbindAudioStreams(
        streams: *mut *mut SDL_AudioStream,
        num_streams: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Unbind a single audio stream from its audio device.\n\n This is a convenience function, equivalent to calling\n `SDL_UnbindAudioStreams(&stream, 1)`.\n\n \\param stream an audio stream to unbind from a device.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStream\n \\sa SDL_BindAudioStreams\n \\sa SDL_UnbindAudioStreams\n \\sa SDL_GetAudioStreamBinding"]
    pub fn SDL_UnbindAudioStream(stream: *mut SDL_AudioStream);
}
extern "C" {
    #[doc = " Query an audio stream for its currently-bound device.\n\n This reports the audio device that an audio stream is currently bound to.\n\n If not bound, or invalid, this returns zero, which is not a valid device\n ID.\n\n \\param stream the audio stream to query.\n \\returns The bound audio device, or 0 if not bound or invalid.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStream\n \\sa SDL_BindAudioStreams\n \\sa SDL_UnbindAudioStream\n \\sa SDL_UnbindAudioStreams"]
    pub fn SDL_GetAudioStreamBinding(stream: *mut SDL_AudioStream) -> SDL_AudioDeviceID;
}
extern "C" {
    #[doc = " Create a new audio stream.\n\n \\param src_spec The format details of the input audio\n \\param dst_spec The format details of the output audio\n \\returns 0 on success, or -1 on error.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_FlushAudioStream\n \\sa SDL_ClearAudioStream\n \\sa SDL_ChangeAudioStreamOutput\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_CreateAudioStream(
        src_spec: *const SDL_AudioSpec,
        dst_spec: *const SDL_AudioSpec,
    ) -> *mut SDL_AudioStream;
}
extern "C" {
    #[doc = " Query the current format of an audio stream.\n\n \\param stream the SDL_AudioStream to query.\n \\param src_spec Where to store the input audio format; ignored if NULL.\n \\param dst_spec Where to store the output audio format; ignored if NULL.\n \\returns 0 on success, or -1 on error.\n\n \\threadsafety It is safe to call this function from any thread, as it holds\n               a stream-specific mutex while running.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetAudioStreamFormat(
        stream: *mut SDL_AudioStream,
        src_spec: *mut SDL_AudioSpec,
        dst_spec: *mut SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Change the input and output formats of an audio stream.\n\n Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData\n will reflect the new format, and future calls to SDL_PutAudioStreamData\n must provide data in the new input formats.\n\n \\param stream The stream the format is being changed\n \\param src_spec The new format of the audio input; if NULL, it is not\n                 changed.\n \\param dst_spec The new format of the audio output; if NULL, it is not\n                 changed.\n \\returns 0 on success, or -1 on error.\n\n \\threadsafety It is safe to call this function from any thread, as it holds\n               a stream-specific mutex while running.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetAudioStreamFormat\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable"]
    pub fn SDL_SetAudioStreamFormat(
        stream: *mut SDL_AudioStream,
        src_spec: *const SDL_AudioSpec,
        dst_spec: *const SDL_AudioSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add data to be converted/resampled to the stream.\n\n This data must match the format/channels/samplerate specified in the latest\n call to SDL_SetAudioStreamFormat, or the format specified when creating the\n stream if it hasn't been changed.\n\n Note that this call simply queues unconverted data for later. This is\n different than SDL2, where data was converted during the Put call and the\n Get call would just dequeue the previously-converted data.\n\n \\param stream The stream the audio data is being added to\n \\param buf A pointer to the audio data to add\n \\param len The number of bytes to write to the stream\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread, but if the\n               stream has a callback set, the caller might need to manage\n               extra locking.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_FlushAudioStream\n \\sa SDL_ClearAudioStream\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_PutAudioStreamData(
        stream: *mut SDL_AudioStream,
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get converted/resampled data from the stream.\n\n The input/output data format/channels/samplerate is specified when creating\n the stream, and can be changed after creation by calling\n SDL_SetAudioStreamFormat.\n\n Note that any conversion and resampling necessary is done during this call,\n and SDL_PutAudioStreamData simply queues unconverted data for later. This\n is different than SDL2, where that work was done while inputting new data\n to the stream and requesting the output just copied the converted data.\n\n \\param stream The stream the audio is being requested from\n \\param buf A buffer to fill with audio data\n \\param len The maximum number of bytes to fill\n \\returns the number of bytes read from the stream, or -1 on error\n\n \\threadsafety It is safe to call this function from any thread, but if the\n               stream has a callback set, the caller might need to manage\n               extra locking.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_SetAudioStreamFormat\n \\sa SDL_FlushAudioStream\n \\sa SDL_ClearAudioStream\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_GetAudioStreamData(
        stream: *mut SDL_AudioStream,
        buf: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of converted/resampled bytes available.\n\n The stream may be buffering data behind the scenes until it has enough to\n resample correctly, so this number might be lower than what you expect, or\n even be zero. Add more data or flush the stream if you need the data now.\n\n If the stream has so much data that it would overflow an int, the return\n value is clamped to a maximum value, but no queued data is lost; if there\n are gigabytes of data queued, the app might need to read some of it with\n SDL_GetAudioStreamData before this function's return value is no longer\n clamped.\n\n \\param stream The audio stream to query\n \\returns the number of converted/resampled bytes available.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_FlushAudioStream\n \\sa SDL_ClearAudioStream\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_GetAudioStreamAvailable(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Tell the stream that you're done sending data, and anything being buffered\n should be converted/resampled and made available immediately.\n\n It is legal to add more data to a stream after flushing, but there will be\n audio gaps in the output. Generally this is intended to signal the end of\n input, so the complete output becomes available.\n\n \\param stream The audio stream to flush\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_ClearAudioStream\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_FlushAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Clear any pending data in the stream without converting it\n\n \\param stream The audio stream to clear\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_FlushAudioStream\n \\sa SDL_DestroyAudioStream"]
    pub fn SDL_ClearAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Lock an audio stream for serialized access.\n\n Each SDL_AudioStream has an internal mutex it uses to protect its data\n structures from threading conflicts. This function allows an app to lock\n that mutex, which could be useful if registering callbacks on this stream.\n\n One does not need to lock a stream to use in it most cases, as the stream\n manages this lock internally. However, this lock is held during callbacks,\n which may run from arbitrary threads at any time, so if an app needs to\n protect shared data during those callbacks, locking the stream guarantees\n that the callback is not running while the lock is held.\n\n As this is just a wrapper over SDL_LockMutex for an internal lock, it has\n all the same attributes (recursive locks are allowed, etc).\n\n \\param stream The audio stream to lock.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_UnlockAudioStream\n \\sa SDL_SetAudioStreamPutCallback\n \\sa SDL_SetAudioStreamGetCallback"]
    pub fn SDL_LockAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unlock an audio stream for serialized access.\n\n This unlocks an audio stream after a call to SDL_LockAudioStream.\n\n \\param stream The audio stream to unlock.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety You should only call this from the same thread that\n               previously called SDL_LockAudioStream.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LockAudioStream\n \\sa SDL_SetAudioStreamPutCallback\n \\sa SDL_SetAudioStreamGetCallback"]
    pub fn SDL_UnlockAudioStream(stream: *mut SDL_AudioStream) -> ::std::os::raw::c_int;
}
#[doc = " A callback that fires when data passes through an SDL_AudioStream.\n\n Apps can (optionally) register a callback with an audio stream that\n is called when data is added with SDL_PutAudioStreamData, or requested\n with SDL_GetAudioStreamData. These callbacks may run from any\n thread, so if you need to protect shared data, you should use\n SDL_LockAudioStream to serialize access; this lock will be held by\n before your callback is called, so your callback does not need to\n manage the lock explicitly.\n\n \\param stream The SDL audio stream associated with this callback.\n \\param approx_request The _approximate_ amout of data, in bytes, that is requested.\n                       This might be slightly overestimated due to buffering or\n                       resampling, and may change from call to call anyhow.\n \\param userdata An opaque pointer provided by the app for their personal use."]
pub type SDL_AudioStreamRequestCallback = ::std::option::Option<
    unsafe extern "C" fn(
        stream: *mut SDL_AudioStream,
        approx_request: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = " Set a callback that runs when data is requested from an audio stream.\n\n This callback is called _before_ data is obtained from the stream, giving\n the callback the chance to add more on-demand.\n\n The callback can (optionally) call SDL_PutAudioStreamData() to add more\n audio to the stream during this call; if needed, the request that triggered\n this callback will obtain the new data immediately.\n\n The callback's `approx_request` argument is roughly how many bytes of\n _unconverted_ data (in the stream's input format) is needed by the caller,\n although this may overestimate a little for safety. This takes into account\n how much is already in the stream and only asks for any extra necessary to\n resolve the request, which means the callback may be asked for zero bytes,\n and a different amount on each call.\n\n The callback is not required to supply exact amounts; it is allowed to\n supply too much or too little or none at all. The caller will get what's\n available, up to the amount they requested, regardless of this callback's\n outcome.\n\n Clearing or flushing an audio stream does not call this callback.\n\n This function obtains the stream's lock, which means any existing callback\n (get or put) in progress will finish running before setting the new\n callback.\n\n Setting a NULL function turns off the callback.\n\n \\param stream the audio stream to set the new callback on.\n \\param callback the new callback function to call when data is added to the\n                 stream.\n \\param userdata an opaque pointer provided to the callback for its own\n                 personal use.\n \\returns 0 on success, -1 on error. This only fails if `stream` is NULL.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetAudioStreamPutCallback"]
    pub fn SDL_SetAudioStreamGetCallback(
        stream: *mut SDL_AudioStream,
        callback: SDL_AudioStreamRequestCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a callback that runs when data is added to an audio stream.\n\n This callback is called _after_ the data is added to the stream, giving the\n callback the chance to obtain it immediately.\n\n The callback can (optionally) call SDL_GetAudioStreamData() to obtain audio\n from the stream during this call.\n\n The callback's `approx_request` argument is how many bytes of _converted_\n data (in the stream's output format) was provided by the caller, although\n this may underestimate a little for safety. This value might be less than\n what is currently available in the stream, if data was already there, and\n might be less than the caller provided if the stream needs to keep a buffer\n to aid in resampling. Which means the callback may be provided with zero\n bytes, and a different amount on each call.\n\n The callback may call SDL_GetAudioStreamAvailable to see the total amount\n currently available to read from the stream, instead of the total provided\n by the current call.\n\n The callback is not required to obtain all data. It is allowed to read less\n or none at all. Anything not read now simply remains in the stream for\n later access.\n\n Clearing or flushing an audio stream does not call this callback.\n\n This function obtains the stream's lock, which means any existing callback\n (get or put) in progress will finish running before setting the new\n callback.\n\n Setting a NULL function turns off the callback.\n\n \\param stream the audio stream to set the new callback on.\n \\param callback the new callback function to call when data is added to the\n                 stream.\n \\param userdata an opaque pointer provided to the callback for its own\n                 personal use.\n \\returns 0 on success, -1 on error. This only fails if `stream` is NULL.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetAudioStreamGetCallback"]
    pub fn SDL_SetAudioStreamPutCallback(
        stream: *mut SDL_AudioStream,
        callback: SDL_AudioStreamRequestCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free an audio stream\n\n \\param stream The audio stream to free\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream\n \\sa SDL_PutAudioStreamData\n \\sa SDL_GetAudioStreamData\n \\sa SDL_GetAudioStreamAvailable\n \\sa SDL_FlushAudioStream\n \\sa SDL_ClearAudioStream"]
    pub fn SDL_DestroyAudioStream(stream: *mut SDL_AudioStream);
}
extern "C" {
    #[doc = " Convenience function to create and bind an audio stream in one step.\n\n This manages the creation of an audio stream, and setting its format\n correctly to match both the app and the audio device's needs. This is\n optional, but slightly less cumbersome to set up for a common use case.\n\n The `spec` parameter represents the app's side of the audio stream. That\n is, for recording audio, this will be the output format, and for playing\n audio, this will be the input format. This function will set the other side\n of the audio stream to the device's format.\n\n \\param devid an audio device to bind a stream to. This must be an opened\n              device, and can not be zero.\n \\param spec the audio stream's input format\n \\returns a bound audio stream on success, ready to use. NULL on error; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BindAudioStreams\n \\sa SDL_UnbindAudioStreams\n \\sa SDL_UnbindAudioStream"]
    pub fn SDL_CreateAndBindAudioStream(
        devid: SDL_AudioDeviceID,
        spec: *const SDL_AudioSpec,
    ) -> *mut SDL_AudioStream;
}
extern "C" {
    #[doc = " Load the audio data of a WAVE file into memory.\n\n Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to\n be valid pointers. The entire data portion of the file is then loaded into\n memory and decoded if necessary.\n\n Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and\n 32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and\n A-law and mu-law (8 bits). Other formats are currently unsupported and\n cause an error.\n\n If this function succeeds, the return value is zero and the pointer to the\n audio data allocated by the function is written to `audio_buf` and its\n length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,\n `channels`, and `format` are set to the values of the audio data in the\n buffer. The `samples` member is set to a sane default and all others are\n set to zero.\n\n It's necessary to use SDL_free() to free the audio data returned in\n `audio_buf` when it is no longer used.\n\n Because of the underspecification of the .WAV format, there are many\n problematic files in the wild that cause issues with strict decoders. To\n provide compatibility with these files, this decoder is lenient in regards\n to the truncation of the file, the fact chunk, and the size of the RIFF\n chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,\n `SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to\n tune the behavior of the loading process.\n\n Any file that is invalid (due to truncation, corruption, or wrong values in\n the headers), too big, or unsupported causes an error. Additionally, any\n critical I/O error from the data source will terminate the loading process\n with an error. The function returns NULL on error and in all cases (with\n the exception of `src` being NULL), an appropriate error message will be\n set.\n\n It is required that the data source supports seeking.\n\n Example:\n\n ```c\n SDL_LoadWAV_RW(SDL_RWFromFile(\"sample.wav\", \"rb\"), 1, &spec, &buf, &len);\n ```\n\n Note that the SDL_LoadWAV function does this same thing for you, but in a\n less messy way:\n\n ```c\n SDL_LoadWAV(\"sample.wav\", &spec, &buf, &len);\n ```\n\n \\param src The data source for the WAVE data\n \\param freesrc If SDL_TRUE, calls SDL_RWclose() on `src` before returning,\n                even in the case of an error\n \\param spec A pointer to an SDL_AudioSpec that will be set to the WAVE\n             data's format details on successful return\n \\param audio_buf A pointer filled with the audio data, allocated by the\n                  function\n \\param audio_len A pointer filled with the length of the audio data buffer\n                  in bytes\n \\returns This function, if successfully called, returns 0. `audio_buf` will\n          be filled with a pointer to an allocated buffer containing the\n          audio data, and `audio_len` is filled with the length of that\n          audio buffer in bytes.\n\n          This function returns -1 if the .WAV file cannot be opened, uses\n          an unknown data format, or is corrupt; call SDL_GetError() for\n          more information.\n\n          When the application is done with the data returned in\n          `audio_buf`, it should call SDL_free() to dispose of it.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_free\n \\sa SDL_LoadWAV"]
    pub fn SDL_LoadWAV_RW(
        src: *mut SDL_RWops,
        freesrc: SDL_bool,
        spec: *mut SDL_AudioSpec,
        audio_buf: *mut *mut Uint8,
        audio_len: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Loads a WAV from a file path.\n\n This is a convenience function that is effectively the same as:\n\n ```c\n SDL_LoadWAV_RW(SDL_RWFromFile(path, \"rb\"), 1, spec, audio_buf, audio_len);\n ```\n\n Note that in SDL2, this was a preprocessor macro and not a real function.\n\n \\param path The file path of the WAV file to open.\n \\param spec A pointer to an SDL_AudioSpec that will be set to the WAVE\n             data's format details on successful return.\n \\param audio_buf A pointer filled with the audio data, allocated by the\n                  function.\n \\param audio_len A pointer filled with the length of the audio data buffer\n                  in bytes\n \\returns This function, if successfully called, returns 0. `audio_buf` will\n          be filled with a pointer to an allocated buffer containing the\n          audio data, and `audio_len` is filled with the length of that\n          audio buffer in bytes.\n\n          This function returns -1 if the .WAV file cannot be opened, uses\n          an unknown data format, or is corrupt; call SDL_GetError() for\n          more information.\n\n          When the application is done with the data returned in\n          `audio_buf`, it should call SDL_free() to dispose of it.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_free\n \\sa SDL_LoadWAV_RW"]
    pub fn SDL_LoadWAV(
        path: *const ::std::os::raw::c_char,
        spec: *mut SDL_AudioSpec,
        audio_buf: *mut *mut Uint8,
        audio_len: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Mix audio data in a specified format.\n\n This takes an audio buffer `src` of `len` bytes of `format` data and mixes\n it into `dst`, performing addition, volume adjustment, and overflow\n clipping. The buffer pointed to by `dst` must also be `len` bytes of\n `format` data.\n\n This is provided for convenience -- you can mix your own audio data.\n\n Do not use this function for mixing together more than two streams of\n sample data. The output from repeated application of this function may be\n distorted by clipping, because there is no accumulator with greater range\n than the input (not to mention this being an inefficient way of doing it).\n\n It is a common misconception that this function is required to write audio\n data to an output stream in an audio callback. While you can do that,\n SDL_MixAudioFormat() is really only needed when you're mixing a single\n audio stream with a volume adjustment.\n\n \\param dst the destination for the mixed audio\n \\param src the source audio buffer to be mixed\n \\param format the SDL_AudioFormat structure representing the desired audio\n               format\n \\param len the length of the audio buffer in bytes\n \\param volume ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME\n               for full audio volume\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_MixAudioFormat(
        dst: *mut Uint8,
        src: *const Uint8,
        format: SDL_AudioFormat,
        len: Uint32,
        volume: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert some audio data of one format to another format.\n\n Please note that this function is for convenience, but should not be used\n to resample audio in blocks, as it will introduce audio artifacts on the\n boundaries. You should only use this function if you are converting audio\n data in its entirety in one call. If you want to convert audio in smaller\n chunks, use an SDL_AudioStream, which is designed for this situation.\n\n Internally, this function creates and destroys an SDL_AudioStream on each\n use, so it's also less efficient than using one directly, if you need to\n convert multiple times.\n\n \\param src_spec The format details of the input audio\n \\param src_data The audio data to be converted\n \\param src_len The len of src_data\n \\param dst_spec The format details of the output audio\n \\param dst_data Will be filled with a pointer to converted audio data,\n                 which should be freed with SDL_free(). On error, it will be\n                 NULL.\n \\param dst_len Will be filled with the len of dst_data\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateAudioStream"]
    pub fn SDL_ConvertAudioSamples(
        src_spec: *const SDL_AudioSpec,
        src_data: *const Uint8,
        src_len: ::std::os::raw::c_int,
        dst_spec: *const SDL_AudioSpec,
        dst_data: *mut *mut Uint8,
        dst_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the appropriate memset value for silencing an audio format.\n\n The value returned by this function can be used as the second argument to\n memset (or SDL_memset) to set an audio buffer in a specific format to\n silence.\n\n \\param format the audio data format to query.\n \\returns A byte value that can be passed to memset.\n\n \\threadsafety It is safe to call this function from any thread.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSilenceValueForFormat(format: SDL_AudioFormat) -> ::std::os::raw::c_int;
}
#[doc = "< no blending\ndstRGBA = srcRGBA"]
pub const SDL_BlendMode_SDL_BLENDMODE_NONE: SDL_BlendMode = 0;
#[doc = "< alpha blending\ndstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))\ndstA = srcA + (dstA * (1-srcA))"]
pub const SDL_BlendMode_SDL_BLENDMODE_BLEND: SDL_BlendMode = 1;
#[doc = "< additive blending\ndstRGB = (srcRGB * srcA) + dstRGB\ndstA = dstA"]
pub const SDL_BlendMode_SDL_BLENDMODE_ADD: SDL_BlendMode = 2;
#[doc = "< color modulate\ndstRGB = srcRGB * dstRGB\ndstA = dstA"]
pub const SDL_BlendMode_SDL_BLENDMODE_MOD: SDL_BlendMode = 4;
#[doc = "< color multiply\ndstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))\ndstA = dstA"]
pub const SDL_BlendMode_SDL_BLENDMODE_MUL: SDL_BlendMode = 8;
pub const SDL_BlendMode_SDL_BLENDMODE_INVALID: SDL_BlendMode = 2147483647;
#[doc = "  \\brief The blend mode used in SDL_RenderTexture() and drawing operations."]
pub type SDL_BlendMode = ::std::os::raw::c_uint;
#[doc = "< dst + src: supported by all renderers"]
pub const SDL_BlendOperation_SDL_BLENDOPERATION_ADD: SDL_BlendOperation = 1;
#[doc = "< dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES"]
pub const SDL_BlendOperation_SDL_BLENDOPERATION_SUBTRACT: SDL_BlendOperation = 2;
#[doc = "< src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES"]
pub const SDL_BlendOperation_SDL_BLENDOPERATION_REV_SUBTRACT: SDL_BlendOperation = 3;
#[doc = "< min(dst, src) : supported by D3D9, D3D11"]
pub const SDL_BlendOperation_SDL_BLENDOPERATION_MINIMUM: SDL_BlendOperation = 4;
#[doc = "< max(dst, src) : supported by D3D9, D3D11"]
pub const SDL_BlendOperation_SDL_BLENDOPERATION_MAXIMUM: SDL_BlendOperation = 5;
#[doc = "  \\brief The blend operation used when combining source and destination pixel components"]
pub type SDL_BlendOperation = ::std::os::raw::c_uint;
#[doc = "< 0, 0, 0, 0"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ZERO: SDL_BlendFactor = 1;
#[doc = "< 1, 1, 1, 1"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ONE: SDL_BlendFactor = 2;
#[doc = "< srcR, srcG, srcB, srcA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_SRC_COLOR: SDL_BlendFactor = 3;
#[doc = "< 1-srcR, 1-srcG, 1-srcB, 1-srcA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR: SDL_BlendFactor = 4;
#[doc = "< srcA, srcA, srcA, srcA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_SRC_ALPHA: SDL_BlendFactor = 5;
#[doc = "< 1-srcA, 1-srcA, 1-srcA, 1-srcA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: SDL_BlendFactor = 6;
#[doc = "< dstR, dstG, dstB, dstA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_DST_COLOR: SDL_BlendFactor = 7;
#[doc = "< 1-dstR, 1-dstG, 1-dstB, 1-dstA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR: SDL_BlendFactor = 8;
#[doc = "< dstA, dstA, dstA, dstA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_DST_ALPHA: SDL_BlendFactor = 9;
#[doc = "< 1-dstA, 1-dstA, 1-dstA, 1-dstA"]
pub const SDL_BlendFactor_SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA: SDL_BlendFactor = 10;
#[doc = "  \\brief The normalized factor used to multiply pixel components"]
pub type SDL_BlendFactor = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Compose a custom blend mode for renderers.\n\n The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept\n the SDL_BlendMode returned by this function if the renderer supports it.\n\n A blend mode controls how the pixels from a drawing operation (source) get\n combined with the pixels from the render target (destination). First, the\n components of the source and destination pixels get multiplied with their\n blend factors. Then, the blend operation takes the two products and\n calculates the result that will get stored in the render target.\n\n Expressed in pseudocode, it would look like this:\n\n ```c\n dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\n dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n ```\n\n Where the functions `colorOperation(src, dst)` and `alphaOperation(src,\n dst)` can return one of the following:\n\n - `src + dst`\n - `src - dst`\n - `dst - src`\n - `min(src, dst)`\n - `max(src, dst)`\n\n The red, green, and blue components are always multiplied with the first,\n second, and third components of the SDL_BlendFactor, respectively. The\n fourth component is not used.\n\n The alpha component is always multiplied with the fourth component of the\n SDL_BlendFactor. The other components are not used in the alpha\n calculation.\n\n Support for these blend modes varies for each renderer. To check if a\n specific SDL_BlendMode is supported, create a renderer and pass it to\n either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will\n return with an error if the blend mode is not supported.\n\n This list describes the support of custom blend modes for each renderer in\n SDL 2.0.6. All renderers support the four blend modes listed in the\n SDL_BlendMode enumeration.\n\n - **direct3d**: Supports all operations with all factors. However, some\n   factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and\n   `SDL_BLENDOPERATION_MAXIMUM`.\n - **direct3d11**: Same as Direct3D 9.\n - **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all\n   factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL\n   2.0.6.\n - **opengles**: Supports the `SDL_BLENDOPERATION_ADD` operation with all\n   factors. Color and alpha factors need to be the same. OpenGL ES 1\n   implementation specific: May also support `SDL_BLENDOPERATION_SUBTRACT`\n   and `SDL_BLENDOPERATION_REV_SUBTRACT`. May support color and alpha\n   operations being different from each other. May support color and alpha\n   factors being different from each other.\n - **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,\n   `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`\n   operations with all factors.\n - **psp**: No custom blend mode support.\n - **software**: No custom blend mode support.\n\n Some renderers do not provide an alpha component for the default render\n target. The `SDL_BLENDFACTOR_DST_ALPHA` and\n `SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this\n case.\n\n \\param srcColorFactor the SDL_BlendFactor applied to the red, green, and\n                       blue components of the source pixels\n \\param dstColorFactor the SDL_BlendFactor applied to the red, green, and\n                       blue components of the destination pixels\n \\param colorOperation the SDL_BlendOperation used to combine the red,\n                       green, and blue components of the source and\n                       destination pixels\n \\param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                       the source pixels\n \\param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of\n                       the destination pixels\n \\param alphaOperation the SDL_BlendOperation used to combine the alpha\n                       component of the source and destination pixels\n \\returns an SDL_BlendMode that represents the chosen factors and\n          operations.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderDrawBlendMode\n \\sa SDL_GetRenderDrawBlendMode\n \\sa SDL_SetTextureBlendMode\n \\sa SDL_GetTextureBlendMode"]
    pub fn SDL_ComposeCustomBlendMode(
        srcColorFactor: SDL_BlendFactor,
        dstColorFactor: SDL_BlendFactor,
        colorOperation: SDL_BlendOperation,
        srcAlphaFactor: SDL_BlendFactor,
        dstAlphaFactor: SDL_BlendFactor,
        alphaOperation: SDL_BlendOperation,
    ) -> SDL_BlendMode;
}
extern "C" {
    #[doc = " Put UTF-8 text into the clipboard.\n\n \\param text the text to store in the clipboard\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetClipboardText\n \\sa SDL_HasClipboardText"]
    pub fn SDL_SetClipboardText(text: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get UTF-8 text from the clipboard, which must be freed with SDL_free().\n\n This functions returns empty string if there was not enough memory left for\n a copy of the clipboard's content.\n\n \\returns the clipboard text on success or an empty string on failure; call\n          SDL_GetError() for more information. Caller must call SDL_free()\n          on the returned pointer when done with it (even if there was an\n          error).\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasClipboardText\n \\sa SDL_SetClipboardText"]
    pub fn SDL_GetClipboardText() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Query whether the clipboard exists and contains a non-empty text string.\n\n \\returns SDL_TRUE if the clipboard has text, or SDL_FALSE if it does not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetClipboardText\n \\sa SDL_SetClipboardText"]
    pub fn SDL_HasClipboardText() -> SDL_bool;
}
extern "C" {
    #[doc = " Put UTF-8 text into the primary selection.\n\n \\param text the text to store in the primary selection\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPrimarySelectionText\n \\sa SDL_HasPrimarySelectionText"]
    pub fn SDL_SetPrimarySelectionText(
        text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get UTF-8 text from the primary selection, which must be freed with\n SDL_free().\n\n This functions returns empty string if there was not enough memory left for\n a copy of the primary selection's content.\n\n \\returns the primary selection text on success or an empty string on\n          failure; call SDL_GetError() for more information. Caller must\n          call SDL_free() on the returned pointer when done with it (even if\n          there was an error).\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasPrimarySelectionText\n \\sa SDL_SetPrimarySelectionText"]
    pub fn SDL_GetPrimarySelectionText() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Query whether the primary selection exists and contains a non-empty text\n string.\n\n \\returns SDL_TRUE if the primary selection has text, or SDL_FALSE if it\n          does not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPrimarySelectionText\n \\sa SDL_SetPrimarySelectionText"]
    pub fn SDL_HasPrimarySelectionText() -> SDL_bool;
}
#[doc = " Callback function that will be called when data for the specified mime-type\n is requested by the OS.\n\n The callback function is called with NULL as the mime_type when the clipboard\n is cleared or new data is set. The clipboard is automatically cleared in SDL_Quit().\n\n \\param userdata  A pointer to provided user data\n \\param mime_type The requested mime-type\n \\param size      A pointer filled in with the length of the returned data\n \\returns a pointer to the data for the provided mime-type. Returning NULL or\n          setting length to 0 will cause no data to be sent to the \"receiver\". It is\n          up to the receiver to handle this. Essentially returning no data is more or\n          less undefined behavior and may cause breakage in receiving applications.\n          The returned data will not be freed so it needs to be retained and dealt\n          with internally.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetClipboardData"]
pub type SDL_ClipboardDataCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        mime_type: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *const ::std::os::raw::c_void,
>;
#[doc = " Callback function that will be called when the clipboard is cleared, or new data is set.\n\n \\param userdata A pointer to provided user data\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetClipboardData"]
pub type SDL_ClipboardCleanupCallback =
    ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>;
extern "C" {
    #[doc = " Offer clipboard data to the OS\n\n Tell the operating system that the application is offering clipboard data\n for each of the proivded mime-types. Once another application requests the\n data the callback function will be called allowing it to generate and\n respond with the data for the requested mime-type.\n\n The size of text data does not include any terminator, and the text does\n not need to be null terminated (e.g. you can directly copy a portion of a\n document)\n\n \\param callback A function pointer to the function that provides the\n                 clipboard data\n \\param cleanup A function pointer to the function that cleans up the\n                clipboard data\n \\param userdata An opaque pointer that will be forwarded to the callbacks\n \\param mime_types A list of mime-types that are being offered\n \\param num_mime_types The number of mime-types in the mime_types list\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ClipboardDataCallback\n \\sa SDL_SetClipboardData\n \\sa SDL_GetClipboardData\n \\sa SDL_HasClipboardData"]
    pub fn SDL_SetClipboardData(
        callback: SDL_ClipboardDataCallback,
        cleanup: SDL_ClipboardCleanupCallback,
        userdata: *mut ::std::os::raw::c_void,
        mime_types: *mut *const ::std::os::raw::c_char,
        num_mime_types: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Clear the clipboard data\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetClipboardData"]
    pub fn SDL_ClearClipboardData() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the data from clipboard for a given mime type\n\n The size of text data does not include the terminator, but the text is\n guaranteed to be null terminated.\n\n \\param mime_type The mime type to read from the clipboard\n \\param size A pointer filled in with the length of the returned data\n \\returns the retrieved data buffer or NULL on failure; call SDL_GetError()\n          for more information. Caller must call SDL_free() on the returned\n          pointer when done with it.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetClipboardData"]
    pub fn SDL_GetClipboardData(
        mime_type: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Query whether there is data in the clipboard for the provided mime type\n\n \\param mime_type The mime type to check for data for\n \\returns SDL_TRUE if there exists data in clipboard for the provided mime\n          type, SDL_FALSE if it does not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetClipboardData\n \\sa SDL_GetClipboardData"]
    pub fn SDL_HasClipboardData(mime_type: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the number of CPU cores available.\n\n \\returns the total number of logical CPU cores. On CPUs that include\n          technologies such as hyperthreading, the number of logical cores\n          may be more than the number of physical cores.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetCPUCount() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine the L1 cache line size of the CPU.\n\n This is useful for determining multi-threaded structure padding or SIMD\n prefetch sizes.\n\n \\returns the L1 cache line size of the CPU, in bytes.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetCPUCacheLineSize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Determine whether the CPU has AltiVec features.\n\n This always returns false on CPUs that aren't using PowerPC instruction\n sets.\n\n \\returns SDL_TRUE if the CPU has AltiVec features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasAltiVec() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has MMX features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasMMX() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has SSE features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasSSE() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has SSE2 features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasSSE2() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has SSE3 features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasSSE3() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has SSE4.1 features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasSSE41() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has SSE4.2 features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41"]
    pub fn SDL_HasSSE42() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has AVX features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX2\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasAVX() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has AVX2 features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX512F\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasAVX2() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has AVX-512F (foundation) features.\n\n This always returns false on CPUs that aren't using Intel instruction sets.\n\n \\returns SDL_TRUE if the CPU has AVX-512F features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasAltiVec\n \\sa SDL_HasAVX\n \\sa SDL_HasAVX2\n \\sa SDL_HasMMX\n \\sa SDL_HasSSE\n \\sa SDL_HasSSE2\n \\sa SDL_HasSSE3\n \\sa SDL_HasSSE41\n \\sa SDL_HasSSE42"]
    pub fn SDL_HasAVX512F() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has ARM SIMD (ARMv6) features.\n\n This is different from ARM NEON, which is a different instruction set.\n\n This always returns false on CPUs that aren't using ARM instruction sets.\n\n \\returns SDL_TRUE if the CPU has ARM SIMD features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasNEON"]
    pub fn SDL_HasARMSIMD() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has NEON (ARM SIMD) features.\n\n This always returns false on CPUs that aren't using ARM instruction sets.\n\n \\returns SDL_TRUE if the CPU has ARM NEON features or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_HasNEON() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has LSX (LOONGARCH SIMD) features.\n\n This always returns false on CPUs that aren't using LOONGARCH instruction\n sets.\n\n \\returns SDL_TRUE if the CPU has LOONGARCH LSX features or SDL_FALSE if\n          not.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_HasLSX() -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether the CPU has LASX (LOONGARCH SIMD) features.\n\n This always returns false on CPUs that aren't using LOONGARCH instruction\n sets.\n\n \\returns SDL_TRUE if the CPU has LOONGARCH LASX features or SDL_FALSE if\n          not.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_HasLASX() -> SDL_bool;
}
extern "C" {
    #[doc = " Get the amount of RAM configured in the system.\n\n \\returns the amount of RAM configured in the system in MiB.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSystemRAM() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Report the alignment this system needs for SIMD allocations.\n\n This will return the minimum number of bytes to which a pointer must be\n aligned to be compatible with SIMD instructions on the current machine. For\n example, if the machine supports SSE only, it will return 16, but if it\n supports AVX-512F, it'll return 64 (etc). This only reports values for\n instruction sets SDL knows about, so if your SDL build doesn't have\n SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and\n not 64 for the AVX-512 instructions that exist but SDL doesn't know about.\n Plan accordingly.\n\n \\returns the alignment in bytes needed for available, known SIMD\n          instructions.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_aligned_alloc\n \\sa SDL_aligned_free"]
    pub fn SDL_SIMDGetAlignment() -> usize;
}
#[doc = "  \\brief SDL_sensor.h\n\n  In order to use these functions, SDL_Init() must have been called\n  with the ::SDL_INIT_SENSOR flag.  This causes SDL to scan the system\n  for sensors, and load appropriate drivers."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Sensor {
    _unused: [u8; 0],
}
#[doc = " This is a unique ID for a sensor for the time it is connected to the system,\n and is never reused for the lifetime of the application.\n\n The ID value starts at 1 and increments from there. The value 0 is an invalid ID."]
pub type SDL_SensorID = Uint32;
#[doc = "< Returned for an invalid sensor"]
pub const SDL_SensorType_SDL_SENSOR_INVALID: SDL_SensorType = -1;
#[doc = "< Unknown sensor type"]
pub const SDL_SensorType_SDL_SENSOR_UNKNOWN: SDL_SensorType = 0;
#[doc = "< Accelerometer"]
pub const SDL_SensorType_SDL_SENSOR_ACCEL: SDL_SensorType = 1;
#[doc = "< Gyroscope"]
pub const SDL_SensorType_SDL_SENSOR_GYRO: SDL_SensorType = 2;
#[doc = "< Accelerometer for left Joy-Con controller and Wii nunchuk"]
pub const SDL_SensorType_SDL_SENSOR_ACCEL_L: SDL_SensorType = 3;
#[doc = "< Gyroscope for left Joy-Con controller"]
pub const SDL_SensorType_SDL_SENSOR_GYRO_L: SDL_SensorType = 4;
#[doc = "< Accelerometer for right Joy-Con controller"]
pub const SDL_SensorType_SDL_SENSOR_ACCEL_R: SDL_SensorType = 5;
#[doc = "< Gyroscope for right Joy-Con controller"]
pub const SDL_SensorType_SDL_SENSOR_GYRO_R: SDL_SensorType = 6;
pub type SDL_SensorType = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Get a list of currently connected sensors.\n\n \\param count a pointer filled in with the number of sensors returned\n \\returns a 0 terminated array of sensor instance IDs which should be freed\n          with SDL_free(), or NULL on error; call SDL_GetError() for more\n          details.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensors(count: *mut ::std::os::raw::c_int) -> *mut SDL_SensorID;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a sensor.\n\n \\param instance_id the sensor instance ID\n \\returns the sensor name, or NULL if `instance_id` is not valid\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorInstanceName(instance_id: SDL_SensorID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the type of a sensor.\n\n \\param instance_id the sensor instance ID\n \\returns the SDL_SensorType, or `SDL_SENSOR_INVALID` if `instance_id` is\n          not valid\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorInstanceType(instance_id: SDL_SensorID) -> SDL_SensorType;
}
extern "C" {
    #[doc = " Get the platform dependent type of a sensor.\n\n \\param instance_id the sensor instance ID\n \\returns the sensor platform dependent type, or -1 if `instance_id` is not\n          valid\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorInstanceNonPortableType(instance_id: SDL_SensorID)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Open a sensor for use.\n\n \\param instance_id the sensor instance ID\n \\returns an SDL_Sensor sensor object, or NULL if an error occurred.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_OpenSensor(instance_id: SDL_SensorID) -> *mut SDL_Sensor;
}
extern "C" {
    #[doc = " Return the SDL_Sensor associated with an instance ID.\n\n \\param instance_id the sensor instance ID\n \\returns an SDL_Sensor object.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorFromInstanceID(instance_id: SDL_SensorID) -> *mut SDL_Sensor;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a sensor\n\n \\param sensor The SDL_Sensor object\n \\returns the sensor name, or NULL if `sensor` is NULL.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorName(sensor: *mut SDL_Sensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the type of a sensor.\n\n \\param sensor The SDL_Sensor object to inspect\n \\returns the SDL_SensorType type, or `SDL_SENSOR_INVALID` if `sensor` is\n          NULL.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorType(sensor: *mut SDL_Sensor) -> SDL_SensorType;
}
extern "C" {
    #[doc = " Get the platform dependent type of a sensor.\n\n \\param sensor The SDL_Sensor object to inspect\n \\returns the sensor platform dependent type, or -1 if `sensor` is NULL.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorNonPortableType(sensor: *mut SDL_Sensor) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the instance ID of a sensor.\n\n \\param sensor The SDL_Sensor object to inspect\n \\returns the sensor instance ID, or 0 if `sensor` is NULL.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorInstanceID(sensor: *mut SDL_Sensor) -> SDL_SensorID;
}
extern "C" {
    #[doc = " Get the current state of an opened sensor.\n\n The number of values and interpretation of the data is sensor dependent.\n\n \\param sensor The SDL_Sensor object to query\n \\param data A pointer filled with the current sensor state\n \\param num_values The number of values to write to data\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSensorData(
        sensor: *mut SDL_Sensor,
        data: *mut f32,
        num_values: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Close a sensor previously opened with SDL_OpenSensor().\n\n \\param sensor The SDL_Sensor object to close\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_CloseSensor(sensor: *mut SDL_Sensor);
}
extern "C" {
    #[doc = " Update the current state of the open sensors.\n\n This is called automatically by the event loop if sensor events are\n enabled.\n\n This needs to be called from the thread that initialized the sensor\n subsystem.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UpdateSensors();
}
#[doc = " An SDL_GUID is a 128-bit identifier for an input device that\n   identifies that device across runs of SDL programs on the same\n   platform.  If the device is detached and then re-attached to a\n   different port, or if the base system is rebooted, the device\n   should still report the same GUID.\n\n GUIDs are as precise as possible but are not guaranteed to\n   distinguish physically distinct but equivalent devices.  For\n   example, two game controllers from the same vendor with the same\n   product ID and revision may have the same GUID.\n\n GUIDs may be platform-dependent (i.e., the same device may report\n   different GUIDs on different operating systems)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GUID {
    pub data: [Uint8; 16usize],
}
#[test]
fn bindgen_test_layout_SDL_GUID() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GUID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GUID>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_GUID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GUID),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    #[doc = " Get an ASCII string representation for a given ::SDL_GUID.\n\n You should supply at least 33 bytes for pszGUID.\n\n \\param guid the ::SDL_GUID you wish to convert to string\n \\param pszGUID buffer in which to write the ASCII string\n \\param cbGUID the size of pszGUID\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GUIDFromString"]
    pub fn SDL_GUIDToString(
        guid: SDL_GUID,
        pszGUID: *mut ::std::os::raw::c_char,
        cbGUID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a GUID string into a ::SDL_GUID structure.\n\n Performs no error checking. If this function is given a string containing\n an invalid GUID, the function will silently succeed, but the GUID generated\n will not be useful.\n\n \\param pchGUID string containing an ASCII representation of a GUID\n \\returns a ::SDL_GUID structure.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GUIDToString"]
    pub fn SDL_GUIDFromString(pchGUID: *const ::std::os::raw::c_char) -> SDL_GUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Joystick {
    _unused: [u8; 0],
}
#[doc = " An SDL_GUID is a 128-bit identifier for an input device that\n   identifies that device across runs of SDL programs on the same\n   platform.  If the device is detached and then re-attached to a\n   different port, or if the base system is rebooted, the device\n   should still report the same GUID.\n\n GUIDs are as precise as possible but are not guaranteed to\n   distinguish physically distinct but equivalent devices.  For\n   example, two game controllers from the same vendor with the same\n   product ID and revision may have the same GUID.\n\n GUIDs may be platform-dependent (i.e., the same device may report\n   different GUIDs on different operating systems)."]
pub type SDL_JoystickGUID = SDL_GUID;
#[doc = " This is a unique ID for a joystick for the time it is connected to the system,\n and is never reused for the lifetime of the application. If the joystick is\n disconnected and reconnected, it will get a new ID.\n\n The ID value starts at 1 and increments from there. The value 0 is an invalid ID."]
pub type SDL_JoystickID = Uint32;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_UNKNOWN: SDL_JoystickType = 0;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_GAMEPAD: SDL_JoystickType = 1;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_WHEEL: SDL_JoystickType = 2;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_ARCADE_STICK: SDL_JoystickType = 3;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_FLIGHT_STICK: SDL_JoystickType = 4;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_DANCE_PAD: SDL_JoystickType = 5;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_GUITAR: SDL_JoystickType = 6;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_DRUM_KIT: SDL_JoystickType = 7;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_ARCADE_PAD: SDL_JoystickType = 8;
pub const SDL_JoystickType_SDL_JOYSTICK_TYPE_THROTTLE: SDL_JoystickType = 9;
pub type SDL_JoystickType = ::std::os::raw::c_uint;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_UNKNOWN: SDL_JoystickPowerLevel = -1;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_EMPTY: SDL_JoystickPowerLevel = 0;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_LOW: SDL_JoystickPowerLevel = 1;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_MEDIUM: SDL_JoystickPowerLevel = 2;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_FULL: SDL_JoystickPowerLevel = 3;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_WIRED: SDL_JoystickPowerLevel = 4;
pub const SDL_JoystickPowerLevel_SDL_JOYSTICK_POWER_MAX: SDL_JoystickPowerLevel = 5;
pub type SDL_JoystickPowerLevel = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Locking for atomic access to the joystick API\n\n The SDL joystick functions are thread-safe, however you can lock the\n joysticks while processing to guarantee that the joystick list won't change\n and joystick and gamepad events will not be delivered.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LockJoysticks();
}
extern "C" {
    #[doc = " Unlocking for atomic access to the joystick API\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UnlockJoysticks();
}
extern "C" {
    #[doc = " Get a list of currently connected joysticks.\n\n \\param count a pointer filled in with the number of joysticks returned\n \\returns a 0 terminated array of joystick instance IDs which should be\n          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n          more details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoysticks(count: *mut ::std::os::raw::c_int) -> *mut SDL_JoystickID;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a joystick.\n\n This can be called before any joysticks are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the name of the selected joystick. If no name can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickName\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoystickInstanceName(
        instance_id: SDL_JoystickID,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the implementation dependent path of a joystick.\n\n This can be called before any joysticks are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the path of the selected joystick. If no path can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickPath\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoystickInstancePath(
        instance_id: SDL_JoystickID,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the player index of a joystick.\n\n This can be called before any joysticks are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the player index of a joystick, or -1 if it's not available\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickPlayerIndex\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoystickInstancePlayerIndex(instance_id: SDL_JoystickID)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the implementation-dependent GUID of a joystick.\n\n This can be called before any joysticks are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the GUID of the selected joystick. If called on an invalid index,\n          this function returns a zero GUID\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickGUID\n \\sa SDL_GetJoystickGUIDString"]
    pub fn SDL_GetJoystickInstanceGUID(instance_id: SDL_JoystickID) -> SDL_JoystickGUID;
}
extern "C" {
    #[doc = " Get the USB vendor ID of a joystick, if available.\n\n This can be called before any joysticks are opened. If the vendor ID isn't\n available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the USB vendor ID of the selected joystick. If called on an\n          invalid index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickInstanceVendor(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the USB product ID of a joystick, if available.\n\n This can be called before any joysticks are opened. If the product ID isn't\n available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the USB product ID of the selected joystick. If called on an\n          invalid index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickInstanceProduct(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the product version of a joystick, if available.\n\n This can be called before any joysticks are opened. If the product version\n isn't available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the product version of the selected joystick. If called on an\n          invalid index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickInstanceProductVersion(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the type of a joystick, if available.\n\n This can be called before any joysticks are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the SDL_JoystickType of the selected joystick. If called on an\n          invalid index, this function returns `SDL_JOYSTICK_TYPE_UNKNOWN`\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickInstanceType(instance_id: SDL_JoystickID) -> SDL_JoystickType;
}
extern "C" {
    #[doc = " Open a joystick for use.\n\n The joystick subsystem must be initialized before a joystick can be opened\n for use.\n\n \\param instance_id the joystick instance ID\n \\returns a joystick identifier or NULL if an error occurred; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CloseJoystick"]
    pub fn SDL_OpenJoystick(instance_id: SDL_JoystickID) -> *mut SDL_Joystick;
}
extern "C" {
    #[doc = " Get the SDL_Joystick associated with an instance ID, if it has been opened.\n\n \\param instance_id the instance ID to get the SDL_Joystick for\n \\returns an SDL_Joystick on success or NULL on failure or if it hasn't been\n          opened yet; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickFromInstanceID(instance_id: SDL_JoystickID) -> *mut SDL_Joystick;
}
extern "C" {
    #[doc = " Get the SDL_Joystick associated with a player index.\n\n \\param player_index the player index to get the SDL_Joystick for\n \\returns an SDL_Joystick on success or NULL on failure; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickFromPlayerIndex(player_index: ::std::os::raw::c_int)
        -> *mut SDL_Joystick;
}
extern "C" {
    #[doc = " Attach a new virtual joystick.\n\n \\param type type of joystick\n \\param naxes number of axes\n \\param nbuttons number of buttons\n \\param nhats number of hats\n \\returns the joystick instance ID, or 0 if an error occurred; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_AttachVirtualJoystick(
        type_: SDL_JoystickType,
        naxes: ::std::os::raw::c_int,
        nbuttons: ::std::os::raw::c_int,
        nhats: ::std::os::raw::c_int,
    ) -> SDL_JoystickID;
}
#[doc = " The structure that defines an extended virtual joystick description\n\n The caller must zero the structure and then initialize the version with `SDL_VIRTUAL_JOYSTICK_DESC_VERSION` before passing it to SDL_AttachVirtualJoystickEx()\n  All other elements of this structure are optional and can be left 0.\n\n \\sa SDL_AttachVirtualJoystickEx"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_VirtualJoystickDesc {
    #[doc = "< `SDL_VIRTUAL_JOYSTICK_DESC_VERSION`"]
    pub version: Uint16,
    #[doc = "< `SDL_JoystickType`"]
    pub type_: Uint16,
    #[doc = "< the number of axes on this joystick"]
    pub naxes: Uint16,
    #[doc = "< the number of buttons on this joystick"]
    pub nbuttons: Uint16,
    #[doc = "< the number of hats on this joystick"]
    pub nhats: Uint16,
    #[doc = "< the USB vendor ID of this joystick"]
    pub vendor_id: Uint16,
    #[doc = "< the USB product ID of this joystick"]
    pub product_id: Uint16,
    #[doc = "< unused"]
    pub padding: Uint16,
    #[doc = "< A mask of which buttons are valid for this controller\ne.g. (1 << SDL_GAMEPAD_BUTTON_A)"]
    pub button_mask: Uint32,
    #[doc = "< A mask of which axes are valid for this controller\ne.g. (1 << SDL_GAMEPAD_AXIS_LEFTX)"]
    pub axis_mask: Uint32,
    #[doc = "< the name of the joystick"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "< User data pointer passed to callbacks"]
    pub userdata: *mut ::std::os::raw::c_void,
    #[doc = "< Called when the joystick state should be updated"]
    pub Update: ::std::option::Option<unsafe extern "C" fn(userdata: *mut ::std::os::raw::c_void)>,
    #[doc = "< Called when the player index is set"]
    pub SetPlayerIndex: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            player_index: ::std::os::raw::c_int,
        ),
    >,
    #[doc = "< Implements SDL_RumbleJoystick()"]
    pub Rumble: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            low_frequency_rumble: Uint16,
            high_frequency_rumble: Uint16,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "< Implements SDL_RumbleJoystickTriggers()"]
    pub RumbleTriggers: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            left_rumble: Uint16,
            right_rumble: Uint16,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "< Implements SDL_SetJoystickLED()"]
    pub SetLED: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            red: Uint8,
            green: Uint8,
            blue: Uint8,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "< Implements SDL_SendJoystickEffect()"]
    pub SendEffect: ::std::option::Option<
        unsafe extern "C" fn(
            userdata: *mut ::std::os::raw::c_void,
            data: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_SDL_VirtualJoystickDesc() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_VirtualJoystickDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_VirtualJoystickDesc>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_VirtualJoystickDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_VirtualJoystickDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_VirtualJoystickDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).naxes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(naxes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbuttons) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(nbuttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nhats) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(nhats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(button_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis_mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(axis_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(Update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetPlayerIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SetPlayerIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rumble) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(Rumble)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RumbleTriggers) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(RumbleTriggers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetLED) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SetLED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SendEffect) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_VirtualJoystickDesc),
            "::",
            stringify!(SendEffect)
        )
    );
}
extern "C" {
    #[doc = " Attach a new virtual joystick with extended properties.\n\n \\param desc Joystick description\n \\returns the joystick instance ID, or 0 if an error occurred; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_AttachVirtualJoystickEx(desc: *const SDL_VirtualJoystickDesc) -> SDL_JoystickID;
}
extern "C" {
    #[doc = " Detach a virtual joystick.\n\n \\param instance_id the joystick instance ID, previously returned from\n                    SDL_AttachVirtualJoystick()\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_DetachVirtualJoystick(instance_id: SDL_JoystickID) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether or not a joystick is virtual.\n\n \\param instance_id the joystick instance ID\n \\returns SDL_TRUE if the joystick is virtual, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_IsJoystickVirtual(instance_id: SDL_JoystickID) -> SDL_bool;
}
extern "C" {
    #[doc = " Set values on an opened, virtual-joystick's axis.\n\n Please note that values set here will not be applied until the next call to\n SDL_UpdateJoysticks, which can either be called directly, or can be called\n indirectly through various other SDL APIs, including, but not limited to\n the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n SDL_WaitEvent.\n\n Note that when sending trigger axes, you should scale the value to the full\n range of Sint16. For example, a trigger at rest would have the value of\n `SDL_JOYSTICK_AXIS_MIN`.\n\n \\param joystick the virtual joystick on which to set state.\n \\param axis the specific axis on the virtual joystick to set.\n \\param value the new value for the specified axis.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetJoystickVirtualAxis(
        joystick: *mut SDL_Joystick,
        axis: ::std::os::raw::c_int,
        value: Sint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set values on an opened, virtual-joystick's button.\n\n Please note that values set here will not be applied until the next call to\n SDL_UpdateJoysticks, which can either be called directly, or can be called\n indirectly through various other SDL APIs, including, but not limited to\n the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n SDL_WaitEvent.\n\n \\param joystick the virtual joystick on which to set state.\n \\param button the specific button on the virtual joystick to set.\n \\param value the new value for the specified button.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetJoystickVirtualButton(
        joystick: *mut SDL_Joystick,
        button: ::std::os::raw::c_int,
        value: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set values on an opened, virtual-joystick's hat.\n\n Please note that values set here will not be applied until the next call to\n SDL_UpdateJoysticks, which can either be called directly, or can be called\n indirectly through various other SDL APIs, including, but not limited to\n the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n SDL_WaitEvent.\n\n \\param joystick the virtual joystick on which to set state.\n \\param hat the specific hat on the virtual joystick to set.\n \\param value the new value for the specified hat.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetJoystickVirtualHat(
        joystick: *mut SDL_Joystick,
        hat: ::std::os::raw::c_int,
        value: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a joystick.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the name of the selected joystick. If no name can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstanceName\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoystickName(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the implementation dependent path of a joystick.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the path of the selected joystick. If no path can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstancePath"]
    pub fn SDL_GetJoystickPath(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the player index of an opened joystick.\n\n For XInput controllers this returns the XInput user index. Many joysticks\n will not be able to supply this information.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the player index, or -1 if it's not available.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickPlayerIndex(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the player index of an opened joystick.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\param player_index Player index to assign to this joystick, or -1 to clear\n                     the player index and turn off player LEDs.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetJoystickPlayerIndex(
        joystick: *mut SDL_Joystick,
        player_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the implementation-dependent GUID for the joystick.\n\n This function requires an open joystick.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the GUID of the given joystick. If called on an invalid index,\n          this function returns a zero GUID; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstanceGUID\n \\sa SDL_GetJoystickGUIDString"]
    pub fn SDL_GetJoystickGUID(joystick: *mut SDL_Joystick) -> SDL_JoystickGUID;
}
extern "C" {
    #[doc = " Get the USB vendor ID of an opened joystick, if available.\n\n If the vendor ID isn't available this function returns 0.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the USB vendor ID of the selected joystick, or 0 if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickVendor(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    #[doc = " Get the USB product ID of an opened joystick, if available.\n\n If the product ID isn't available this function returns 0.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the USB product ID of the selected joystick, or 0 if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickProduct(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    #[doc = " Get the product version of an opened joystick, if available.\n\n If the product version isn't available this function returns 0.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the product version of the selected joystick, or 0 if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickProductVersion(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    #[doc = " Get the firmware version of an opened joystick, if available.\n\n If the firmware version isn't available this function returns 0.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the firmware version of the selected joystick, or 0 if\n          unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickFirmwareVersion(joystick: *mut SDL_Joystick) -> Uint16;
}
extern "C" {
    #[doc = " Get the serial number of an opened joystick, if available.\n\n Returns the serial number of the joystick, or NULL if it is not available.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the serial number of the selected joystick, or NULL if\n          unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickSerial(joystick: *mut SDL_Joystick) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the type of an opened joystick.\n\n \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n \\returns the SDL_JoystickType of the selected joystick.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickType(joystick: *mut SDL_Joystick) -> SDL_JoystickType;
}
extern "C" {
    #[doc = " Get an ASCII string representation for a given SDL_JoystickGUID.\n\n You should supply at least 33 bytes for pszGUID.\n\n \\param guid the SDL_JoystickGUID you wish to convert to string\n \\param pszGUID buffer in which to write the ASCII string\n \\param cbGUID the size of pszGUID\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstanceGUID\n \\sa SDL_GetJoystickGUID\n \\sa SDL_GetJoystickGUIDFromString"]
    pub fn SDL_GetJoystickGUIDString(
        guid: SDL_JoystickGUID,
        pszGUID: *mut ::std::os::raw::c_char,
        cbGUID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a GUID string into a SDL_JoystickGUID structure.\n\n Performs no error checking. If this function is given a string containing\n an invalid GUID, the function will silently succeed, but the GUID generated\n will not be useful.\n\n \\param pchGUID string containing an ASCII representation of a GUID\n \\returns a SDL_JoystickGUID structure.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickGUIDString"]
    pub fn SDL_GetJoystickGUIDFromString(
        pchGUID: *const ::std::os::raw::c_char,
    ) -> SDL_JoystickGUID;
}
extern "C" {
    #[doc = " Get the device information encoded in a SDL_JoystickGUID structure\n\n \\param guid the SDL_JoystickGUID you wish to get info about\n \\param vendor A pointer filled in with the device VID, or 0 if not\n               available\n \\param product A pointer filled in with the device PID, or 0 if not\n                available\n \\param version A pointer filled in with the device version, or 0 if not\n                available\n \\param crc16 A pointer filled in with a CRC used to distinguish different\n              products with the same VID/PID, or 0 if not available\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstanceGUID"]
    pub fn SDL_GetJoystickGUIDInfo(
        guid: SDL_JoystickGUID,
        vendor: *mut Uint16,
        product: *mut Uint16,
        version: *mut Uint16,
        crc16: *mut Uint16,
    );
}
extern "C" {
    #[doc = " Get the status of a specified joystick.\n\n \\param joystick the joystick to query\n \\returns SDL_TRUE if the joystick has been opened, SDL_FALSE if it has not;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CloseJoystick\n \\sa SDL_OpenJoystick"]
    pub fn SDL_JoystickConnected(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the instance ID of an opened joystick.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\returns the instance ID of the specified joystick on success or 0 on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetJoystickInstanceID(joystick: *mut SDL_Joystick) -> SDL_JoystickID;
}
extern "C" {
    #[doc = " Get the number of general axis controls on a joystick.\n\n Often, the directional pad on a game controller will either look like 4\n separate buttons or a POV hat, and not axes, but all of this is up to the\n device and platform.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\returns the number of axis controls/number of axes on success or a\n          negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickAxis\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetNumJoystickAxes(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of POV hats on a joystick.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\returns the number of POV hats on success or a negative error code on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickHat\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetNumJoystickHats(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of buttons on a joystick.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\returns the number of buttons on success or a negative error code on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickButton\n \\sa SDL_OpenJoystick"]
    pub fn SDL_GetNumJoystickButtons(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the state of joystick event processing.\n\n If joystick events are disabled, you must call SDL_UpdateJoysticks()\n yourself and check the state of the joystick when you want joystick\n information.\n\n \\param enabled whether to process joystick events or not\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_JoystickEventsEnabled"]
    pub fn SDL_SetJoystickEventsEnabled(enabled: SDL_bool);
}
extern "C" {
    #[doc = " Query the state of joystick event processing.\n\n If joystick events are disabled, you must call SDL_UpdateJoysticks()\n yourself and check the state of the joystick when you want joystick\n information.\n\n \\returns SDL_TRUE if joystick events are being processed, SDL_FALSE\n          otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetJoystickEventsEnabled"]
    pub fn SDL_JoystickEventsEnabled() -> SDL_bool;
}
extern "C" {
    #[doc = " Update the current state of the open joysticks.\n\n This is called automatically by the event loop if any joystick events are\n enabled.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UpdateJoysticks();
}
extern "C" {
    #[doc = " Get the current state of an axis control on a joystick.\n\n SDL makes no promises about what part of the joystick any given axis refers\n to. Your game should have some sort of configuration UI to let users\n specify what each axis should be bound to. Alternately, SDL's higher-level\n Game Controller API makes a great effort to apply order to this lower-level\n interface, so you know that a specific axis is the \"left thumb stick,\" etc.\n\n The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to\n 32767) representing the current position of the axis. It may be necessary\n to impose certain tolerances on these values to account for jitter.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\param axis the axis to query; the axis indices start at index 0\n \\returns a 16-bit signed integer representing the current position of the\n          axis or 0 on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumJoystickAxes"]
    pub fn SDL_GetJoystickAxis(joystick: *mut SDL_Joystick, axis: ::std::os::raw::c_int) -> Sint16;
}
extern "C" {
    #[doc = " Get the initial state of an axis control on a joystick.\n\n The state is a value ranging from -32768 to 32767.\n\n The axis indices start at index 0.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\param axis the axis to query; the axis indices start at index 0\n \\param state Upon return, the initial value is supplied here.\n \\returns SDL_TRUE if this axis has any initial value, or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickAxisInitialState(
        joystick: *mut SDL_Joystick,
        axis: ::std::os::raw::c_int,
        state: *mut Sint16,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the current state of a POV hat on a joystick.\n\n The returned value will be one of the following positions:\n\n - `SDL_HAT_CENTERED`\n - `SDL_HAT_UP`\n - `SDL_HAT_RIGHT`\n - `SDL_HAT_DOWN`\n - `SDL_HAT_LEFT`\n - `SDL_HAT_RIGHTUP`\n - `SDL_HAT_RIGHTDOWN`\n - `SDL_HAT_LEFTUP`\n - `SDL_HAT_LEFTDOWN`\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\param hat the hat index to get the state from; indices start at index 0\n \\returns the current hat position.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumJoystickHats"]
    pub fn SDL_GetJoystickHat(joystick: *mut SDL_Joystick, hat: ::std::os::raw::c_int) -> Uint8;
}
extern "C" {
    #[doc = " Get the current state of a button on a joystick.\n\n \\param joystick an SDL_Joystick structure containing joystick information\n \\param button the button index to get the state from; indices start at\n               index 0\n \\returns 1 if the specified button is pressed, 0 otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumJoystickButtons"]
    pub fn SDL_GetJoystickButton(
        joystick: *mut SDL_Joystick,
        button: ::std::os::raw::c_int,
    ) -> Uint8;
}
extern "C" {
    #[doc = " Start a rumble effect.\n\n Each call to this function cancels any previous rumble effect, and calling\n it with 0 intensity stops any rumbling.\n\n \\param joystick The joystick to vibrate\n \\param low_frequency_rumble The intensity of the low frequency (left)\n                             rumble motor, from 0 to 0xFFFF\n \\param high_frequency_rumble The intensity of the high frequency (right)\n                              rumble motor, from 0 to 0xFFFF\n \\param duration_ms The duration of the rumble effect, in milliseconds\n \\returns 0, or -1 if rumble isn't supported on this joystick\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_JoystickHasRumble"]
    pub fn SDL_RumbleJoystick(
        joystick: *mut SDL_Joystick,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Start a rumble effect in the joystick's triggers\n\n Each call to this function cancels any previous trigger rumble effect, and\n calling it with 0 intensity stops any rumbling.\n\n Note that this is rumbling of the _triggers_ and not the game controller as\n a whole. This is currently only supported on Xbox One controllers. If you\n want the (more common) whole-controller rumble, use SDL_RumbleJoystick()\n instead.\n\n \\param joystick The joystick to vibrate\n \\param left_rumble The intensity of the left trigger rumble motor, from 0\n                    to 0xFFFF\n \\param right_rumble The intensity of the right trigger rumble motor, from 0\n                     to 0xFFFF\n \\param duration_ms The duration of the rumble effect, in milliseconds\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_JoystickHasRumbleTriggers"]
    pub fn SDL_RumbleJoystickTriggers(
        joystick: *mut SDL_Joystick,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether a joystick has an LED.\n\n An example of a joystick LED is the light on the back of a PlayStation 4's\n DualShock 4 controller.\n\n \\param joystick The joystick to query\n \\returns SDL_TRUE if the joystick has a modifiable LED, SDL_FALSE\n          otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_JoystickHasLED(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    #[doc = " Query whether a joystick has rumble support.\n\n \\param joystick The joystick to query\n \\returns SDL_TRUE if the joystick has rumble, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RumbleJoystick"]
    pub fn SDL_JoystickHasRumble(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    #[doc = " Query whether a joystick has rumble support on triggers.\n\n \\param joystick The joystick to query\n \\returns SDL_TRUE if the joystick has trigger rumble, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RumbleJoystickTriggers"]
    pub fn SDL_JoystickHasRumbleTriggers(joystick: *mut SDL_Joystick) -> SDL_bool;
}
extern "C" {
    #[doc = " Update a joystick's LED color.\n\n An example of a joystick LED is the light on the back of a PlayStation 4's\n DualShock 4 controller.\n\n \\param joystick The joystick to update\n \\param red The intensity of the red LED\n \\param green The intensity of the green LED\n \\param blue The intensity of the blue LED\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetJoystickLED(
        joystick: *mut SDL_Joystick,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Send a joystick specific effect packet\n\n \\param joystick The joystick to affect\n \\param data The data to send to the joystick\n \\param size The size of the data to send to the joystick\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SendJoystickEffect(
        joystick: *mut SDL_Joystick,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Close a joystick previously opened with SDL_OpenJoystick().\n\n \\param joystick The joystick device to close\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenJoystick"]
    pub fn SDL_CloseJoystick(joystick: *mut SDL_Joystick);
}
extern "C" {
    #[doc = " Get the battery level of a joystick as SDL_JoystickPowerLevel.\n\n \\param joystick the SDL_Joystick to query\n \\returns the current battery level as SDL_JoystickPowerLevel on success or\n          `SDL_JOYSTICK_POWER_UNKNOWN` if it is unknown\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetJoystickPowerLevel(joystick: *mut SDL_Joystick) -> SDL_JoystickPowerLevel;
}
#[doc = " The structure used to identify an SDL gamepad"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Gamepad {
    _unused: [u8; 0],
}
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_UNKNOWN: SDL_GamepadType = 0;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_STANDARD: SDL_GamepadType = 1;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_XBOX360: SDL_GamepadType = 2;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_XBOXONE: SDL_GamepadType = 3;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_PS3: SDL_GamepadType = 4;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_PS4: SDL_GamepadType = 5;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_PS5: SDL_GamepadType = 6;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO: SDL_GamepadType = 7;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT: SDL_GamepadType = 8;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT: SDL_GamepadType = 9;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR: SDL_GamepadType = 10;
pub const SDL_GamepadType_SDL_GAMEPAD_TYPE_MAX: SDL_GamepadType = 11;
pub type SDL_GamepadType = ::std::os::raw::c_uint;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_INVALID: SDL_GamepadButton = -1;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_A: SDL_GamepadButton = 0;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_B: SDL_GamepadButton = 1;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_X: SDL_GamepadButton = 2;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_Y: SDL_GamepadButton = 3;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_BACK: SDL_GamepadButton = 4;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_GUIDE: SDL_GamepadButton = 5;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_START: SDL_GamepadButton = 6;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_LEFT_STICK: SDL_GamepadButton = 7;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_RIGHT_STICK: SDL_GamepadButton = 8;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_LEFT_SHOULDER: SDL_GamepadButton = 9;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER: SDL_GamepadButton = 10;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_DPAD_UP: SDL_GamepadButton = 11;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_DPAD_DOWN: SDL_GamepadButton = 12;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_DPAD_LEFT: SDL_GamepadButton = 13;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_DPAD_RIGHT: SDL_GamepadButton = 14;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_MISC1: SDL_GamepadButton = 15;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1: SDL_GamepadButton = 16;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_LEFT_PADDLE1: SDL_GamepadButton = 17;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2: SDL_GamepadButton = 18;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_LEFT_PADDLE2: SDL_GamepadButton = 19;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_TOUCHPAD: SDL_GamepadButton = 20;
pub const SDL_GamepadButton_SDL_GAMEPAD_BUTTON_MAX: SDL_GamepadButton = 21;
#[doc = "  The list of buttons available on a gamepad"]
pub type SDL_GamepadButton = ::std::os::raw::c_int;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_INVALID: SDL_GamepadAxis = -1;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_LEFTX: SDL_GamepadAxis = 0;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_LEFTY: SDL_GamepadAxis = 1;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_RIGHTX: SDL_GamepadAxis = 2;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_RIGHTY: SDL_GamepadAxis = 3;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_LEFT_TRIGGER: SDL_GamepadAxis = 4;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_RIGHT_TRIGGER: SDL_GamepadAxis = 5;
pub const SDL_GamepadAxis_SDL_GAMEPAD_AXIS_MAX: SDL_GamepadAxis = 6;
#[doc = "  The list of axes available on a gamepad\n\n  Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to SDL_JOYSTICK_AXIS_MAX,\n  and are centered within ~8000 of zero, though advanced UI will allow users to set\n  or autodetect the dead zone, which varies between gamepads.\n\n  Trigger axis values range from 0 to SDL_JOYSTICK_AXIS_MAX."]
pub type SDL_GamepadAxis = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Add support for gamepads that SDL is unaware of or change the binding of an\n existing gamepad.\n\n The mapping string has the format \"GUID,name,mapping\", where GUID is the\n string value from SDL_GetJoystickGUIDString(), name is the human readable\n string for the device and mappings are gamepad mappings to joystick ones.\n Under Windows there is a reserved GUID of \"xinput\" that covers all XInput\n devices. The mapping format for joystick is:\n\n - `bX`: a joystick button, index X\n - `hX.Y`: hat X with value Y\n - `aX`: axis X of the joystick\n\n Buttons can be used as a gamepad axes and vice versa.\n\n This string shows an example of a valid mapping for a gamepad:\n\n ```c\n \"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\"\n ```\n\n \\param mapping the mapping string\n \\returns 1 if a new mapping is added, 0 if an existing mapping is updated,\n          -1 on error; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadMapping\n \\sa SDL_GetGamepadMappingForGUID"]
    pub fn SDL_AddGamepadMapping(mapping: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Load a set of gamepad mappings from a seekable SDL data stream.\n\n You can call this function several times, if needed, to load different\n database files.\n\n If a new mapping is loaded for an already known gamepad GUID, the later\n version will overwrite the one currently loaded.\n\n Mappings not belonging to the current platform or with no platform field\n specified will be ignored (i.e. mappings for Linux will be ignored in\n Windows, etc).\n\n This function will load the text database entirely in memory before\n processing it, so take this into consideration if you are in a memory\n constrained environment.\n\n \\param src the data stream for the mappings to be added\n \\param freesrc if SDL_TRUE, calls SDL_RWclose() on `src` before returning,\n                even in the case of an error\n \\returns the number of mappings added or -1 on error; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddGamepadMapping\n \\sa SDL_AddGamepadMappingsFromFile\n \\sa SDL_GetGamepadMappingForGUID"]
    pub fn SDL_AddGamepadMappingsFromRW(
        src: *mut SDL_RWops,
        freesrc: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Load a set of gamepad mappings from a file.\n\n You can call this function several times, if needed, to load different\n database files.\n\n If a new mapping is loaded for an already known gamepad GUID, the later\n version will overwrite the one currently loaded.\n\n Mappings not belonging to the current platform or with no platform field\n specified will be ignored (i.e. mappings for Linux will be ignored in\n Windows, etc).\n\n \\param file the mappings file to load\n \\returns the number of mappings added or -1 on error; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddGamepadMapping\n \\sa SDL_AddGamepadMappingsFromRW\n \\sa SDL_GetGamepadMappingForGUID"]
    pub fn SDL_AddGamepadMappingsFromFile(
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Reinitialize the SDL mapping database to its initial state.\n\n This will generate gamepad events as needed if device mappings change.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ReloadGamepadMappings() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of mappings installed.\n\n \\returns the number of mappings.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetNumGamepadMappings() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the mapping at a particular index.\n\n \\param mapping_index mapping index\n \\returns the mapping string. Must be freed with SDL_free(). Returns NULL if\n          the index is out of range.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadMappingForIndex(
        mapping_index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the gamepad mapping string for a given GUID.\n\n The returned string must be freed with SDL_free().\n\n \\param guid a structure containing the GUID for which a mapping is desired\n \\returns a mapping string or NULL on error; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetJoystickInstanceGUID\n \\sa SDL_GetJoystickGUID"]
    pub fn SDL_GetGamepadMappingForGUID(guid: SDL_JoystickGUID) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the current mapping of a gamepad.\n\n The returned string must be freed with SDL_free().\n\n Details about mappings are discussed with SDL_AddGamepadMapping().\n\n \\param gamepad the gamepad you want to get the current mapping for\n \\returns a string that has the gamepad's mapping or NULL if no mapping is\n          available; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddGamepadMapping\n \\sa SDL_GetGamepadMappingForGUID\n \\sa SDL_SetGamepadMapping"]
    pub fn SDL_GetGamepadMapping(gamepad: *mut SDL_Gamepad) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set the current mapping of a joystick or gamepad.\n\n Details about mappings are discussed with SDL_AddGamepadMapping().\n\n \\param instance_id the joystick instance ID\n \\param mapping the mapping to use for this device, or NULL to clear the\n                mapping\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddGamepadMapping\n \\sa SDL_GetGamepadMapping"]
    pub fn SDL_SetGamepadMapping(
        instance_id: SDL_JoystickID,
        mapping: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a list of currently connected gamepads.\n\n \\param count a pointer filled in with the number of gamepads returned\n \\returns a 0 terminated array of joystick instance IDs which should be\n          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n          more details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepads(count: *mut ::std::os::raw::c_int) -> *mut SDL_JoystickID;
}
extern "C" {
    #[doc = " Check if the given joystick is supported by the gamepad interface.\n\n \\param instance_id the joystick instance ID\n \\returns SDL_TRUE if the given joystick is supported by the gamepad\n          interface, SDL_FALSE if it isn't or it's an invalid index.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenGamepad"]
    pub fn SDL_IsGamepad(instance_id: SDL_JoystickID) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the name of the selected gamepad. If no name can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadName\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepadInstanceName(instance_id: SDL_JoystickID)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the implementation dependent path of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the path of the selected gamepad. If no path can be found, this\n          function returns NULL; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadPath\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepadInstancePath(instance_id: SDL_JoystickID)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the player index of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the player index of a gamepad, or -1 if it's not available\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadPlayerIndex\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepadInstancePlayerIndex(instance_id: SDL_JoystickID) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the implementation-dependent GUID of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the GUID of the selected gamepad. If called on an invalid index,\n          this function returns a zero GUID\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadGUID\n \\sa SDL_GetGamepadGUIDString"]
    pub fn SDL_GetGamepadInstanceGUID(instance_id: SDL_JoystickID) -> SDL_JoystickGUID;
}
extern "C" {
    #[doc = " Get the USB vendor ID of a gamepad, if available.\n\n This can be called before any gamepads are opened. If the vendor ID isn't\n available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the USB vendor ID of the selected gamepad. If called on an invalid\n          index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadInstanceVendor(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the USB product ID of a gamepad, if available.\n\n This can be called before any gamepads are opened. If the product ID isn't\n available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the USB product ID of the selected gamepad. If called on an\n          invalid index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadInstanceProduct(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the product version of a gamepad, if available.\n\n This can be called before any gamepads are opened. If the product version\n isn't available this function returns 0.\n\n \\param instance_id the joystick instance ID\n \\returns the product version of the selected gamepad. If called on an\n          invalid index, this function returns zero\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadInstanceProductVersion(instance_id: SDL_JoystickID) -> Uint16;
}
extern "C" {
    #[doc = " Get the type of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the gamepad type.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadInstanceType(instance_id: SDL_JoystickID) -> SDL_GamepadType;
}
extern "C" {
    #[doc = " Get the type of a gamepad, ignoring any mapping override.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the gamepad type.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRealGamepadInstanceType(instance_id: SDL_JoystickID) -> SDL_GamepadType;
}
extern "C" {
    #[doc = " Get the mapping of a gamepad.\n\n This can be called before any gamepads are opened.\n\n \\param instance_id the joystick instance ID\n \\returns the mapping string. Must be freed with SDL_free(). Returns NULL if\n          no mapping is available.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadInstanceMapping(
        instance_id: SDL_JoystickID,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Open a gamepad for use.\n\n \\param instance_id the joystick instance ID\n \\returns a gamepad identifier or NULL if an error occurred; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CloseGamepad\n \\sa SDL_IsGamepad"]
    pub fn SDL_OpenGamepad(instance_id: SDL_JoystickID) -> *mut SDL_Gamepad;
}
extern "C" {
    #[doc = " Get the SDL_Gamepad associated with a joystick instance ID, if it has been\n opened.\n\n \\param instance_id the joystick instance ID of the gamepad\n \\returns an SDL_Gamepad on success or NULL on failure or if it hasn't been\n          opened yet; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadFromInstanceID(instance_id: SDL_JoystickID) -> *mut SDL_Gamepad;
}
extern "C" {
    #[doc = " Get the SDL_Gamepad associated with a player index.\n\n \\param player_index the player index, which different from the instance ID\n \\returns the SDL_Gamepad associated with a player index.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadPlayerIndex\n \\sa SDL_SetGamepadPlayerIndex"]
    pub fn SDL_GetGamepadFromPlayerIndex(player_index: ::std::os::raw::c_int) -> *mut SDL_Gamepad;
}
extern "C" {
    #[doc = " Get the instance ID of an opened gamepad.\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n \\returns the instance ID of the specified gamepad on success or 0 on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepadInstanceID(gamepad: *mut SDL_Gamepad) -> SDL_JoystickID;
}
extern "C" {
    #[doc = " Get the implementation-dependent name for an opened gamepad.\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n \\returns the implementation dependent name for the gamepad, or NULL if\n          there is no name or the identifier passed is invalid.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadInstanceName\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GetGamepadName(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the implementation-dependent path for an opened gamepad.\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n \\returns the implementation dependent path for the gamepad, or NULL if\n          there is no path or the identifier passed is invalid.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadInstancePath"]
    pub fn SDL_GetGamepadPath(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the type of an opened gamepad.\n\n \\param gamepad the gamepad object to query.\n \\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it's not\n          available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadInstanceType"]
    pub fn SDL_GetGamepadType(gamepad: *mut SDL_Gamepad) -> SDL_GamepadType;
}
extern "C" {
    #[doc = " Get the type of an opened gamepad, ignoring any mapping override.\n\n \\param gamepad the gamepad object to query.\n \\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it's not\n          available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRealGamepadInstanceType"]
    pub fn SDL_GetRealGamepadType(gamepad: *mut SDL_Gamepad) -> SDL_GamepadType;
}
extern "C" {
    #[doc = " Get the player index of an opened gamepad.\n\n For XInput gamepads this returns the XInput user index.\n\n \\param gamepad the gamepad object to query.\n \\returns the player index for gamepad, or -1 if it's not available.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadPlayerIndex(gamepad: *mut SDL_Gamepad) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the player index of an opened gamepad.\n\n \\param gamepad the gamepad object to adjust.\n \\param player_index Player index to assign to this gamepad, or -1 to clear\n                     the player index and turn off player LEDs.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetGamepadPlayerIndex(
        gamepad: *mut SDL_Gamepad,
        player_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the USB vendor ID of an opened gamepad, if available.\n\n If the vendor ID isn't available this function returns 0.\n\n \\param gamepad the gamepad object to query.\n \\returns the USB vendor ID, or zero if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadVendor(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    #[doc = " Get the USB product ID of an opened gamepad, if available.\n\n If the product ID isn't available this function returns 0.\n\n \\param gamepad the gamepad object to query.\n \\returns the USB product ID, or zero if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadProduct(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    #[doc = " Get the product version of an opened gamepad, if available.\n\n If the product version isn't available this function returns 0.\n\n \\param gamepad the gamepad object to query.\n \\returns the USB product version, or zero if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadProductVersion(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    #[doc = " Get the firmware version of an opened gamepad, if available.\n\n If the firmware version isn't available this function returns 0.\n\n \\param gamepad the gamepad object to query.\n \\returns the gamepad firmware version, or zero if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadFirmwareVersion(gamepad: *mut SDL_Gamepad) -> Uint16;
}
extern "C" {
    #[doc = " Get the serial number of an opened gamepad, if available.\n\n Returns the serial number of the gamepad, or NULL if it is not available.\n\n \\param gamepad the gamepad object to query.\n \\returns the serial number, or NULL if unavailable.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadSerial(gamepad: *mut SDL_Gamepad) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the battery level of a gamepad, if available.\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n \\returns the current battery level as SDL_JoystickPowerLevel on success or\n          `SDL_JOYSTICK_POWER_UNKNOWN` if it is unknown\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadPowerLevel(gamepad: *mut SDL_Gamepad) -> SDL_JoystickPowerLevel;
}
extern "C" {
    #[doc = " Check if a gamepad has been opened and is currently connected.\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n \\returns SDL_TRUE if the gamepad has been opened and is currently\n          connected, or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CloseGamepad\n \\sa SDL_OpenGamepad"]
    pub fn SDL_GamepadConnected(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the underlying joystick from a gamepad\n\n This function will give you a SDL_Joystick object, which allows you to use\n the SDL_Joystick functions with a SDL_Gamepad object. This would be useful\n for getting a joystick's position at any given time, even if it hasn't\n moved (moving it would produce an event, which would have the axis' value).\n\n The pointer returned is owned by the SDL_Gamepad. You should not call\n SDL_CloseJoystick() on it, for example, since doing so will likely cause\n SDL to crash.\n\n \\param gamepad the gamepad object that you want to get a joystick from\n \\returns an SDL_Joystick object; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadJoystick(gamepad: *mut SDL_Gamepad) -> *mut SDL_Joystick;
}
extern "C" {
    #[doc = " Set the state of gamepad event processing.\n\n If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself\n and check the state of the gamepad when you want gamepad information.\n\n \\param enabled whether to process gamepad events or not\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GamepadEventsEnabled"]
    pub fn SDL_SetGamepadEventsEnabled(enabled: SDL_bool);
}
extern "C" {
    #[doc = " Query the state of gamepad event processing.\n\n If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself\n and check the state of the gamepad when you want gamepad information.\n\n \\returns SDL_TRUE if gamepad events are being processed, SDL_FALSE\n          otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetGamepadEventsEnabled"]
    pub fn SDL_GamepadEventsEnabled() -> SDL_bool;
}
extern "C" {
    #[doc = " Manually pump gamepad updates if not using the loop.\n\n This function is called automatically by the event loop if events are\n enabled. Under such circumstances, it will not be necessary to call this\n function.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UpdateGamepads();
}
extern "C" {
    #[doc = " Convert a string into SDL_GamepadType enum.\n\n This function is called internally to translate SDL_Gamepad mapping strings\n for the underlying joystick device into the consistent SDL_Gamepad mapping.\n You do not normally need to call this function unless you are parsing\n SDL_Gamepad mappings in your own code.\n\n \\param str string representing a SDL_GamepadType type\n \\returns the SDL_GamepadType enum corresponding to the input string, or\n          `SDL_GAMEPAD_TYPE_UNKNOWN` if no match was found.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadStringForType"]
    pub fn SDL_GetGamepadTypeFromString(str_: *const ::std::os::raw::c_char) -> SDL_GamepadType;
}
extern "C" {
    #[doc = " Convert from an SDL_GamepadType enum to a string.\n\n The caller should not SDL_free() the returned string.\n\n \\param type an enum value for a given SDL_GamepadType\n \\returns a string for the given type, or NULL if an invalid type is\n          specified. The string returned is of the format used by\n          SDL_Gamepad mapping strings.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadTypeFromString"]
    pub fn SDL_GetGamepadStringForType(type_: SDL_GamepadType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Convert a string into SDL_GamepadAxis enum.\n\n This function is called internally to translate SDL_Gamepad mapping strings\n for the underlying joystick device into the consistent SDL_Gamepad mapping.\n You do not normally need to call this function unless you are parsing\n SDL_Gamepad mappings in your own code.\n\n Note specially that \"righttrigger\" and \"lefttrigger\" map to\n `SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,\n respectively.\n\n \\param str string representing a SDL_Gamepad axis\n \\returns the SDL_GamepadAxis enum corresponding to the input string, or\n          `SDL_GAMEPAD_AXIS_INVALID` if no match was found.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadStringForAxis"]
    pub fn SDL_GetGamepadAxisFromString(str_: *const ::std::os::raw::c_char) -> SDL_GamepadAxis;
}
extern "C" {
    #[doc = " Convert from an SDL_GamepadAxis enum to a string.\n\n The caller should not SDL_free() the returned string.\n\n \\param axis an enum value for a given SDL_GamepadAxis\n \\returns a string for the given axis, or NULL if an invalid axis is\n          specified. The string returned is of the format used by\n          SDL_Gamepad mapping strings.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadAxisFromString"]
    pub fn SDL_GetGamepadStringForAxis(axis: SDL_GamepadAxis) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Query whether a gamepad has a given axis.\n\n This merely reports whether the gamepad's mapping defined this axis, as\n that is all the information SDL has about the physical device.\n\n \\param gamepad a gamepad\n \\param axis an axis enum value (an SDL_GamepadAxis value)\n \\returns SDL_TRUE if the gamepad has this axis, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GamepadHasAxis(gamepad: *mut SDL_Gamepad, axis: SDL_GamepadAxis) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the current state of an axis control on a gamepad.\n\n The axis indices start at index 0.\n\n The state is a value ranging from -32768 to 32767. Triggers, however, range\n from 0 to 32767 (they never return a negative value).\n\n \\param gamepad a gamepad\n \\param axis an axis index (one of the SDL_GamepadAxis values)\n \\returns axis state (including 0) on success or 0 (also) on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadButton"]
    pub fn SDL_GetGamepadAxis(gamepad: *mut SDL_Gamepad, axis: SDL_GamepadAxis) -> Sint16;
}
extern "C" {
    #[doc = " Convert a string into an SDL_GamepadButton enum.\n\n This function is called internally to translate SDL_Gamepad mapping strings\n for the underlying joystick device into the consistent SDL_Gamepad mapping.\n You do not normally need to call this function unless you are parsing\n SDL_Gamepad mappings in your own code.\n\n \\param str string representing a SDL_Gamepad axis\n \\returns the SDL_GamepadButton enum corresponding to the input string, or\n          `SDL_GAMEPAD_AXIS_INVALID` if no match was found.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadButtonFromString(str_: *const ::std::os::raw::c_char)
        -> SDL_GamepadButton;
}
extern "C" {
    #[doc = " Convert from an SDL_GamepadButton enum to a string.\n\n The caller should not SDL_free() the returned string.\n\n \\param button an enum value for a given SDL_GamepadButton\n \\returns a string for the given button, or NULL if an invalid button is\n          specified. The string returned is of the format used by\n          SDL_Gamepad mapping strings.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadButtonFromString"]
    pub fn SDL_GetGamepadStringForButton(
        button: SDL_GamepadButton,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Query whether a gamepad has a given button.\n\n This merely reports whether the gamepad's mapping defined this button, as\n that is all the information SDL has about the physical device.\n\n \\param gamepad a gamepad\n \\param button a button enum value (an SDL_GamepadButton value)\n \\returns SDL_TRUE if the gamepad has this button, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GamepadHasButton(gamepad: *mut SDL_Gamepad, button: SDL_GamepadButton) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the current state of a button on a gamepad.\n\n \\param gamepad a gamepad\n \\param button a button index (one of the SDL_GamepadButton values)\n \\returns 1 for pressed state or 0 for not pressed state or error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadAxis"]
    pub fn SDL_GetGamepadButton(gamepad: *mut SDL_Gamepad, button: SDL_GamepadButton) -> Uint8;
}
extern "C" {
    #[doc = " Get the number of touchpads on a gamepad.\n\n \\param gamepad a gamepad\n \\returns number of touchpads\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetNumGamepadTouchpads(gamepad: *mut SDL_Gamepad) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of supported simultaneous fingers on a touchpad on a game\n gamepad.\n\n \\param gamepad a gamepad\n \\param touchpad a touchpad\n \\returns number of supported simultaneous fingers\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetNumGamepadTouchpadFingers(
        gamepad: *mut SDL_Gamepad,
        touchpad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current state of a finger on a touchpad on a gamepad.\n\n \\param gamepad a gamepad\n \\param touchpad a touchpad\n \\param finger a finger\n \\param state filled with state\n \\param x filled with x position\n \\param y filled with y position\n \\param pressure filled with pressure value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadTouchpadFinger(
        gamepad: *mut SDL_Gamepad,
        touchpad: ::std::os::raw::c_int,
        finger: ::std::os::raw::c_int,
        state: *mut Uint8,
        x: *mut f32,
        y: *mut f32,
        pressure: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return whether a gamepad has a particular sensor.\n\n \\param gamepad The gamepad to query\n \\param type The type of sensor to query\n \\returns SDL_TRUE if the sensor exists, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GamepadHasSensor(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> SDL_bool;
}
extern "C" {
    #[doc = " Set whether data reporting for a gamepad sensor is enabled.\n\n \\param gamepad The gamepad to update\n \\param type The type of sensor to enable/disable\n \\param enabled Whether data reporting should be enabled\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetGamepadSensorEnabled(
        gamepad: *mut SDL_Gamepad,
        type_: SDL_SensorType,
        enabled: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether sensor data reporting is enabled for a gamepad.\n\n \\param gamepad The gamepad to query\n \\param type The type of sensor to query\n \\returns SDL_TRUE if the sensor is enabled, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GamepadSensorEnabled(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the data rate (number of events per second) of a gamepad sensor.\n\n \\param gamepad The gamepad to query\n \\param type The type of sensor to query\n \\returns the data rate, or 0.0f if the data rate is not available.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadSensorDataRate(gamepad: *mut SDL_Gamepad, type_: SDL_SensorType) -> f32;
}
extern "C" {
    #[doc = " Get the current state of a gamepad sensor.\n\n The number of values and interpretation of the data is sensor dependent.\n See SDL_sensor.h for the details for each type of sensor.\n\n \\param gamepad The gamepad to query\n \\param type The type of sensor to query\n \\param data A pointer filled with the current sensor state\n \\param num_values The number of values to write to data\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetGamepadSensorData(
        gamepad: *mut SDL_Gamepad,
        type_: SDL_SensorType,
        data: *mut f32,
        num_values: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Start a rumble effect on a gamepad.\n\n Each call to this function cancels any previous rumble effect, and calling\n it with 0 intensity stops any rumbling.\n\n \\param gamepad The gamepad to vibrate\n \\param low_frequency_rumble The intensity of the low frequency (left)\n                             rumble motor, from 0 to 0xFFFF\n \\param high_frequency_rumble The intensity of the high frequency (right)\n                              rumble motor, from 0 to 0xFFFF\n \\param duration_ms The duration of the rumble effect, in milliseconds\n \\returns 0, or -1 if rumble isn't supported on this gamepad\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GamepadHasRumble"]
    pub fn SDL_RumbleGamepad(
        gamepad: *mut SDL_Gamepad,
        low_frequency_rumble: Uint16,
        high_frequency_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Start a rumble effect in the gamepad's triggers.\n\n Each call to this function cancels any previous trigger rumble effect, and\n calling it with 0 intensity stops any rumbling.\n\n Note that this is rumbling of the _triggers_ and not the gamepad as a\n whole. This is currently only supported on Xbox One gamepads. If you want\n the (more common) whole-gamepad rumble, use SDL_RumbleGamepad() instead.\n\n \\param gamepad The gamepad to vibrate\n \\param left_rumble The intensity of the left trigger rumble motor, from 0\n                    to 0xFFFF\n \\param right_rumble The intensity of the right trigger rumble motor, from 0\n                     to 0xFFFF\n \\param duration_ms The duration of the rumble effect, in milliseconds\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GamepadHasRumbleTriggers"]
    pub fn SDL_RumbleGamepadTriggers(
        gamepad: *mut SDL_Gamepad,
        left_rumble: Uint16,
        right_rumble: Uint16,
        duration_ms: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether a gamepad has an LED.\n\n \\param gamepad The gamepad to query\n \\returns SDL_TRUE, or SDL_FALSE if this gamepad does not have a modifiable\n          LED\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GamepadHasLED(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    #[doc = " Query whether a gamepad has rumble support.\n\n \\param gamepad The gamepad to query\n \\returns SDL_TRUE, or SDL_FALSE if this gamepad does not have rumble\n          support\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RumbleGamepad"]
    pub fn SDL_GamepadHasRumble(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    #[doc = " Query whether a gamepad has rumble support on triggers.\n\n \\param gamepad The gamepad to query\n \\returns SDL_TRUE, or SDL_FALSE if this gamepad does not have trigger\n          rumble support\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RumbleGamepadTriggers"]
    pub fn SDL_GamepadHasRumbleTriggers(gamepad: *mut SDL_Gamepad) -> SDL_bool;
}
extern "C" {
    #[doc = " Update a gamepad's LED color.\n\n \\param gamepad The gamepad to update\n \\param red The intensity of the red LED\n \\param green The intensity of the green LED\n \\param blue The intensity of the blue LED\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetGamepadLED(
        gamepad: *mut SDL_Gamepad,
        red: Uint8,
        green: Uint8,
        blue: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Send a gamepad specific effect packet\n\n \\param gamepad The gamepad to affect\n \\param data The data to send to the gamepad\n \\param size The size of the data to send to the gamepad\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SendGamepadEffect(
        gamepad: *mut SDL_Gamepad,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Close a gamepad previously opened with SDL_OpenGamepad().\n\n \\param gamepad a gamepad identifier previously returned by\n                SDL_OpenGamepad()\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_OpenGamepad"]
    pub fn SDL_CloseGamepad(gamepad: *mut SDL_Gamepad);
}
extern "C" {
    #[doc = " Return the sfSymbolsName for a given button on a gamepad on Apple\n platforms.\n\n \\param gamepad the gamepad to query\n \\param button a button on the gamepad\n \\returns the sfSymbolsName or NULL if the name can't be found\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadAppleSFSymbolsNameForAxis"]
    pub fn SDL_GetGamepadAppleSFSymbolsNameForButton(
        gamepad: *mut SDL_Gamepad,
        button: SDL_GamepadButton,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.\n\n \\param gamepad the gamepad to query\n \\param axis an axis on the gamepad\n \\returns the sfSymbolsName or NULL if the name can't be found\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGamepadAppleSFSymbolsNameForButton"]
    pub fn SDL_GetGamepadAppleSFSymbolsNameForAxis(
        gamepad: *mut SDL_Gamepad,
        axis: SDL_GamepadAxis,
    ) -> *const ::std::os::raw::c_char;
}
pub const SDL_Scancode_SDL_SCANCODE_UNKNOWN: SDL_Scancode = 0;
pub const SDL_Scancode_SDL_SCANCODE_A: SDL_Scancode = 4;
pub const SDL_Scancode_SDL_SCANCODE_B: SDL_Scancode = 5;
pub const SDL_Scancode_SDL_SCANCODE_C: SDL_Scancode = 6;
pub const SDL_Scancode_SDL_SCANCODE_D: SDL_Scancode = 7;
pub const SDL_Scancode_SDL_SCANCODE_E: SDL_Scancode = 8;
pub const SDL_Scancode_SDL_SCANCODE_F: SDL_Scancode = 9;
pub const SDL_Scancode_SDL_SCANCODE_G: SDL_Scancode = 10;
pub const SDL_Scancode_SDL_SCANCODE_H: SDL_Scancode = 11;
pub const SDL_Scancode_SDL_SCANCODE_I: SDL_Scancode = 12;
pub const SDL_Scancode_SDL_SCANCODE_J: SDL_Scancode = 13;
pub const SDL_Scancode_SDL_SCANCODE_K: SDL_Scancode = 14;
pub const SDL_Scancode_SDL_SCANCODE_L: SDL_Scancode = 15;
pub const SDL_Scancode_SDL_SCANCODE_M: SDL_Scancode = 16;
pub const SDL_Scancode_SDL_SCANCODE_N: SDL_Scancode = 17;
pub const SDL_Scancode_SDL_SCANCODE_O: SDL_Scancode = 18;
pub const SDL_Scancode_SDL_SCANCODE_P: SDL_Scancode = 19;
pub const SDL_Scancode_SDL_SCANCODE_Q: SDL_Scancode = 20;
pub const SDL_Scancode_SDL_SCANCODE_R: SDL_Scancode = 21;
pub const SDL_Scancode_SDL_SCANCODE_S: SDL_Scancode = 22;
pub const SDL_Scancode_SDL_SCANCODE_T: SDL_Scancode = 23;
pub const SDL_Scancode_SDL_SCANCODE_U: SDL_Scancode = 24;
pub const SDL_Scancode_SDL_SCANCODE_V: SDL_Scancode = 25;
pub const SDL_Scancode_SDL_SCANCODE_W: SDL_Scancode = 26;
pub const SDL_Scancode_SDL_SCANCODE_X: SDL_Scancode = 27;
pub const SDL_Scancode_SDL_SCANCODE_Y: SDL_Scancode = 28;
pub const SDL_Scancode_SDL_SCANCODE_Z: SDL_Scancode = 29;
pub const SDL_Scancode_SDL_SCANCODE_1: SDL_Scancode = 30;
pub const SDL_Scancode_SDL_SCANCODE_2: SDL_Scancode = 31;
pub const SDL_Scancode_SDL_SCANCODE_3: SDL_Scancode = 32;
pub const SDL_Scancode_SDL_SCANCODE_4: SDL_Scancode = 33;
pub const SDL_Scancode_SDL_SCANCODE_5: SDL_Scancode = 34;
pub const SDL_Scancode_SDL_SCANCODE_6: SDL_Scancode = 35;
pub const SDL_Scancode_SDL_SCANCODE_7: SDL_Scancode = 36;
pub const SDL_Scancode_SDL_SCANCODE_8: SDL_Scancode = 37;
pub const SDL_Scancode_SDL_SCANCODE_9: SDL_Scancode = 38;
pub const SDL_Scancode_SDL_SCANCODE_0: SDL_Scancode = 39;
pub const SDL_Scancode_SDL_SCANCODE_RETURN: SDL_Scancode = 40;
pub const SDL_Scancode_SDL_SCANCODE_ESCAPE: SDL_Scancode = 41;
pub const SDL_Scancode_SDL_SCANCODE_BACKSPACE: SDL_Scancode = 42;
pub const SDL_Scancode_SDL_SCANCODE_TAB: SDL_Scancode = 43;
pub const SDL_Scancode_SDL_SCANCODE_SPACE: SDL_Scancode = 44;
pub const SDL_Scancode_SDL_SCANCODE_MINUS: SDL_Scancode = 45;
pub const SDL_Scancode_SDL_SCANCODE_EQUALS: SDL_Scancode = 46;
pub const SDL_Scancode_SDL_SCANCODE_LEFTBRACKET: SDL_Scancode = 47;
pub const SDL_Scancode_SDL_SCANCODE_RIGHTBRACKET: SDL_Scancode = 48;
#[doc = "< Located at the lower left of the return\n   key on ISO keyboards and at the right end\n   of the QWERTY row on ANSI keyboards.\n   Produces REVERSE SOLIDUS (backslash) and\n   VERTICAL LINE in a US layout, REVERSE\n   SOLIDUS and VERTICAL LINE in a UK Mac\n   layout, NUMBER SIGN and TILDE in a UK\n   Windows layout, DOLLAR SIGN and POUND SIGN\n   in a Swiss German layout, NUMBER SIGN and\n   APOSTROPHE in a German layout, GRAVE\n   ACCENT and POUND SIGN in a French Mac\n   layout, and ASTERISK and MICRO SIGN in a\n   French Windows layout."]
pub const SDL_Scancode_SDL_SCANCODE_BACKSLASH: SDL_Scancode = 49;
#[doc = "< ISO USB keyboards actually use this code\n   instead of 49 for the same key, but all\n   OSes I've seen treat the two codes\n   identically. So, as an implementor, unless\n   your keyboard generates both of those\n   codes and your OS treats them differently,\n   you should generate SDL_SCANCODE_BACKSLASH\n   instead of this code. As a user, you\n   should not rely on this code because SDL\n   will never generate it with most (all?)\n   keyboards."]
pub const SDL_Scancode_SDL_SCANCODE_NONUSHASH: SDL_Scancode = 50;
pub const SDL_Scancode_SDL_SCANCODE_SEMICOLON: SDL_Scancode = 51;
pub const SDL_Scancode_SDL_SCANCODE_APOSTROPHE: SDL_Scancode = 52;
#[doc = "< Located in the top left corner (on both ANSI\n   and ISO keyboards). Produces GRAVE ACCENT and\n   TILDE in a US Windows layout and in US and UK\n   Mac layouts on ANSI keyboards, GRAVE ACCENT\n   and NOT SIGN in a UK Windows layout, SECTION\n   SIGN and PLUS-MINUS SIGN in US and UK Mac\n   layouts on ISO keyboards, SECTION SIGN and\n   DEGREE SIGN in a Swiss German layout (Mac:\n   only on ISO keyboards), CIRCUMFLEX ACCENT and\n   DEGREE SIGN in a German layout (Mac: only on\n   ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n   French Windows layout, COMMERCIAL AT and\n   NUMBER SIGN in a French Mac layout on ISO\n   keyboards, and LESS-THAN SIGN and GREATER-THAN\n   SIGN in a Swiss German, German, or French Mac\n   layout on ANSI keyboards."]
pub const SDL_Scancode_SDL_SCANCODE_GRAVE: SDL_Scancode = 53;
pub const SDL_Scancode_SDL_SCANCODE_COMMA: SDL_Scancode = 54;
pub const SDL_Scancode_SDL_SCANCODE_PERIOD: SDL_Scancode = 55;
pub const SDL_Scancode_SDL_SCANCODE_SLASH: SDL_Scancode = 56;
pub const SDL_Scancode_SDL_SCANCODE_CAPSLOCK: SDL_Scancode = 57;
pub const SDL_Scancode_SDL_SCANCODE_F1: SDL_Scancode = 58;
pub const SDL_Scancode_SDL_SCANCODE_F2: SDL_Scancode = 59;
pub const SDL_Scancode_SDL_SCANCODE_F3: SDL_Scancode = 60;
pub const SDL_Scancode_SDL_SCANCODE_F4: SDL_Scancode = 61;
pub const SDL_Scancode_SDL_SCANCODE_F5: SDL_Scancode = 62;
pub const SDL_Scancode_SDL_SCANCODE_F6: SDL_Scancode = 63;
pub const SDL_Scancode_SDL_SCANCODE_F7: SDL_Scancode = 64;
pub const SDL_Scancode_SDL_SCANCODE_F8: SDL_Scancode = 65;
pub const SDL_Scancode_SDL_SCANCODE_F9: SDL_Scancode = 66;
pub const SDL_Scancode_SDL_SCANCODE_F10: SDL_Scancode = 67;
pub const SDL_Scancode_SDL_SCANCODE_F11: SDL_Scancode = 68;
pub const SDL_Scancode_SDL_SCANCODE_F12: SDL_Scancode = 69;
pub const SDL_Scancode_SDL_SCANCODE_PRINTSCREEN: SDL_Scancode = 70;
pub const SDL_Scancode_SDL_SCANCODE_SCROLLLOCK: SDL_Scancode = 71;
pub const SDL_Scancode_SDL_SCANCODE_PAUSE: SDL_Scancode = 72;
#[doc = "< insert on PC, help on some Mac keyboards (but\ndoes send code 73, not 117)"]
pub const SDL_Scancode_SDL_SCANCODE_INSERT: SDL_Scancode = 73;
pub const SDL_Scancode_SDL_SCANCODE_HOME: SDL_Scancode = 74;
pub const SDL_Scancode_SDL_SCANCODE_PAGEUP: SDL_Scancode = 75;
pub const SDL_Scancode_SDL_SCANCODE_DELETE: SDL_Scancode = 76;
pub const SDL_Scancode_SDL_SCANCODE_END: SDL_Scancode = 77;
pub const SDL_Scancode_SDL_SCANCODE_PAGEDOWN: SDL_Scancode = 78;
pub const SDL_Scancode_SDL_SCANCODE_RIGHT: SDL_Scancode = 79;
pub const SDL_Scancode_SDL_SCANCODE_LEFT: SDL_Scancode = 80;
pub const SDL_Scancode_SDL_SCANCODE_DOWN: SDL_Scancode = 81;
pub const SDL_Scancode_SDL_SCANCODE_UP: SDL_Scancode = 82;
#[doc = "< num lock on PC, clear on Mac keyboards"]
pub const SDL_Scancode_SDL_SCANCODE_NUMLOCKCLEAR: SDL_Scancode = 83;
pub const SDL_Scancode_SDL_SCANCODE_KP_DIVIDE: SDL_Scancode = 84;
pub const SDL_Scancode_SDL_SCANCODE_KP_MULTIPLY: SDL_Scancode = 85;
pub const SDL_Scancode_SDL_SCANCODE_KP_MINUS: SDL_Scancode = 86;
pub const SDL_Scancode_SDL_SCANCODE_KP_PLUS: SDL_Scancode = 87;
pub const SDL_Scancode_SDL_SCANCODE_KP_ENTER: SDL_Scancode = 88;
pub const SDL_Scancode_SDL_SCANCODE_KP_1: SDL_Scancode = 89;
pub const SDL_Scancode_SDL_SCANCODE_KP_2: SDL_Scancode = 90;
pub const SDL_Scancode_SDL_SCANCODE_KP_3: SDL_Scancode = 91;
pub const SDL_Scancode_SDL_SCANCODE_KP_4: SDL_Scancode = 92;
pub const SDL_Scancode_SDL_SCANCODE_KP_5: SDL_Scancode = 93;
pub const SDL_Scancode_SDL_SCANCODE_KP_6: SDL_Scancode = 94;
pub const SDL_Scancode_SDL_SCANCODE_KP_7: SDL_Scancode = 95;
pub const SDL_Scancode_SDL_SCANCODE_KP_8: SDL_Scancode = 96;
pub const SDL_Scancode_SDL_SCANCODE_KP_9: SDL_Scancode = 97;
pub const SDL_Scancode_SDL_SCANCODE_KP_0: SDL_Scancode = 98;
pub const SDL_Scancode_SDL_SCANCODE_KP_PERIOD: SDL_Scancode = 99;
#[doc = "< This is the additional key that ISO\n   keyboards have over ANSI ones,\n   located between left shift and Y.\n   Produces GRAVE ACCENT and TILDE in a\n   US or UK Mac layout, REVERSE SOLIDUS\n   (backslash) and VERTICAL LINE in a\n   US or UK Windows layout, and\n   LESS-THAN SIGN and GREATER-THAN SIGN\n   in a Swiss German, German, or French\n   layout."]
pub const SDL_Scancode_SDL_SCANCODE_NONUSBACKSLASH: SDL_Scancode = 100;
#[doc = "< windows contextual menu, compose"]
pub const SDL_Scancode_SDL_SCANCODE_APPLICATION: SDL_Scancode = 101;
#[doc = "< The USB document says this is a status flag,\n   not a physical key - but some Mac keyboards\n   do have a power key."]
pub const SDL_Scancode_SDL_SCANCODE_POWER: SDL_Scancode = 102;
pub const SDL_Scancode_SDL_SCANCODE_KP_EQUALS: SDL_Scancode = 103;
pub const SDL_Scancode_SDL_SCANCODE_F13: SDL_Scancode = 104;
pub const SDL_Scancode_SDL_SCANCODE_F14: SDL_Scancode = 105;
pub const SDL_Scancode_SDL_SCANCODE_F15: SDL_Scancode = 106;
pub const SDL_Scancode_SDL_SCANCODE_F16: SDL_Scancode = 107;
pub const SDL_Scancode_SDL_SCANCODE_F17: SDL_Scancode = 108;
pub const SDL_Scancode_SDL_SCANCODE_F18: SDL_Scancode = 109;
pub const SDL_Scancode_SDL_SCANCODE_F19: SDL_Scancode = 110;
pub const SDL_Scancode_SDL_SCANCODE_F20: SDL_Scancode = 111;
pub const SDL_Scancode_SDL_SCANCODE_F21: SDL_Scancode = 112;
pub const SDL_Scancode_SDL_SCANCODE_F22: SDL_Scancode = 113;
pub const SDL_Scancode_SDL_SCANCODE_F23: SDL_Scancode = 114;
pub const SDL_Scancode_SDL_SCANCODE_F24: SDL_Scancode = 115;
pub const SDL_Scancode_SDL_SCANCODE_EXECUTE: SDL_Scancode = 116;
#[doc = "< AL Integrated Help Center"]
pub const SDL_Scancode_SDL_SCANCODE_HELP: SDL_Scancode = 117;
#[doc = "< Menu (show menu)"]
pub const SDL_Scancode_SDL_SCANCODE_MENU: SDL_Scancode = 118;
pub const SDL_Scancode_SDL_SCANCODE_SELECT: SDL_Scancode = 119;
#[doc = "< AC Stop"]
pub const SDL_Scancode_SDL_SCANCODE_STOP: SDL_Scancode = 120;
#[doc = "< AC Redo/Repeat"]
pub const SDL_Scancode_SDL_SCANCODE_AGAIN: SDL_Scancode = 121;
#[doc = "< AC Undo"]
pub const SDL_Scancode_SDL_SCANCODE_UNDO: SDL_Scancode = 122;
#[doc = "< AC Cut"]
pub const SDL_Scancode_SDL_SCANCODE_CUT: SDL_Scancode = 123;
#[doc = "< AC Copy"]
pub const SDL_Scancode_SDL_SCANCODE_COPY: SDL_Scancode = 124;
#[doc = "< AC Paste"]
pub const SDL_Scancode_SDL_SCANCODE_PASTE: SDL_Scancode = 125;
#[doc = "< AC Find"]
pub const SDL_Scancode_SDL_SCANCODE_FIND: SDL_Scancode = 126;
pub const SDL_Scancode_SDL_SCANCODE_MUTE: SDL_Scancode = 127;
pub const SDL_Scancode_SDL_SCANCODE_VOLUMEUP: SDL_Scancode = 128;
pub const SDL_Scancode_SDL_SCANCODE_VOLUMEDOWN: SDL_Scancode = 129;
pub const SDL_Scancode_SDL_SCANCODE_KP_COMMA: SDL_Scancode = 133;
pub const SDL_Scancode_SDL_SCANCODE_KP_EQUALSAS400: SDL_Scancode = 134;
#[doc = "< used on Asian keyboards, see\nfootnotes in USB doc"]
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL1: SDL_Scancode = 135;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL2: SDL_Scancode = 136;
#[doc = "< Yen"]
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL3: SDL_Scancode = 137;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL4: SDL_Scancode = 138;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL5: SDL_Scancode = 139;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL6: SDL_Scancode = 140;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL7: SDL_Scancode = 141;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL8: SDL_Scancode = 142;
pub const SDL_Scancode_SDL_SCANCODE_INTERNATIONAL9: SDL_Scancode = 143;
#[doc = "< Hangul/English toggle"]
pub const SDL_Scancode_SDL_SCANCODE_LANG1: SDL_Scancode = 144;
#[doc = "< Hanja conversion"]
pub const SDL_Scancode_SDL_SCANCODE_LANG2: SDL_Scancode = 145;
#[doc = "< Katakana"]
pub const SDL_Scancode_SDL_SCANCODE_LANG3: SDL_Scancode = 146;
#[doc = "< Hiragana"]
pub const SDL_Scancode_SDL_SCANCODE_LANG4: SDL_Scancode = 147;
#[doc = "< Zenkaku/Hankaku"]
pub const SDL_Scancode_SDL_SCANCODE_LANG5: SDL_Scancode = 148;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG6: SDL_Scancode = 149;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG7: SDL_Scancode = 150;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG8: SDL_Scancode = 151;
#[doc = "< reserved"]
pub const SDL_Scancode_SDL_SCANCODE_LANG9: SDL_Scancode = 152;
#[doc = "< Erase-Eaze"]
pub const SDL_Scancode_SDL_SCANCODE_ALTERASE: SDL_Scancode = 153;
pub const SDL_Scancode_SDL_SCANCODE_SYSREQ: SDL_Scancode = 154;
#[doc = "< AC Cancel"]
pub const SDL_Scancode_SDL_SCANCODE_CANCEL: SDL_Scancode = 155;
pub const SDL_Scancode_SDL_SCANCODE_CLEAR: SDL_Scancode = 156;
pub const SDL_Scancode_SDL_SCANCODE_PRIOR: SDL_Scancode = 157;
pub const SDL_Scancode_SDL_SCANCODE_RETURN2: SDL_Scancode = 158;
pub const SDL_Scancode_SDL_SCANCODE_SEPARATOR: SDL_Scancode = 159;
pub const SDL_Scancode_SDL_SCANCODE_OUT: SDL_Scancode = 160;
pub const SDL_Scancode_SDL_SCANCODE_OPER: SDL_Scancode = 161;
pub const SDL_Scancode_SDL_SCANCODE_CLEARAGAIN: SDL_Scancode = 162;
pub const SDL_Scancode_SDL_SCANCODE_CRSEL: SDL_Scancode = 163;
pub const SDL_Scancode_SDL_SCANCODE_EXSEL: SDL_Scancode = 164;
pub const SDL_Scancode_SDL_SCANCODE_KP_00: SDL_Scancode = 176;
pub const SDL_Scancode_SDL_SCANCODE_KP_000: SDL_Scancode = 177;
pub const SDL_Scancode_SDL_SCANCODE_THOUSANDSSEPARATOR: SDL_Scancode = 178;
pub const SDL_Scancode_SDL_SCANCODE_DECIMALSEPARATOR: SDL_Scancode = 179;
pub const SDL_Scancode_SDL_SCANCODE_CURRENCYUNIT: SDL_Scancode = 180;
pub const SDL_Scancode_SDL_SCANCODE_CURRENCYSUBUNIT: SDL_Scancode = 181;
pub const SDL_Scancode_SDL_SCANCODE_KP_LEFTPAREN: SDL_Scancode = 182;
pub const SDL_Scancode_SDL_SCANCODE_KP_RIGHTPAREN: SDL_Scancode = 183;
pub const SDL_Scancode_SDL_SCANCODE_KP_LEFTBRACE: SDL_Scancode = 184;
pub const SDL_Scancode_SDL_SCANCODE_KP_RIGHTBRACE: SDL_Scancode = 185;
pub const SDL_Scancode_SDL_SCANCODE_KP_TAB: SDL_Scancode = 186;
pub const SDL_Scancode_SDL_SCANCODE_KP_BACKSPACE: SDL_Scancode = 187;
pub const SDL_Scancode_SDL_SCANCODE_KP_A: SDL_Scancode = 188;
pub const SDL_Scancode_SDL_SCANCODE_KP_B: SDL_Scancode = 189;
pub const SDL_Scancode_SDL_SCANCODE_KP_C: SDL_Scancode = 190;
pub const SDL_Scancode_SDL_SCANCODE_KP_D: SDL_Scancode = 191;
pub const SDL_Scancode_SDL_SCANCODE_KP_E: SDL_Scancode = 192;
pub const SDL_Scancode_SDL_SCANCODE_KP_F: SDL_Scancode = 193;
pub const SDL_Scancode_SDL_SCANCODE_KP_XOR: SDL_Scancode = 194;
pub const SDL_Scancode_SDL_SCANCODE_KP_POWER: SDL_Scancode = 195;
pub const SDL_Scancode_SDL_SCANCODE_KP_PERCENT: SDL_Scancode = 196;
pub const SDL_Scancode_SDL_SCANCODE_KP_LESS: SDL_Scancode = 197;
pub const SDL_Scancode_SDL_SCANCODE_KP_GREATER: SDL_Scancode = 198;
pub const SDL_Scancode_SDL_SCANCODE_KP_AMPERSAND: SDL_Scancode = 199;
pub const SDL_Scancode_SDL_SCANCODE_KP_DBLAMPERSAND: SDL_Scancode = 200;
pub const SDL_Scancode_SDL_SCANCODE_KP_VERTICALBAR: SDL_Scancode = 201;
pub const SDL_Scancode_SDL_SCANCODE_KP_DBLVERTICALBAR: SDL_Scancode = 202;
pub const SDL_Scancode_SDL_SCANCODE_KP_COLON: SDL_Scancode = 203;
pub const SDL_Scancode_SDL_SCANCODE_KP_HASH: SDL_Scancode = 204;
pub const SDL_Scancode_SDL_SCANCODE_KP_SPACE: SDL_Scancode = 205;
pub const SDL_Scancode_SDL_SCANCODE_KP_AT: SDL_Scancode = 206;
pub const SDL_Scancode_SDL_SCANCODE_KP_EXCLAM: SDL_Scancode = 207;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMSTORE: SDL_Scancode = 208;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMRECALL: SDL_Scancode = 209;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMCLEAR: SDL_Scancode = 210;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMADD: SDL_Scancode = 211;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMSUBTRACT: SDL_Scancode = 212;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMMULTIPLY: SDL_Scancode = 213;
pub const SDL_Scancode_SDL_SCANCODE_KP_MEMDIVIDE: SDL_Scancode = 214;
pub const SDL_Scancode_SDL_SCANCODE_KP_PLUSMINUS: SDL_Scancode = 215;
pub const SDL_Scancode_SDL_SCANCODE_KP_CLEAR: SDL_Scancode = 216;
pub const SDL_Scancode_SDL_SCANCODE_KP_CLEARENTRY: SDL_Scancode = 217;
pub const SDL_Scancode_SDL_SCANCODE_KP_BINARY: SDL_Scancode = 218;
pub const SDL_Scancode_SDL_SCANCODE_KP_OCTAL: SDL_Scancode = 219;
pub const SDL_Scancode_SDL_SCANCODE_KP_DECIMAL: SDL_Scancode = 220;
pub const SDL_Scancode_SDL_SCANCODE_KP_HEXADECIMAL: SDL_Scancode = 221;
pub const SDL_Scancode_SDL_SCANCODE_LCTRL: SDL_Scancode = 224;
pub const SDL_Scancode_SDL_SCANCODE_LSHIFT: SDL_Scancode = 225;
#[doc = "< alt, option"]
pub const SDL_Scancode_SDL_SCANCODE_LALT: SDL_Scancode = 226;
#[doc = "< windows, command (apple), meta"]
pub const SDL_Scancode_SDL_SCANCODE_LGUI: SDL_Scancode = 227;
pub const SDL_Scancode_SDL_SCANCODE_RCTRL: SDL_Scancode = 228;
pub const SDL_Scancode_SDL_SCANCODE_RSHIFT: SDL_Scancode = 229;
#[doc = "< alt gr, option"]
pub const SDL_Scancode_SDL_SCANCODE_RALT: SDL_Scancode = 230;
#[doc = "< windows, command (apple), meta"]
pub const SDL_Scancode_SDL_SCANCODE_RGUI: SDL_Scancode = 231;
#[doc = "< I'm not sure if this is really not covered\n   by any of the above, but since there's a\n   special SDL_KMOD_MODE for it I'm adding it here"]
pub const SDL_Scancode_SDL_SCANCODE_MODE: SDL_Scancode = 257;
pub const SDL_Scancode_SDL_SCANCODE_AUDIONEXT: SDL_Scancode = 258;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOPREV: SDL_Scancode = 259;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOSTOP: SDL_Scancode = 260;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOPLAY: SDL_Scancode = 261;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOMUTE: SDL_Scancode = 262;
pub const SDL_Scancode_SDL_SCANCODE_MEDIASELECT: SDL_Scancode = 263;
#[doc = "< AL Internet Browser"]
pub const SDL_Scancode_SDL_SCANCODE_WWW: SDL_Scancode = 264;
pub const SDL_Scancode_SDL_SCANCODE_MAIL: SDL_Scancode = 265;
#[doc = "< AL Calculator"]
pub const SDL_Scancode_SDL_SCANCODE_CALCULATOR: SDL_Scancode = 266;
pub const SDL_Scancode_SDL_SCANCODE_COMPUTER: SDL_Scancode = 267;
#[doc = "< AC Search"]
pub const SDL_Scancode_SDL_SCANCODE_AC_SEARCH: SDL_Scancode = 268;
#[doc = "< AC Home"]
pub const SDL_Scancode_SDL_SCANCODE_AC_HOME: SDL_Scancode = 269;
#[doc = "< AC Back"]
pub const SDL_Scancode_SDL_SCANCODE_AC_BACK: SDL_Scancode = 270;
#[doc = "< AC Forward"]
pub const SDL_Scancode_SDL_SCANCODE_AC_FORWARD: SDL_Scancode = 271;
#[doc = "< AC Stop"]
pub const SDL_Scancode_SDL_SCANCODE_AC_STOP: SDL_Scancode = 272;
#[doc = "< AC Refresh"]
pub const SDL_Scancode_SDL_SCANCODE_AC_REFRESH: SDL_Scancode = 273;
#[doc = "< AC Bookmarks"]
pub const SDL_Scancode_SDL_SCANCODE_AC_BOOKMARKS: SDL_Scancode = 274;
pub const SDL_Scancode_SDL_SCANCODE_BRIGHTNESSDOWN: SDL_Scancode = 275;
pub const SDL_Scancode_SDL_SCANCODE_BRIGHTNESSUP: SDL_Scancode = 276;
#[doc = "< display mirroring/dual display\nswitch, video mode switch"]
pub const SDL_Scancode_SDL_SCANCODE_DISPLAYSWITCH: SDL_Scancode = 277;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMTOGGLE: SDL_Scancode = 278;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMDOWN: SDL_Scancode = 279;
pub const SDL_Scancode_SDL_SCANCODE_KBDILLUMUP: SDL_Scancode = 280;
pub const SDL_Scancode_SDL_SCANCODE_EJECT: SDL_Scancode = 281;
#[doc = "< SC System Sleep"]
pub const SDL_Scancode_SDL_SCANCODE_SLEEP: SDL_Scancode = 282;
pub const SDL_Scancode_SDL_SCANCODE_APP1: SDL_Scancode = 283;
pub const SDL_Scancode_SDL_SCANCODE_APP2: SDL_Scancode = 284;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOREWIND: SDL_Scancode = 285;
pub const SDL_Scancode_SDL_SCANCODE_AUDIOFASTFORWARD: SDL_Scancode = 286;
#[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom left\nof the display."]
pub const SDL_Scancode_SDL_SCANCODE_SOFTLEFT: SDL_Scancode = 287;
#[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom right\nof the display."]
pub const SDL_Scancode_SDL_SCANCODE_SOFTRIGHT: SDL_Scancode = 288;
#[doc = "< Used for accepting phone calls."]
pub const SDL_Scancode_SDL_SCANCODE_CALL: SDL_Scancode = 289;
#[doc = "< Used for rejecting phone calls."]
pub const SDL_Scancode_SDL_SCANCODE_ENDCALL: SDL_Scancode = 290;
#[doc = "< not a key, just marks the number of scancodes\nfor array bounds"]
pub const SDL_Scancode_SDL_NUM_SCANCODES: SDL_Scancode = 512;
#[doc = "  \\brief The SDL keyboard scancode representation.\n\n  Values of this type are used to represent keyboard keys, among other places\n  in the \\link SDL_Keysym::scancode key.keysym.scancode \\endlink field of the\n  SDL_Event structure.\n\n  The values in this enumeration are based on the USB usage page standard:\n  https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf"]
pub type SDL_Scancode = ::std::os::raw::c_uint;
#[doc = "  \\brief The SDL virtual key representation.\n\n  Values of this type are used to represent keyboard keys using the current\n  layout of the keyboard.  These values include Unicode values representing\n  the unmodified character that would be generated by pressing the key, or\n  an SDLK_* constant for those keys that do not generate characters.\n\n  A special exception is the number keys at the top of the keyboard which\n  map to SDLK_0...SDLK_9 on AZERTY layouts."]
pub type SDL_Keycode = Sint32;
pub const SDL_KeyCode_SDLK_UNKNOWN: SDL_KeyCode = 0;
pub const SDL_KeyCode_SDLK_RETURN: SDL_KeyCode = 13;
pub const SDL_KeyCode_SDLK_ESCAPE: SDL_KeyCode = 27;
pub const SDL_KeyCode_SDLK_BACKSPACE: SDL_KeyCode = 8;
pub const SDL_KeyCode_SDLK_TAB: SDL_KeyCode = 9;
pub const SDL_KeyCode_SDLK_SPACE: SDL_KeyCode = 32;
pub const SDL_KeyCode_SDLK_EXCLAIM: SDL_KeyCode = 33;
pub const SDL_KeyCode_SDLK_QUOTEDBL: SDL_KeyCode = 34;
pub const SDL_KeyCode_SDLK_HASH: SDL_KeyCode = 35;
pub const SDL_KeyCode_SDLK_PERCENT: SDL_KeyCode = 37;
pub const SDL_KeyCode_SDLK_DOLLAR: SDL_KeyCode = 36;
pub const SDL_KeyCode_SDLK_AMPERSAND: SDL_KeyCode = 38;
pub const SDL_KeyCode_SDLK_QUOTE: SDL_KeyCode = 39;
pub const SDL_KeyCode_SDLK_LEFTPAREN: SDL_KeyCode = 40;
pub const SDL_KeyCode_SDLK_RIGHTPAREN: SDL_KeyCode = 41;
pub const SDL_KeyCode_SDLK_ASTERISK: SDL_KeyCode = 42;
pub const SDL_KeyCode_SDLK_PLUS: SDL_KeyCode = 43;
pub const SDL_KeyCode_SDLK_COMMA: SDL_KeyCode = 44;
pub const SDL_KeyCode_SDLK_MINUS: SDL_KeyCode = 45;
pub const SDL_KeyCode_SDLK_PERIOD: SDL_KeyCode = 46;
pub const SDL_KeyCode_SDLK_SLASH: SDL_KeyCode = 47;
pub const SDL_KeyCode_SDLK_0: SDL_KeyCode = 48;
pub const SDL_KeyCode_SDLK_1: SDL_KeyCode = 49;
pub const SDL_KeyCode_SDLK_2: SDL_KeyCode = 50;
pub const SDL_KeyCode_SDLK_3: SDL_KeyCode = 51;
pub const SDL_KeyCode_SDLK_4: SDL_KeyCode = 52;
pub const SDL_KeyCode_SDLK_5: SDL_KeyCode = 53;
pub const SDL_KeyCode_SDLK_6: SDL_KeyCode = 54;
pub const SDL_KeyCode_SDLK_7: SDL_KeyCode = 55;
pub const SDL_KeyCode_SDLK_8: SDL_KeyCode = 56;
pub const SDL_KeyCode_SDLK_9: SDL_KeyCode = 57;
pub const SDL_KeyCode_SDLK_COLON: SDL_KeyCode = 58;
pub const SDL_KeyCode_SDLK_SEMICOLON: SDL_KeyCode = 59;
pub const SDL_KeyCode_SDLK_LESS: SDL_KeyCode = 60;
pub const SDL_KeyCode_SDLK_EQUALS: SDL_KeyCode = 61;
pub const SDL_KeyCode_SDLK_GREATER: SDL_KeyCode = 62;
pub const SDL_KeyCode_SDLK_QUESTION: SDL_KeyCode = 63;
pub const SDL_KeyCode_SDLK_AT: SDL_KeyCode = 64;
pub const SDL_KeyCode_SDLK_LEFTBRACKET: SDL_KeyCode = 91;
pub const SDL_KeyCode_SDLK_BACKSLASH: SDL_KeyCode = 92;
pub const SDL_KeyCode_SDLK_RIGHTBRACKET: SDL_KeyCode = 93;
pub const SDL_KeyCode_SDLK_CARET: SDL_KeyCode = 94;
pub const SDL_KeyCode_SDLK_UNDERSCORE: SDL_KeyCode = 95;
pub const SDL_KeyCode_SDLK_BACKQUOTE: SDL_KeyCode = 96;
pub const SDL_KeyCode_SDLK_a: SDL_KeyCode = 97;
pub const SDL_KeyCode_SDLK_b: SDL_KeyCode = 98;
pub const SDL_KeyCode_SDLK_c: SDL_KeyCode = 99;
pub const SDL_KeyCode_SDLK_d: SDL_KeyCode = 100;
pub const SDL_KeyCode_SDLK_e: SDL_KeyCode = 101;
pub const SDL_KeyCode_SDLK_f: SDL_KeyCode = 102;
pub const SDL_KeyCode_SDLK_g: SDL_KeyCode = 103;
pub const SDL_KeyCode_SDLK_h: SDL_KeyCode = 104;
pub const SDL_KeyCode_SDLK_i: SDL_KeyCode = 105;
pub const SDL_KeyCode_SDLK_j: SDL_KeyCode = 106;
pub const SDL_KeyCode_SDLK_k: SDL_KeyCode = 107;
pub const SDL_KeyCode_SDLK_l: SDL_KeyCode = 108;
pub const SDL_KeyCode_SDLK_m: SDL_KeyCode = 109;
pub const SDL_KeyCode_SDLK_n: SDL_KeyCode = 110;
pub const SDL_KeyCode_SDLK_o: SDL_KeyCode = 111;
pub const SDL_KeyCode_SDLK_p: SDL_KeyCode = 112;
pub const SDL_KeyCode_SDLK_q: SDL_KeyCode = 113;
pub const SDL_KeyCode_SDLK_r: SDL_KeyCode = 114;
pub const SDL_KeyCode_SDLK_s: SDL_KeyCode = 115;
pub const SDL_KeyCode_SDLK_t: SDL_KeyCode = 116;
pub const SDL_KeyCode_SDLK_u: SDL_KeyCode = 117;
pub const SDL_KeyCode_SDLK_v: SDL_KeyCode = 118;
pub const SDL_KeyCode_SDLK_w: SDL_KeyCode = 119;
pub const SDL_KeyCode_SDLK_x: SDL_KeyCode = 120;
pub const SDL_KeyCode_SDLK_y: SDL_KeyCode = 121;
pub const SDL_KeyCode_SDLK_z: SDL_KeyCode = 122;
pub const SDL_KeyCode_SDLK_CAPSLOCK: SDL_KeyCode = 1073741881;
pub const SDL_KeyCode_SDLK_F1: SDL_KeyCode = 1073741882;
pub const SDL_KeyCode_SDLK_F2: SDL_KeyCode = 1073741883;
pub const SDL_KeyCode_SDLK_F3: SDL_KeyCode = 1073741884;
pub const SDL_KeyCode_SDLK_F4: SDL_KeyCode = 1073741885;
pub const SDL_KeyCode_SDLK_F5: SDL_KeyCode = 1073741886;
pub const SDL_KeyCode_SDLK_F6: SDL_KeyCode = 1073741887;
pub const SDL_KeyCode_SDLK_F7: SDL_KeyCode = 1073741888;
pub const SDL_KeyCode_SDLK_F8: SDL_KeyCode = 1073741889;
pub const SDL_KeyCode_SDLK_F9: SDL_KeyCode = 1073741890;
pub const SDL_KeyCode_SDLK_F10: SDL_KeyCode = 1073741891;
pub const SDL_KeyCode_SDLK_F11: SDL_KeyCode = 1073741892;
pub const SDL_KeyCode_SDLK_F12: SDL_KeyCode = 1073741893;
pub const SDL_KeyCode_SDLK_PRINTSCREEN: SDL_KeyCode = 1073741894;
pub const SDL_KeyCode_SDLK_SCROLLLOCK: SDL_KeyCode = 1073741895;
pub const SDL_KeyCode_SDLK_PAUSE: SDL_KeyCode = 1073741896;
pub const SDL_KeyCode_SDLK_INSERT: SDL_KeyCode = 1073741897;
pub const SDL_KeyCode_SDLK_HOME: SDL_KeyCode = 1073741898;
pub const SDL_KeyCode_SDLK_PAGEUP: SDL_KeyCode = 1073741899;
pub const SDL_KeyCode_SDLK_DELETE: SDL_KeyCode = 127;
pub const SDL_KeyCode_SDLK_END: SDL_KeyCode = 1073741901;
pub const SDL_KeyCode_SDLK_PAGEDOWN: SDL_KeyCode = 1073741902;
pub const SDL_KeyCode_SDLK_RIGHT: SDL_KeyCode = 1073741903;
pub const SDL_KeyCode_SDLK_LEFT: SDL_KeyCode = 1073741904;
pub const SDL_KeyCode_SDLK_DOWN: SDL_KeyCode = 1073741905;
pub const SDL_KeyCode_SDLK_UP: SDL_KeyCode = 1073741906;
pub const SDL_KeyCode_SDLK_NUMLOCKCLEAR: SDL_KeyCode = 1073741907;
pub const SDL_KeyCode_SDLK_KP_DIVIDE: SDL_KeyCode = 1073741908;
pub const SDL_KeyCode_SDLK_KP_MULTIPLY: SDL_KeyCode = 1073741909;
pub const SDL_KeyCode_SDLK_KP_MINUS: SDL_KeyCode = 1073741910;
pub const SDL_KeyCode_SDLK_KP_PLUS: SDL_KeyCode = 1073741911;
pub const SDL_KeyCode_SDLK_KP_ENTER: SDL_KeyCode = 1073741912;
pub const SDL_KeyCode_SDLK_KP_1: SDL_KeyCode = 1073741913;
pub const SDL_KeyCode_SDLK_KP_2: SDL_KeyCode = 1073741914;
pub const SDL_KeyCode_SDLK_KP_3: SDL_KeyCode = 1073741915;
pub const SDL_KeyCode_SDLK_KP_4: SDL_KeyCode = 1073741916;
pub const SDL_KeyCode_SDLK_KP_5: SDL_KeyCode = 1073741917;
pub const SDL_KeyCode_SDLK_KP_6: SDL_KeyCode = 1073741918;
pub const SDL_KeyCode_SDLK_KP_7: SDL_KeyCode = 1073741919;
pub const SDL_KeyCode_SDLK_KP_8: SDL_KeyCode = 1073741920;
pub const SDL_KeyCode_SDLK_KP_9: SDL_KeyCode = 1073741921;
pub const SDL_KeyCode_SDLK_KP_0: SDL_KeyCode = 1073741922;
pub const SDL_KeyCode_SDLK_KP_PERIOD: SDL_KeyCode = 1073741923;
pub const SDL_KeyCode_SDLK_APPLICATION: SDL_KeyCode = 1073741925;
pub const SDL_KeyCode_SDLK_POWER: SDL_KeyCode = 1073741926;
pub const SDL_KeyCode_SDLK_KP_EQUALS: SDL_KeyCode = 1073741927;
pub const SDL_KeyCode_SDLK_F13: SDL_KeyCode = 1073741928;
pub const SDL_KeyCode_SDLK_F14: SDL_KeyCode = 1073741929;
pub const SDL_KeyCode_SDLK_F15: SDL_KeyCode = 1073741930;
pub const SDL_KeyCode_SDLK_F16: SDL_KeyCode = 1073741931;
pub const SDL_KeyCode_SDLK_F17: SDL_KeyCode = 1073741932;
pub const SDL_KeyCode_SDLK_F18: SDL_KeyCode = 1073741933;
pub const SDL_KeyCode_SDLK_F19: SDL_KeyCode = 1073741934;
pub const SDL_KeyCode_SDLK_F20: SDL_KeyCode = 1073741935;
pub const SDL_KeyCode_SDLK_F21: SDL_KeyCode = 1073741936;
pub const SDL_KeyCode_SDLK_F22: SDL_KeyCode = 1073741937;
pub const SDL_KeyCode_SDLK_F23: SDL_KeyCode = 1073741938;
pub const SDL_KeyCode_SDLK_F24: SDL_KeyCode = 1073741939;
pub const SDL_KeyCode_SDLK_EXECUTE: SDL_KeyCode = 1073741940;
pub const SDL_KeyCode_SDLK_HELP: SDL_KeyCode = 1073741941;
pub const SDL_KeyCode_SDLK_MENU: SDL_KeyCode = 1073741942;
pub const SDL_KeyCode_SDLK_SELECT: SDL_KeyCode = 1073741943;
pub const SDL_KeyCode_SDLK_STOP: SDL_KeyCode = 1073741944;
pub const SDL_KeyCode_SDLK_AGAIN: SDL_KeyCode = 1073741945;
pub const SDL_KeyCode_SDLK_UNDO: SDL_KeyCode = 1073741946;
pub const SDL_KeyCode_SDLK_CUT: SDL_KeyCode = 1073741947;
pub const SDL_KeyCode_SDLK_COPY: SDL_KeyCode = 1073741948;
pub const SDL_KeyCode_SDLK_PASTE: SDL_KeyCode = 1073741949;
pub const SDL_KeyCode_SDLK_FIND: SDL_KeyCode = 1073741950;
pub const SDL_KeyCode_SDLK_MUTE: SDL_KeyCode = 1073741951;
pub const SDL_KeyCode_SDLK_VOLUMEUP: SDL_KeyCode = 1073741952;
pub const SDL_KeyCode_SDLK_VOLUMEDOWN: SDL_KeyCode = 1073741953;
pub const SDL_KeyCode_SDLK_KP_COMMA: SDL_KeyCode = 1073741957;
pub const SDL_KeyCode_SDLK_KP_EQUALSAS400: SDL_KeyCode = 1073741958;
pub const SDL_KeyCode_SDLK_ALTERASE: SDL_KeyCode = 1073741977;
pub const SDL_KeyCode_SDLK_SYSREQ: SDL_KeyCode = 1073741978;
pub const SDL_KeyCode_SDLK_CANCEL: SDL_KeyCode = 1073741979;
pub const SDL_KeyCode_SDLK_CLEAR: SDL_KeyCode = 1073741980;
pub const SDL_KeyCode_SDLK_PRIOR: SDL_KeyCode = 1073741981;
pub const SDL_KeyCode_SDLK_RETURN2: SDL_KeyCode = 1073741982;
pub const SDL_KeyCode_SDLK_SEPARATOR: SDL_KeyCode = 1073741983;
pub const SDL_KeyCode_SDLK_OUT: SDL_KeyCode = 1073741984;
pub const SDL_KeyCode_SDLK_OPER: SDL_KeyCode = 1073741985;
pub const SDL_KeyCode_SDLK_CLEARAGAIN: SDL_KeyCode = 1073741986;
pub const SDL_KeyCode_SDLK_CRSEL: SDL_KeyCode = 1073741987;
pub const SDL_KeyCode_SDLK_EXSEL: SDL_KeyCode = 1073741988;
pub const SDL_KeyCode_SDLK_KP_00: SDL_KeyCode = 1073742000;
pub const SDL_KeyCode_SDLK_KP_000: SDL_KeyCode = 1073742001;
pub const SDL_KeyCode_SDLK_THOUSANDSSEPARATOR: SDL_KeyCode = 1073742002;
pub const SDL_KeyCode_SDLK_DECIMALSEPARATOR: SDL_KeyCode = 1073742003;
pub const SDL_KeyCode_SDLK_CURRENCYUNIT: SDL_KeyCode = 1073742004;
pub const SDL_KeyCode_SDLK_CURRENCYSUBUNIT: SDL_KeyCode = 1073742005;
pub const SDL_KeyCode_SDLK_KP_LEFTPAREN: SDL_KeyCode = 1073742006;
pub const SDL_KeyCode_SDLK_KP_RIGHTPAREN: SDL_KeyCode = 1073742007;
pub const SDL_KeyCode_SDLK_KP_LEFTBRACE: SDL_KeyCode = 1073742008;
pub const SDL_KeyCode_SDLK_KP_RIGHTBRACE: SDL_KeyCode = 1073742009;
pub const SDL_KeyCode_SDLK_KP_TAB: SDL_KeyCode = 1073742010;
pub const SDL_KeyCode_SDLK_KP_BACKSPACE: SDL_KeyCode = 1073742011;
pub const SDL_KeyCode_SDLK_KP_A: SDL_KeyCode = 1073742012;
pub const SDL_KeyCode_SDLK_KP_B: SDL_KeyCode = 1073742013;
pub const SDL_KeyCode_SDLK_KP_C: SDL_KeyCode = 1073742014;
pub const SDL_KeyCode_SDLK_KP_D: SDL_KeyCode = 1073742015;
pub const SDL_KeyCode_SDLK_KP_E: SDL_KeyCode = 1073742016;
pub const SDL_KeyCode_SDLK_KP_F: SDL_KeyCode = 1073742017;
pub const SDL_KeyCode_SDLK_KP_XOR: SDL_KeyCode = 1073742018;
pub const SDL_KeyCode_SDLK_KP_POWER: SDL_KeyCode = 1073742019;
pub const SDL_KeyCode_SDLK_KP_PERCENT: SDL_KeyCode = 1073742020;
pub const SDL_KeyCode_SDLK_KP_LESS: SDL_KeyCode = 1073742021;
pub const SDL_KeyCode_SDLK_KP_GREATER: SDL_KeyCode = 1073742022;
pub const SDL_KeyCode_SDLK_KP_AMPERSAND: SDL_KeyCode = 1073742023;
pub const SDL_KeyCode_SDLK_KP_DBLAMPERSAND: SDL_KeyCode = 1073742024;
pub const SDL_KeyCode_SDLK_KP_VERTICALBAR: SDL_KeyCode = 1073742025;
pub const SDL_KeyCode_SDLK_KP_DBLVERTICALBAR: SDL_KeyCode = 1073742026;
pub const SDL_KeyCode_SDLK_KP_COLON: SDL_KeyCode = 1073742027;
pub const SDL_KeyCode_SDLK_KP_HASH: SDL_KeyCode = 1073742028;
pub const SDL_KeyCode_SDLK_KP_SPACE: SDL_KeyCode = 1073742029;
pub const SDL_KeyCode_SDLK_KP_AT: SDL_KeyCode = 1073742030;
pub const SDL_KeyCode_SDLK_KP_EXCLAM: SDL_KeyCode = 1073742031;
pub const SDL_KeyCode_SDLK_KP_MEMSTORE: SDL_KeyCode = 1073742032;
pub const SDL_KeyCode_SDLK_KP_MEMRECALL: SDL_KeyCode = 1073742033;
pub const SDL_KeyCode_SDLK_KP_MEMCLEAR: SDL_KeyCode = 1073742034;
pub const SDL_KeyCode_SDLK_KP_MEMADD: SDL_KeyCode = 1073742035;
pub const SDL_KeyCode_SDLK_KP_MEMSUBTRACT: SDL_KeyCode = 1073742036;
pub const SDL_KeyCode_SDLK_KP_MEMMULTIPLY: SDL_KeyCode = 1073742037;
pub const SDL_KeyCode_SDLK_KP_MEMDIVIDE: SDL_KeyCode = 1073742038;
pub const SDL_KeyCode_SDLK_KP_PLUSMINUS: SDL_KeyCode = 1073742039;
pub const SDL_KeyCode_SDLK_KP_CLEAR: SDL_KeyCode = 1073742040;
pub const SDL_KeyCode_SDLK_KP_CLEARENTRY: SDL_KeyCode = 1073742041;
pub const SDL_KeyCode_SDLK_KP_BINARY: SDL_KeyCode = 1073742042;
pub const SDL_KeyCode_SDLK_KP_OCTAL: SDL_KeyCode = 1073742043;
pub const SDL_KeyCode_SDLK_KP_DECIMAL: SDL_KeyCode = 1073742044;
pub const SDL_KeyCode_SDLK_KP_HEXADECIMAL: SDL_KeyCode = 1073742045;
pub const SDL_KeyCode_SDLK_LCTRL: SDL_KeyCode = 1073742048;
pub const SDL_KeyCode_SDLK_LSHIFT: SDL_KeyCode = 1073742049;
pub const SDL_KeyCode_SDLK_LALT: SDL_KeyCode = 1073742050;
pub const SDL_KeyCode_SDLK_LGUI: SDL_KeyCode = 1073742051;
pub const SDL_KeyCode_SDLK_RCTRL: SDL_KeyCode = 1073742052;
pub const SDL_KeyCode_SDLK_RSHIFT: SDL_KeyCode = 1073742053;
pub const SDL_KeyCode_SDLK_RALT: SDL_KeyCode = 1073742054;
pub const SDL_KeyCode_SDLK_RGUI: SDL_KeyCode = 1073742055;
pub const SDL_KeyCode_SDLK_MODE: SDL_KeyCode = 1073742081;
pub const SDL_KeyCode_SDLK_AUDIONEXT: SDL_KeyCode = 1073742082;
pub const SDL_KeyCode_SDLK_AUDIOPREV: SDL_KeyCode = 1073742083;
pub const SDL_KeyCode_SDLK_AUDIOSTOP: SDL_KeyCode = 1073742084;
pub const SDL_KeyCode_SDLK_AUDIOPLAY: SDL_KeyCode = 1073742085;
pub const SDL_KeyCode_SDLK_AUDIOMUTE: SDL_KeyCode = 1073742086;
pub const SDL_KeyCode_SDLK_MEDIASELECT: SDL_KeyCode = 1073742087;
pub const SDL_KeyCode_SDLK_WWW: SDL_KeyCode = 1073742088;
pub const SDL_KeyCode_SDLK_MAIL: SDL_KeyCode = 1073742089;
pub const SDL_KeyCode_SDLK_CALCULATOR: SDL_KeyCode = 1073742090;
pub const SDL_KeyCode_SDLK_COMPUTER: SDL_KeyCode = 1073742091;
pub const SDL_KeyCode_SDLK_AC_SEARCH: SDL_KeyCode = 1073742092;
pub const SDL_KeyCode_SDLK_AC_HOME: SDL_KeyCode = 1073742093;
pub const SDL_KeyCode_SDLK_AC_BACK: SDL_KeyCode = 1073742094;
pub const SDL_KeyCode_SDLK_AC_FORWARD: SDL_KeyCode = 1073742095;
pub const SDL_KeyCode_SDLK_AC_STOP: SDL_KeyCode = 1073742096;
pub const SDL_KeyCode_SDLK_AC_REFRESH: SDL_KeyCode = 1073742097;
pub const SDL_KeyCode_SDLK_AC_BOOKMARKS: SDL_KeyCode = 1073742098;
pub const SDL_KeyCode_SDLK_BRIGHTNESSDOWN: SDL_KeyCode = 1073742099;
pub const SDL_KeyCode_SDLK_BRIGHTNESSUP: SDL_KeyCode = 1073742100;
pub const SDL_KeyCode_SDLK_DISPLAYSWITCH: SDL_KeyCode = 1073742101;
pub const SDL_KeyCode_SDLK_KBDILLUMTOGGLE: SDL_KeyCode = 1073742102;
pub const SDL_KeyCode_SDLK_KBDILLUMDOWN: SDL_KeyCode = 1073742103;
pub const SDL_KeyCode_SDLK_KBDILLUMUP: SDL_KeyCode = 1073742104;
pub const SDL_KeyCode_SDLK_EJECT: SDL_KeyCode = 1073742105;
pub const SDL_KeyCode_SDLK_SLEEP: SDL_KeyCode = 1073742106;
pub const SDL_KeyCode_SDLK_APP1: SDL_KeyCode = 1073742107;
pub const SDL_KeyCode_SDLK_APP2: SDL_KeyCode = 1073742108;
pub const SDL_KeyCode_SDLK_AUDIOREWIND: SDL_KeyCode = 1073742109;
pub const SDL_KeyCode_SDLK_AUDIOFASTFORWARD: SDL_KeyCode = 1073742110;
pub const SDL_KeyCode_SDLK_SOFTLEFT: SDL_KeyCode = 1073742111;
pub const SDL_KeyCode_SDLK_SOFTRIGHT: SDL_KeyCode = 1073742112;
pub const SDL_KeyCode_SDLK_CALL: SDL_KeyCode = 1073742113;
pub const SDL_KeyCode_SDLK_ENDCALL: SDL_KeyCode = 1073742114;
pub type SDL_KeyCode = ::std::os::raw::c_uint;
pub const SDL_Keymod_SDL_KMOD_NONE: SDL_Keymod = 0;
pub const SDL_Keymod_SDL_KMOD_LSHIFT: SDL_Keymod = 1;
pub const SDL_Keymod_SDL_KMOD_RSHIFT: SDL_Keymod = 2;
pub const SDL_Keymod_SDL_KMOD_LCTRL: SDL_Keymod = 64;
pub const SDL_Keymod_SDL_KMOD_RCTRL: SDL_Keymod = 128;
pub const SDL_Keymod_SDL_KMOD_LALT: SDL_Keymod = 256;
pub const SDL_Keymod_SDL_KMOD_RALT: SDL_Keymod = 512;
pub const SDL_Keymod_SDL_KMOD_LGUI: SDL_Keymod = 1024;
pub const SDL_Keymod_SDL_KMOD_RGUI: SDL_Keymod = 2048;
pub const SDL_Keymod_SDL_KMOD_NUM: SDL_Keymod = 4096;
pub const SDL_Keymod_SDL_KMOD_CAPS: SDL_Keymod = 8192;
pub const SDL_Keymod_SDL_KMOD_MODE: SDL_Keymod = 16384;
pub const SDL_Keymod_SDL_KMOD_SCROLL: SDL_Keymod = 32768;
pub const SDL_Keymod_SDL_KMOD_CTRL: SDL_Keymod = 192;
pub const SDL_Keymod_SDL_KMOD_SHIFT: SDL_Keymod = 3;
pub const SDL_Keymod_SDL_KMOD_ALT: SDL_Keymod = 768;
pub const SDL_Keymod_SDL_KMOD_GUI: SDL_Keymod = 3072;
pub const SDL_Keymod_SDL_KMOD_RESERVED: SDL_Keymod = 32768;
#[doc = " \\brief Enumeration of valid key mods (possibly OR'd together)."]
pub type SDL_Keymod = ::std::os::raw::c_uint;
pub const SDL_PixelType_SDL_PIXELTYPE_UNKNOWN: SDL_PixelType = 0;
pub const SDL_PixelType_SDL_PIXELTYPE_INDEX1: SDL_PixelType = 1;
pub const SDL_PixelType_SDL_PIXELTYPE_INDEX4: SDL_PixelType = 2;
pub const SDL_PixelType_SDL_PIXELTYPE_INDEX8: SDL_PixelType = 3;
pub const SDL_PixelType_SDL_PIXELTYPE_PACKED8: SDL_PixelType = 4;
pub const SDL_PixelType_SDL_PIXELTYPE_PACKED16: SDL_PixelType = 5;
pub const SDL_PixelType_SDL_PIXELTYPE_PACKED32: SDL_PixelType = 6;
pub const SDL_PixelType_SDL_PIXELTYPE_ARRAYU8: SDL_PixelType = 7;
pub const SDL_PixelType_SDL_PIXELTYPE_ARRAYU16: SDL_PixelType = 8;
pub const SDL_PixelType_SDL_PIXELTYPE_ARRAYU32: SDL_PixelType = 9;
pub const SDL_PixelType_SDL_PIXELTYPE_ARRAYF16: SDL_PixelType = 10;
pub const SDL_PixelType_SDL_PIXELTYPE_ARRAYF32: SDL_PixelType = 11;
#[doc = " Pixel type."]
pub type SDL_PixelType = ::std::os::raw::c_uint;
pub const SDL_BitmapOrder_SDL_BITMAPORDER_NONE: SDL_BitmapOrder = 0;
pub const SDL_BitmapOrder_SDL_BITMAPORDER_4321: SDL_BitmapOrder = 1;
pub const SDL_BitmapOrder_SDL_BITMAPORDER_1234: SDL_BitmapOrder = 2;
#[doc = " Bitmap pixel order, high bit -> low bit."]
pub type SDL_BitmapOrder = ::std::os::raw::c_uint;
pub const SDL_PackedOrder_SDL_PACKEDORDER_NONE: SDL_PackedOrder = 0;
pub const SDL_PackedOrder_SDL_PACKEDORDER_XRGB: SDL_PackedOrder = 1;
pub const SDL_PackedOrder_SDL_PACKEDORDER_RGBX: SDL_PackedOrder = 2;
pub const SDL_PackedOrder_SDL_PACKEDORDER_ARGB: SDL_PackedOrder = 3;
pub const SDL_PackedOrder_SDL_PACKEDORDER_RGBA: SDL_PackedOrder = 4;
pub const SDL_PackedOrder_SDL_PACKEDORDER_XBGR: SDL_PackedOrder = 5;
pub const SDL_PackedOrder_SDL_PACKEDORDER_BGRX: SDL_PackedOrder = 6;
pub const SDL_PackedOrder_SDL_PACKEDORDER_ABGR: SDL_PackedOrder = 7;
pub const SDL_PackedOrder_SDL_PACKEDORDER_BGRA: SDL_PackedOrder = 8;
#[doc = " Packed component order, high bit -> low bit."]
pub type SDL_PackedOrder = ::std::os::raw::c_uint;
pub const SDL_ArrayOrder_SDL_ARRAYORDER_NONE: SDL_ArrayOrder = 0;
pub const SDL_ArrayOrder_SDL_ARRAYORDER_RGB: SDL_ArrayOrder = 1;
pub const SDL_ArrayOrder_SDL_ARRAYORDER_UNUSED1: SDL_ArrayOrder = 2;
pub const SDL_ArrayOrder_SDL_ARRAYORDER_UNUSED2: SDL_ArrayOrder = 3;
pub const SDL_ArrayOrder_SDL_ARRAYORDER_BGR: SDL_ArrayOrder = 4;
#[doc = " Array component order, low byte -> high byte."]
pub type SDL_ArrayOrder = ::std::os::raw::c_uint;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_NONE: SDL_PackedLayout = 0;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_332: SDL_PackedLayout = 1;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_4444: SDL_PackedLayout = 2;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_1555: SDL_PackedLayout = 3;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_5551: SDL_PackedLayout = 4;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_565: SDL_PackedLayout = 5;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_8888: SDL_PackedLayout = 6;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_2101010: SDL_PackedLayout = 7;
pub const SDL_PackedLayout_SDL_PACKEDLAYOUT_1010102: SDL_PackedLayout = 8;
#[doc = " Packed component layout."]
pub type SDL_PackedLayout = ::std::os::raw::c_uint;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_UNKNOWN: SDL_PixelFormatEnum = 0;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_INDEX1LSB: SDL_PixelFormatEnum = 286261504;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_INDEX1MSB: SDL_PixelFormatEnum = 287310080;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_INDEX4LSB: SDL_PixelFormatEnum = 303039488;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_INDEX4MSB: SDL_PixelFormatEnum = 304088064;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_INDEX8: SDL_PixelFormatEnum = 318769153;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGB332: SDL_PixelFormatEnum = 336660481;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XRGB4444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGB444: SDL_PixelFormatEnum = 353504258;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XBGR4444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGR444: SDL_PixelFormatEnum = 357698562;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XRGB1555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGB555: SDL_PixelFormatEnum = 353570562;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XBGR1555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGR555: SDL_PixelFormatEnum = 357764866;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ARGB4444: SDL_PixelFormatEnum = 355602434;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBA4444: SDL_PixelFormatEnum = 356651010;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ABGR4444: SDL_PixelFormatEnum = 359796738;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRA4444: SDL_PixelFormatEnum = 360845314;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ARGB1555: SDL_PixelFormatEnum = 355667970;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBA5551: SDL_PixelFormatEnum = 356782082;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ABGR1555: SDL_PixelFormatEnum = 359862274;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRA5551: SDL_PixelFormatEnum = 360976386;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGB565: SDL_PixelFormatEnum = 353701890;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGR565: SDL_PixelFormatEnum = 357896194;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGB24: SDL_PixelFormatEnum = 386930691;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGR24: SDL_PixelFormatEnum = 390076419;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XRGB8888: SDL_PixelFormatEnum = 370546692;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBX8888: SDL_PixelFormatEnum = 371595268;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XBGR8888: SDL_PixelFormatEnum = 374740996;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRX8888: SDL_PixelFormatEnum = 375789572;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ARGB8888: SDL_PixelFormatEnum = 372645892;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBA8888: SDL_PixelFormatEnum = 373694468;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ABGR8888: SDL_PixelFormatEnum = 376840196;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRA8888: SDL_PixelFormatEnum = 377888772;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ARGB2101010: SDL_PixelFormatEnum = 372711428;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBA32: SDL_PixelFormatEnum = 376840196;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ARGB32: SDL_PixelFormatEnum = 377888772;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRA32: SDL_PixelFormatEnum = 372645892;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_ABGR32: SDL_PixelFormatEnum = 373694468;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_RGBX32: SDL_PixelFormatEnum = 374740996;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XRGB32: SDL_PixelFormatEnum = 375789572;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_BGRX32: SDL_PixelFormatEnum = 370546692;
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_XBGR32: SDL_PixelFormatEnum = 371595268;
#[doc = "< Planar mode: Y + V + U  (3 planes)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_YV12: SDL_PixelFormatEnum = 842094169;
#[doc = "< Planar mode: Y + U + V  (3 planes)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_IYUV: SDL_PixelFormatEnum = 1448433993;
#[doc = "< Packed mode: Y0+U0+Y1+V0 (1 plane)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_YUY2: SDL_PixelFormatEnum = 844715353;
#[doc = "< Packed mode: U0+Y0+V0+Y1 (1 plane)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_UYVY: SDL_PixelFormatEnum = 1498831189;
#[doc = "< Packed mode: Y0+V0+Y1+U0 (1 plane)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_YVYU: SDL_PixelFormatEnum = 1431918169;
#[doc = "< Planar mode: Y + U/V interleaved  (2 planes)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_NV12: SDL_PixelFormatEnum = 842094158;
#[doc = "< Planar mode: Y + V/U interleaved  (2 planes)"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_NV21: SDL_PixelFormatEnum = 825382478;
#[doc = "< Android video texture format"]
pub const SDL_PixelFormatEnum_SDL_PIXELFORMAT_EXTERNAL_OES: SDL_PixelFormatEnum = 542328143;
pub type SDL_PixelFormatEnum = ::std::os::raw::c_uint;
#[doc = " The bits of this structure can be directly reinterpreted as an integer-packed\n color which uses the SDL_PIXELFORMAT_RGBA32 format (SDL_PIXELFORMAT_ABGR8888\n on little-endian systems and SDL_PIXELFORMAT_RGBA8888 on big-endian systems)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Color {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
    pub a: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_Color() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Color>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_Color))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Color>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_Color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Color),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Palette {
    pub ncolors: ::std::os::raw::c_int,
    pub colors: *mut SDL_Color,
    pub version: Uint32,
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Palette() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Palette> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Palette>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Palette))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Palette>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Palette))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncolors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(ncolors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Palette),
            "::",
            stringify!(refcount)
        )
    );
}
#[doc = "  \\note Everything in the pixel format structure is read-only."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_PixelFormat {
    pub format: Uint32,
    pub palette: *mut SDL_Palette,
    pub BitsPerPixel: Uint8,
    pub BytesPerPixel: Uint8,
    pub padding: [Uint8; 2usize],
    pub Rmask: Uint32,
    pub Gmask: Uint32,
    pub Bmask: Uint32,
    pub Amask: Uint32,
    pub Rloss: Uint8,
    pub Gloss: Uint8,
    pub Bloss: Uint8,
    pub Aloss: Uint8,
    pub Rshift: Uint8,
    pub Gshift: Uint8,
    pub Bshift: Uint8,
    pub Ashift: Uint8,
    pub refcount: ::std::os::raw::c_int,
    pub next: *mut SDL_PixelFormat,
}
#[test]
fn bindgen_test_layout_SDL_PixelFormat() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_PixelFormat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_PixelFormat>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_PixelFormat>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_PixelFormat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitsPerPixel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BytesPerPixel) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(BytesPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rmask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gmask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bmask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Amask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Amask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rloss) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gloss) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bloss) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Aloss) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Aloss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rshift) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Rshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Gshift) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Gshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Bshift) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Bshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ashift) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(Ashift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(refcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_PixelFormat),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    #[doc = " Get the human readable name of a pixel format.\n\n \\param format the pixel format to query\n \\returns the human readable name of the specified pixel format or\n          `SDL_PIXELFORMAT_UNKNOWN` if the format isn't recognized.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetPixelFormatName(format: Uint32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Convert one of the enumerated pixel formats to a bpp value and RGBA masks.\n\n \\param format one of the SDL_PixelFormatEnum values\n \\param bpp a bits per pixel value; usually 15, 16, or 32\n \\param Rmask a pointer filled in with the red mask for the format\n \\param Gmask a pointer filled in with the green mask for the format\n \\param Bmask a pointer filled in with the blue mask for the format\n \\param Amask a pointer filled in with the alpha mask for the format\n \\returns SDL_TRUE on success or SDL_FALSE if the conversion wasn't\n          possible; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPixelFormatEnumForMasks"]
    pub fn SDL_GetMasksForPixelFormatEnum(
        format: Uint32,
        bpp: *mut ::std::os::raw::c_int,
        Rmask: *mut Uint32,
        Gmask: *mut Uint32,
        Bmask: *mut Uint32,
        Amask: *mut Uint32,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Convert a bpp value and RGBA masks to an enumerated pixel format.\n\n This will return `SDL_PIXELFORMAT_UNKNOWN` if the conversion wasn't\n possible.\n\n \\param bpp a bits per pixel value; usually 15, 16, or 32\n \\param Rmask the red mask for the format\n \\param Gmask the green mask for the format\n \\param Bmask the blue mask for the format\n \\param Amask the alpha mask for the format\n \\returns one of the SDL_PixelFormatEnum values\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetMasksForPixelFormatEnum"]
    pub fn SDL_GetPixelFormatEnumForMasks(
        bpp: ::std::os::raw::c_int,
        Rmask: Uint32,
        Gmask: Uint32,
        Bmask: Uint32,
        Amask: Uint32,
    ) -> Uint32;
}
extern "C" {
    #[doc = " Create an SDL_PixelFormat structure corresponding to a pixel format.\n\n Returned structure may come from a shared global cache (i.e. not newly\n allocated), and hence should not be modified, especially the palette. Weird\n errors such as `Blit combination not supported` may occur.\n\n \\param pixel_format one of the SDL_PixelFormatEnum values\n \\returns the new SDL_PixelFormat structure or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyPixelFormat"]
    pub fn SDL_CreatePixelFormat(pixel_format: Uint32) -> *mut SDL_PixelFormat;
}
extern "C" {
    #[doc = " Free an SDL_PixelFormat structure allocated by SDL_CreatePixelFormat().\n\n \\param format the SDL_PixelFormat structure to free\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePixelFormat"]
    pub fn SDL_DestroyPixelFormat(format: *mut SDL_PixelFormat);
}
extern "C" {
    #[doc = " Create a palette structure with the specified number of color entries.\n\n The palette entries are initialized to white.\n\n \\param ncolors represents the number of color entries in the color palette\n \\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n          there wasn't enough memory); call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyPalette"]
    pub fn SDL_CreatePalette(ncolors: ::std::os::raw::c_int) -> *mut SDL_Palette;
}
extern "C" {
    #[doc = " Set the palette for a pixel format structure.\n\n \\param format the SDL_PixelFormat structure that will use the palette\n \\param palette the SDL_Palette structure that will be used\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePalette\n \\sa SDL_DestroyPalette"]
    pub fn SDL_SetPixelFormatPalette(
        format: *mut SDL_PixelFormat,
        palette: *mut SDL_Palette,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a range of colors in a palette.\n\n \\param palette the SDL_Palette structure to modify\n \\param colors an array of SDL_Color structures to copy into the palette\n \\param firstcolor the index of the first palette entry to modify\n \\param ncolors the number of entries to modify\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePalette\n \\sa SDL_CreateSurface"]
    pub fn SDL_SetPaletteColors(
        palette: *mut SDL_Palette,
        colors: *const SDL_Color,
        firstcolor: ::std::os::raw::c_int,
        ncolors: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Free a palette created with SDL_CreatePalette().\n\n \\param palette the SDL_Palette structure to be freed\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePalette"]
    pub fn SDL_DestroyPalette(palette: *mut SDL_Palette);
}
extern "C" {
    #[doc = " Map an RGB triple to an opaque pixel value for a given pixel format.\n\n This function maps the RGB color value to the specified pixel format and\n returns the pixel value best approximating the given RGB color value for\n the given pixel format.\n\n If the format has a palette (8-bit) the index of the closest matching color\n in the palette will be returned.\n\n If the specified pixel format has an alpha component it will be returned as\n all 1 bits (fully opaque).\n\n If the pixel format bpp (color depth) is less than 32-bpp then the unused\n upper bits of the return value can safely be ignored (e.g., with a 16-bpp\n format the return value can be assigned to a Uint16, and similarly a Uint8\n for an 8-bpp format).\n\n \\param format an SDL_PixelFormat structure describing the pixel format\n \\param r the red component of the pixel in the range 0-255\n \\param g the green component of the pixel in the range 0-255\n \\param b the blue component of the pixel in the range 0-255\n \\returns a pixel value\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRGB\n \\sa SDL_GetRGBA\n \\sa SDL_MapRGBA"]
    pub fn SDL_MapRGB(format: *const SDL_PixelFormat, r: Uint8, g: Uint8, b: Uint8) -> Uint32;
}
extern "C" {
    #[doc = " Map an RGBA quadruple to a pixel value for a given pixel format.\n\n This function maps the RGBA color value to the specified pixel format and\n returns the pixel value best approximating the given RGBA color value for\n the given pixel format.\n\n If the specified pixel format has no alpha component the alpha value will\n be ignored (as it will be in formats with a palette).\n\n If the format has a palette (8-bit) the index of the closest matching color\n in the palette will be returned.\n\n If the pixel format bpp (color depth) is less than 32-bpp then the unused\n upper bits of the return value can safely be ignored (e.g., with a 16-bpp\n format the return value can be assigned to a Uint16, and similarly a Uint8\n for an 8-bpp format).\n\n \\param format an SDL_PixelFormat structure describing the format of the\n               pixel\n \\param r the red component of the pixel in the range 0-255\n \\param g the green component of the pixel in the range 0-255\n \\param b the blue component of the pixel in the range 0-255\n \\param a the alpha component of the pixel in the range 0-255\n \\returns a pixel value\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRGB\n \\sa SDL_GetRGBA\n \\sa SDL_MapRGB"]
    pub fn SDL_MapRGBA(
        format: *const SDL_PixelFormat,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> Uint32;
}
extern "C" {
    #[doc = " Get RGB values from a pixel in the specified format.\n\n This function uses the entire 8-bit [0..255] range when converting color\n components from pixel formats with less than 8-bits per RGB component\n (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\n \\param pixel a pixel value\n \\param format an SDL_PixelFormat structure describing the format of the\n               pixel\n \\param r a pointer filled in with the red component\n \\param g a pointer filled in with the green component\n \\param b a pointer filled in with the blue component\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRGBA\n \\sa SDL_MapRGB\n \\sa SDL_MapRGBA"]
    pub fn SDL_GetRGB(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    );
}
extern "C" {
    #[doc = " Get RGBA values from a pixel in the specified format.\n\n This function uses the entire 8-bit [0..255] range when converting color\n components from pixel formats with less than 8-bits per RGB component\n (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n\n If the surface has no alpha component, the alpha will be returned as 0xff\n (100% opaque).\n\n \\param pixel a pixel value\n \\param format an SDL_PixelFormat structure describing the format of the\n               pixel\n \\param r a pointer filled in with the red component\n \\param g a pointer filled in with the green component\n \\param b a pointer filled in with the blue component\n \\param a a pointer filled in with the alpha component\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRGB\n \\sa SDL_MapRGB\n \\sa SDL_MapRGBA"]
    pub fn SDL_GetRGBA(
        pixel: Uint32,
        format: *const SDL_PixelFormat,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    );
}
#[doc = " The structure that defines a point (integer)\n\n \\sa SDL_GetRectEnclosingPoints\n \\sa SDL_PointInRect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Point {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Point() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Point>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_Point))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Point>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Point),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " The structure that defines a point (floating point)\n\n \\sa SDL_GetRectEnclosingPointsFloat\n \\sa SDL_PointInRectFloat"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_FPoint {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_SDL_FPoint() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_FPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_FPoint>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_FPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FPoint),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " A rectangle, with the origin at the upper left (integer).\n\n \\sa SDL_RectEmpty\n \\sa SDL_RectsEqual\n \\sa SDL_HasRectIntersection\n \\sa SDL_GetRectIntersection\n \\sa SDL_GetRectAndLineIntersection\n \\sa SDL_GetRectUnion\n \\sa SDL_GetRectEnclosingPoints"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Rect {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Rect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Rect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Rect),
            "::",
            stringify!(h)
        )
    );
}
#[doc = " A rectangle, with the origin at the upper left (floating point).\n\n \\sa SDL_RectEmptyFloat\n \\sa SDL_RectsEqualFloat\n \\sa SDL_RectsEqualEpsilon\n \\sa SDL_HasRectIntersectionFloat\n \\sa SDL_GetRectIntersectionFloat\n \\sa SDL_GetRectAndLineIntersectionFloat\n \\sa SDL_GetRectUnionFloat\n \\sa SDL_GetRectEnclosingPointsFloat\n \\sa SDL_PointInRectFloat"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_FRect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[test]
fn bindgen_test_layout_SDL_FRect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_FRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_FRect>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_FRect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_FRect>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_FRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_FRect),
            "::",
            stringify!(h)
        )
    );
}
extern "C" {
    #[doc = " Determine whether two rectangles intersect.\n\n If either pointer is NULL the function will return SDL_FALSE.\n\n \\param A an SDL_Rect structure representing the first rectangle\n \\param B an SDL_Rect structure representing the second rectangle\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRectIntersection"]
    pub fn SDL_HasRectIntersection(A: *const SDL_Rect, B: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the intersection of two rectangles.\n\n If `result` is NULL then this function will return SDL_FALSE.\n\n \\param A an SDL_Rect structure representing the first rectangle\n \\param B an SDL_Rect structure representing the second rectangle\n \\param result an SDL_Rect structure filled in with the intersection of\n               rectangles `A` and `B`\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasRectIntersection"]
    pub fn SDL_GetRectIntersection(
        A: *const SDL_Rect,
        B: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the union of two rectangles.\n\n \\param A an SDL_Rect structure representing the first rectangle\n \\param B an SDL_Rect structure representing the second rectangle\n \\param result an SDL_Rect structure filled in with the union of rectangles\n               `A` and `B`\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectUnion(
        A: *const SDL_Rect,
        B: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Calculate a minimal rectangle enclosing a set of points.\n\n If `clip` is not NULL then only points inside of the clipping rectangle are\n considered.\n\n \\param points an array of SDL_Point structures representing points to be\n               enclosed\n \\param count the number of structures in the `points` array\n \\param clip an SDL_Rect used for clipping or NULL to enclose all points\n \\param result an SDL_Rect structure filled in with the minimal enclosing\n               rectangle\n \\returns SDL_TRUE if any points were enclosed or SDL_FALSE if all the\n          points were outside of the clipping rectangle.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectEnclosingPoints(
        points: *const SDL_Point,
        count: ::std::os::raw::c_int,
        clip: *const SDL_Rect,
        result: *mut SDL_Rect,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the intersection of a rectangle and line segment.\n\n This function is used to clip a line segment to a rectangle. A line segment\n contained entirely within the rectangle or that does not intersect will\n remain unchanged. A line segment that crosses the rectangle at either or\n both ends will be clipped to the boundary of the rectangle and the new\n coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n \\param rect an SDL_Rect structure representing the rectangle to intersect\n \\param X1 a pointer to the starting X-coordinate of the line\n \\param Y1 a pointer to the starting Y-coordinate of the line\n \\param X2 a pointer to the ending X-coordinate of the line\n \\param Y2 a pointer to the ending Y-coordinate of the line\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectAndLineIntersection(
        rect: *const SDL_Rect,
        X1: *mut ::std::os::raw::c_int,
        Y1: *mut ::std::os::raw::c_int,
        X2: *mut ::std::os::raw::c_int,
        Y2: *mut ::std::os::raw::c_int,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Determine whether two rectangles intersect with float precision.\n\n If either pointer is NULL the function will return SDL_FALSE.\n\n \\param A an SDL_FRect structure representing the first rectangle\n \\param B an SDL_FRect structure representing the second rectangle\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRectIntersection"]
    pub fn SDL_HasRectIntersectionFloat(A: *const SDL_FRect, B: *const SDL_FRect) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the intersection of two rectangles with float precision.\n\n If `result` is NULL then this function will return SDL_FALSE.\n\n \\param A an SDL_FRect structure representing the first rectangle\n \\param B an SDL_FRect structure representing the second rectangle\n \\param result an SDL_FRect structure filled in with the intersection of\n               rectangles `A` and `B`\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasRectIntersectionFloat"]
    pub fn SDL_GetRectIntersectionFloat(
        A: *const SDL_FRect,
        B: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the union of two rectangles with float precision.\n\n \\param A an SDL_FRect structure representing the first rectangle\n \\param B an SDL_FRect structure representing the second rectangle\n \\param result an SDL_FRect structure filled in with the union of rectangles\n               `A` and `B`\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectUnionFloat(
        A: *const SDL_FRect,
        B: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Calculate a minimal rectangle enclosing a set of points with float\n precision.\n\n If `clip` is not NULL then only points inside of the clipping rectangle are\n considered.\n\n \\param points an array of SDL_FPoint structures representing points to be\n               enclosed\n \\param count the number of structures in the `points` array\n \\param clip an SDL_FRect used for clipping or NULL to enclose all points\n \\param result an SDL_FRect structure filled in with the minimal enclosing\n               rectangle\n \\returns SDL_TRUE if any points were enclosed or SDL_FALSE if all the\n          points were outside of the clipping rectangle.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectEnclosingPointsFloat(
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
        clip: *const SDL_FRect,
        result: *mut SDL_FRect,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Calculate the intersection of a rectangle and line segment with float\n precision.\n\n This function is used to clip a line segment to a rectangle. A line segment\n contained entirely within the rectangle or that does not intersect will\n remain unchanged. A line segment that crosses the rectangle at either or\n both ends will be clipped to the boundary of the rectangle and the new\n coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.\n\n \\param rect an SDL_FRect structure representing the rectangle to intersect\n \\param X1 a pointer to the starting X-coordinate of the line\n \\param Y1 a pointer to the starting Y-coordinate of the line\n \\param X2 a pointer to the ending X-coordinate of the line\n \\param Y2 a pointer to the ending Y-coordinate of the line\n \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRectAndLineIntersectionFloat(
        rect: *const SDL_FRect,
        X1: *mut f32,
        Y1: *mut f32,
        X2: *mut f32,
        Y2: *mut f32,
    ) -> SDL_bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_BlitMap {
    _unused: [u8; 0],
}
#[doc = " \\brief A collection of pixels used in software blitting.\n\n \\note  This structure should be treated as read-only, except for \\c pixels,\n        which, if not NULL, contains the raw pixel data for the surface."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Surface {
    #[doc = "< Read-only"]
    pub flags: Uint32,
    #[doc = "< Read-only"]
    pub format: *mut SDL_PixelFormat,
    #[doc = "< Read-only"]
    pub w: ::std::os::raw::c_int,
    #[doc = "< Read-only"]
    pub h: ::std::os::raw::c_int,
    #[doc = "< Read-only"]
    pub pitch: ::std::os::raw::c_int,
    #[doc = "< Read-write"]
    pub pixels: *mut ::std::os::raw::c_void,
    #[doc = "< Read-write"]
    pub userdata: *mut ::std::os::raw::c_void,
    #[doc = "< Read-only"]
    pub locked: ::std::os::raw::c_int,
    #[doc = "< Private"]
    pub list_blitmap: *mut ::std::os::raw::c_void,
    #[doc = "< Read-only"]
    pub clip_rect: SDL_Rect,
    #[doc = "< Private"]
    pub map: *mut SDL_BlitMap,
    #[doc = "< Read-mostly"]
    pub refcount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_Surface() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Surface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Surface>(),
        96usize,
        concat!("Size of: ", stringify!(SDL_Surface))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Surface>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Surface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(pixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(userdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locked) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(locked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list_blitmap) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(list_blitmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clip_rect) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(clip_rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcount) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Surface),
            "::",
            stringify!(refcount)
        )
    );
}
#[doc = " \\brief The type of function used for surface blitting functions."]
pub type SDL_blit = ::std::option::Option<
    unsafe extern "C" fn(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int,
>;
#[doc = "< Full range JPEG"]
pub const SDL_YUV_CONVERSION_MODE_SDL_YUV_CONVERSION_JPEG: SDL_YUV_CONVERSION_MODE = 0;
#[doc = "< BT.601 (the default)"]
pub const SDL_YUV_CONVERSION_MODE_SDL_YUV_CONVERSION_BT601: SDL_YUV_CONVERSION_MODE = 1;
#[doc = "< BT.709"]
pub const SDL_YUV_CONVERSION_MODE_SDL_YUV_CONVERSION_BT709: SDL_YUV_CONVERSION_MODE = 2;
#[doc = "< BT.601 for SD content, BT.709 for HD content"]
pub const SDL_YUV_CONVERSION_MODE_SDL_YUV_CONVERSION_AUTOMATIC: SDL_YUV_CONVERSION_MODE = 3;
#[doc = " \\brief The formula used for converting between YUV and RGB"]
pub type SDL_YUV_CONVERSION_MODE = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Allocate a new RGB surface with a specific pixel format.\n\n \\param width the width of the surface\n \\param height the height of the surface\n \\param format the SDL_PixelFormatEnum for the new surface's pixel format.\n \\returns the new SDL_Surface structure that is created or NULL if it fails;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSurfaceFrom\n \\sa SDL_DestroySurface"]
    pub fn SDL_CreateSurface(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Allocate a new RGB surface with a specific pixel format and existing pixel\n data.\n\n No copy is made of the pixel data. Pixel data is not managed automatically;\n you must free the surface before you free the pixel data.\n\n Pitch is the offset in bytes from one row of pixels to the next, e.g.\n `width*4` for `SDL_PIXELFORMAT_RGBA8888`.\n\n You may pass NULL for pixels and 0 for pitch to create a surface that you\n will fill in with valid values later.\n\n \\param pixels a pointer to existing pixel data\n \\param width the width of the surface\n \\param height the height of the surface\n \\param pitch the pitch of the surface in bytes\n \\param format the SDL_PixelFormatEnum for the new surface's pixel format.\n \\returns the new SDL_Surface structure that is created or NULL if it fails;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSurface\n \\sa SDL_DestroySurface"]
    pub fn SDL_CreateSurfaceFrom(
        pixels: *mut ::std::os::raw::c_void,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        pitch: ::std::os::raw::c_int,
        format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Free an RGB surface.\n\n It is safe to pass NULL to this function.\n\n \\param surface the SDL_Surface to free.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSurface\n \\sa SDL_CreateSurfaceFrom\n \\sa SDL_LoadBMP\n \\sa SDL_LoadBMP_RW"]
    pub fn SDL_DestroySurface(surface: *mut SDL_Surface);
}
extern "C" {
    #[doc = " Set the palette used by a surface.\n\n A single palette can be shared with many surfaces.\n\n \\param surface the SDL_Surface structure to update\n \\param palette the SDL_Palette structure to use\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetSurfacePalette(
        surface: *mut SDL_Surface,
        palette: *mut SDL_Palette,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set up a surface for directly accessing the pixels.\n\n Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to\n and read from `surface->pixels`, using the pixel format stored in\n `surface->format`. Once you are done accessing the surface, you should use\n SDL_UnlockSurface() to release it.\n\n Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to\n 0, then you can read and write to the surface at any time, and the pixel\n format of the surface will not change.\n\n \\param surface the SDL_Surface structure to be locked\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_MUSTLOCK\n \\sa SDL_UnlockSurface"]
    pub fn SDL_LockSurface(surface: *mut SDL_Surface) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Release a surface after directly accessing the pixels.\n\n \\param surface the SDL_Surface structure to be unlocked\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LockSurface"]
    pub fn SDL_UnlockSurface(surface: *mut SDL_Surface);
}
extern "C" {
    #[doc = " Load a BMP image from a seekable SDL data stream.\n\n The new surface should be freed with SDL_DestroySurface(). Not doing so\n will result in a memory leak.\n\n \\param src the data stream for the surface\n \\param freesrc if SDL_TRUE, calls SDL_RWclose() on `src` before returning,\n                even in the case of an error\n \\returns a pointer to a new SDL_Surface structure or NULL if there was an\n          error; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroySurface\n \\sa SDL_LoadBMP\n \\sa SDL_SaveBMP_RW"]
    pub fn SDL_LoadBMP_RW(src: *mut SDL_RWops, freesrc: SDL_bool) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Load a BMP image from a file.\n\n The new surface should be freed with SDL_DestroySurface(). Not doing so\n will result in a memory leak.\n\n \\param file the BMP file to load\n \\returns a pointer to a new SDL_Surface structure or NULL if there was an\n          error; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroySurface\n \\sa SDL_LoadBMP_RW\n \\sa SDL_SaveBMP"]
    pub fn SDL_LoadBMP(file: *const ::std::os::raw::c_char) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Save a surface to a seekable SDL data stream in BMP format.\n\n Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\n BMP directly. Other RGB formats with 8-bit or higher get converted to a\n 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\n surface before they are saved. YUV and paletted 1-bit and 4-bit formats are\n not supported.\n\n \\param surface the SDL_Surface structure containing the image to be saved\n \\param dst a data stream to save to\n \\param freedst if SDL_TRUE, calls SDL_RWclose() on `dst` before returning,\n                even in the case of an error\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LoadBMP_RW\n \\sa SDL_SaveBMP"]
    pub fn SDL_SaveBMP_RW(
        surface: *mut SDL_Surface,
        dst: *mut SDL_RWops,
        freedst: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Save a surface to a file.\n\n Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\n BMP directly. Other RGB formats with 8-bit or higher get converted to a\n 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\n surface before they are saved. YUV and paletted 1-bit and 4-bit formats are\n not supported.\n\n \\param surface the SDL_Surface structure containing the image to be saved\n \\param file a file to save to\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LoadBMP\n \\sa SDL_SaveBMP_RW"]
    pub fn SDL_SaveBMP(
        surface: *mut SDL_Surface,
        file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the RLE acceleration hint for a surface.\n\n If RLE is enabled, color key and alpha blending blits are much faster, but\n the surface must be locked before directly accessing the pixels.\n\n \\param surface the SDL_Surface structure to optimize\n \\param flag 0 to disable, non-zero to enable RLE acceleration\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface\n \\sa SDL_LockSurface\n \\sa SDL_UnlockSurface"]
    pub fn SDL_SetSurfaceRLE(
        surface: *mut SDL_Surface,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Returns whether the surface is RLE enabled\n\n It is safe to pass a NULL `surface` here; it will return SDL_FALSE.\n\n \\param surface the SDL_Surface structure to query\n \\returns SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetSurfaceRLE"]
    pub fn SDL_SurfaceHasRLE(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    #[doc = " Set the color key (transparent pixel) in a surface.\n\n The color key defines a pixel value that will be treated as transparent in\n a blit. For example, one can use this to specify that cyan pixels should be\n considered transparent, and therefore not rendered.\n\n It is a pixel of the format used by the surface, as generated by\n SDL_MapRGB().\n\n RLE acceleration can substantially speed up blitting of images with large\n horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.\n\n \\param surface the SDL_Surface structure to update\n \\param flag SDL_TRUE to enable color key, SDL_FALSE to disable color key\n \\param key the transparent pixel\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface\n \\sa SDL_GetSurfaceColorKey"]
    pub fn SDL_SetSurfaceColorKey(
        surface: *mut SDL_Surface,
        flag: ::std::os::raw::c_int,
        key: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Returns whether the surface has a color key\n\n It is safe to pass a NULL `surface` here; it will return SDL_FALSE.\n\n \\param surface the SDL_Surface structure to query\n \\returns SDL_TRUE if the surface has a color key, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetSurfaceColorKey\n \\sa SDL_GetSurfaceColorKey"]
    pub fn SDL_SurfaceHasColorKey(surface: *mut SDL_Surface) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the color key (transparent pixel) for a surface.\n\n The color key is a pixel of the format used by the surface, as generated by\n SDL_MapRGB().\n\n If the surface doesn't have color key enabled this function returns -1.\n\n \\param surface the SDL_Surface structure to query\n \\param key a pointer filled in with the transparent pixel\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface\n \\sa SDL_SetSurfaceColorKey"]
    pub fn SDL_GetSurfaceColorKey(
        surface: *mut SDL_Surface,
        key: *mut Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set an additional color value multiplied into blit operations.\n\n When this surface is blitted, during the blit operation each source color\n channel is modulated by the appropriate color value according to the\n following formula:\n\n `srcC = srcC * (color / 255)`\n\n \\param surface the SDL_Surface structure to update\n \\param r the red color value multiplied into blit operations\n \\param g the green color value multiplied into blit operations\n \\param b the blue color value multiplied into blit operations\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetSurfaceColorMod\n \\sa SDL_SetSurfaceAlphaMod"]
    pub fn SDL_SetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the additional color value multiplied into blit operations.\n\n \\param surface the SDL_Surface structure to query\n \\param r a pointer filled in with the current red color value\n \\param g a pointer filled in with the current green color value\n \\param b a pointer filled in with the current blue color value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetSurfaceAlphaMod\n \\sa SDL_SetSurfaceColorMod"]
    pub fn SDL_GetSurfaceColorMod(
        surface: *mut SDL_Surface,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set an additional alpha value used in blit operations.\n\n When this surface is blitted, during the blit operation the source alpha\n value is modulated by this alpha value according to the following formula:\n\n `srcA = srcA * (alpha / 255)`\n\n \\param surface the SDL_Surface structure to update\n \\param alpha the alpha value multiplied into blit operations\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetSurfaceAlphaMod\n \\sa SDL_SetSurfaceColorMod"]
    pub fn SDL_SetSurfaceAlphaMod(surface: *mut SDL_Surface, alpha: Uint8)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the additional alpha value used in blit operations.\n\n \\param surface the SDL_Surface structure to query\n \\param alpha a pointer filled in with the current alpha value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetSurfaceColorMod\n \\sa SDL_SetSurfaceAlphaMod"]
    pub fn SDL_GetSurfaceAlphaMod(
        surface: *mut SDL_Surface,
        alpha: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the blend mode used for blit operations.\n\n To copy a surface to another surface (or texture) without blending with the\n existing data, the blendmode of the SOURCE surface should be set to\n `SDL_BLENDMODE_NONE`.\n\n \\param surface the SDL_Surface structure to update\n \\param blendMode the SDL_BlendMode to use for blit blending\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetSurfaceBlendMode"]
    pub fn SDL_SetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the blend mode used for blit operations.\n\n \\param surface the SDL_Surface structure to query\n \\param blendMode a pointer filled in with the current SDL_BlendMode\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetSurfaceBlendMode"]
    pub fn SDL_GetSurfaceBlendMode(
        surface: *mut SDL_Surface,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the clipping rectangle for a surface.\n\n When `surface` is the destination of a blit, only the area within the clip\n rectangle is drawn into.\n\n Note that blits are automatically clipped to the edges of the source and\n destination surfaces.\n\n \\param surface the SDL_Surface structure to be clipped\n \\param rect the SDL_Rect structure representing the clipping rectangle, or\n             NULL to disable clipping\n \\returns SDL_TRUE if the rectangle intersects the surface, otherwise\n          SDL_FALSE and blits will be completely clipped.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface\n \\sa SDL_GetSurfaceClipRect"]
    pub fn SDL_SetSurfaceClipRect(surface: *mut SDL_Surface, rect: *const SDL_Rect) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the clipping rectangle for a surface.\n\n When `surface` is the destination of a blit, only the area within the clip\n rectangle is drawn into.\n\n \\param surface the SDL_Surface structure representing the surface to be\n                clipped\n \\param rect an SDL_Rect structure filled in with the clipping rectangle for\n             the surface\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface\n \\sa SDL_SetSurfaceClipRect"]
    pub fn SDL_GetSurfaceClipRect(
        surface: *mut SDL_Surface,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDL_DuplicateSurface(surface: *mut SDL_Surface) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Copy an existing surface to a new surface of the specified format.\n\n This function is used to optimize images for faster *repeat* blitting. This\n is accomplished by converting the original and storing the result as a new\n surface. The new, optimized surface can then be used as the source for\n future blits, making them faster.\n\n \\param surface the existing SDL_Surface structure to convert\n \\param format the SDL_PixelFormat structure that the new surface is\n               optimized for\n \\returns the new SDL_Surface structure that is created or NULL if it fails;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePixelFormat\n \\sa SDL_ConvertSurfaceFormat\n \\sa SDL_CreateSurface"]
    pub fn SDL_ConvertSurface(
        surface: *mut SDL_Surface,
        format: *const SDL_PixelFormat,
    ) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Copy an existing surface to a new surface of the specified format enum.\n\n This function operates just like SDL_ConvertSurface(), but accepts an\n SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,\n it might be easier to call but it doesn't have access to palette\n information for the destination surface, in case that would be important.\n\n \\param surface the existing SDL_Surface structure to convert\n \\param pixel_format the SDL_PixelFormatEnum that the new surface is\n                     optimized for\n \\returns the new SDL_Surface structure that is created or NULL if it fails;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePixelFormat\n \\sa SDL_ConvertSurface\n \\sa SDL_CreateSurface"]
    pub fn SDL_ConvertSurfaceFormat(
        surface: *mut SDL_Surface,
        pixel_format: Uint32,
    ) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Copy a block of pixels of one format to another format.\n\n \\param width the width of the block to copy, in pixels\n \\param height the height of the block to copy, in pixels\n \\param src_format an SDL_PixelFormatEnum value of the `src` pixels format\n \\param src a pointer to the source pixels\n \\param src_pitch the pitch of the source pixels, in bytes\n \\param dst_format an SDL_PixelFormatEnum value of the `dst` pixels format\n \\param dst a pointer to be filled in with new pixel data\n \\param dst_pitch the pitch of the destination pixels, in bytes\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ConvertPixels(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        src_format: Uint32,
        src: *const ::std::os::raw::c_void,
        src_pitch: ::std::os::raw::c_int,
        dst_format: Uint32,
        dst: *mut ::std::os::raw::c_void,
        dst_pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Premultiply the alpha on a block of pixels.\n\n This is safe to use with src == dst, but not for other overlapping areas.\n\n This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.\n\n \\param width the width of the block to convert, in pixels\n \\param height the height of the block to convert, in pixels\n \\param src_format an SDL_PixelFormatEnum value of the `src` pixels format\n \\param src a pointer to the source pixels\n \\param src_pitch the pitch of the source pixels, in bytes\n \\param dst_format an SDL_PixelFormatEnum value of the `dst` pixels format\n \\param dst a pointer to be filled in with premultiplied pixel data\n \\param dst_pitch the pitch of the destination pixels, in bytes\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_PremultiplyAlpha(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        src_format: Uint32,
        src: *const ::std::os::raw::c_void,
        src_pitch: ::std::os::raw::c_int,
        dst_format: Uint32,
        dst: *mut ::std::os::raw::c_void,
        dst_pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a fast fill of a rectangle with a specific color.\n\n `color` should be a pixel of the format used by the surface, and can be\n generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\n alpha component then the destination is simply filled with that alpha\n information, no blending takes place.\n\n If there is a clip rectangle set on the destination (set via\n SDL_SetSurfaceClipRect()), then this function will fill based on the\n intersection of the clip rectangle and `rect`.\n\n \\param dst the SDL_Surface structure that is the drawing target\n \\param rect the SDL_Rect structure representing the rectangle to fill, or\n             NULL to fill the entire surface\n \\param color the color to fill with\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_FillSurfaceRects"]
    pub fn SDL_FillSurfaceRect(
        dst: *mut SDL_Surface,
        rect: *const SDL_Rect,
        color: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a fast fill of a set of rectangles with a specific color.\n\n `color` should be a pixel of the format used by the surface, and can be\n generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\n alpha component then the destination is simply filled with that alpha\n information, no blending takes place.\n\n If there is a clip rectangle set on the destination (set via\n SDL_SetSurfaceClipRect()), then this function will fill based on the\n intersection of the clip rectangle and `rect`.\n\n \\param dst the SDL_Surface structure that is the drawing target\n \\param rects an array of SDL_Rects representing the rectangles to fill.\n \\param count the number of rectangles in the array\n \\param color the color to fill with\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_FillSurfaceRect"]
    pub fn SDL_FillSurfaceRects(
        dst: *mut SDL_Surface,
        rects: *const SDL_Rect,
        count: ::std::os::raw::c_int,
        color: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Performs a fast blit from the source surface to the destination surface.\n\n This assumes that the source and destination rectangles are the same size.\n If either `srcrect` or `dstrect` are NULL, the entire surface (`src` or\n `dst`) is copied. The final blit rectangles are saved in `srcrect` and\n `dstrect` after all clipping is performed.\n\n The blit function should not be called on a locked surface.\n\n The blit semantics for surfaces with and without blending and colorkey are\n defined as follows:\n\n ```c\n    RGBA->RGB:\n      Source surface blend mode set to SDL_BLENDMODE_BLEND:\n       alpha-blend (using the source alpha-channel and per-surface alpha)\n       SDL_SRCCOLORKEY ignored.\n     Source surface blend mode set to SDL_BLENDMODE_NONE:\n       copy RGB.\n       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n       RGB values of the source color key, ignoring alpha in the\n       comparison.\n\n   RGB->RGBA:\n     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n       alpha-blend (using the source per-surface alpha)\n     Source surface blend mode set to SDL_BLENDMODE_NONE:\n       copy RGB, set destination alpha to source per-surface alpha value.\n     both:\n       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n       source color key.\n\n   RGBA->RGBA:\n     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n       alpha-blend (using the source alpha-channel and per-surface alpha)\n       SDL_SRCCOLORKEY ignored.\n     Source surface blend mode set to SDL_BLENDMODE_NONE:\n       copy all of RGBA to the destination.\n       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n       RGB values of the source color key, ignoring alpha in the\n       comparison.\n\n   RGB->RGB:\n     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n       alpha-blend (using the source per-surface alpha)\n     Source surface blend mode set to SDL_BLENDMODE_NONE:\n       copy RGB.\n     both:\n       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n       source color key.\n ```\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied, or NULL to copy the entire surface\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface, filled with the actual rectangle\n                used after clipping\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface"]
    pub fn SDL_BlitSurface(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform low-level surface blitting only.\n\n This is a semi-private blit function and it performs low-level surface\n blitting, assuming the input rectangles have already been clipped.\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied, or NULL to copy the entire surface\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurface"]
    pub fn SDL_BlitSurfaceUnchecked(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a fast, low quality, stretch blit between two surfaces of the same\n format.\n\n **WARNING**: Please use SDL_BlitSurfaceScaled() instead.\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SoftStretch(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform bilinear scaling between two surfaces of the same format, 32BPP.\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SoftStretchLinear(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a scaled surface copy to a destination surface.\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface, filled with the actual rectangle\n                used after clipping\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_BlitSurfaceScaled(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform low-level surface scaled blitting only.\n\n This is a semi-private function and it performs low-level surface blitting,\n assuming the input rectangles have already been clipped.\n\n \\param src the SDL_Surface structure to be copied from\n \\param srcrect the SDL_Rect structure representing the rectangle to be\n                copied\n \\param dst the SDL_Surface structure that is the blit target\n \\param dstrect the SDL_Rect structure representing the target rectangle in\n                the destination surface\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_BlitSurfaceScaled"]
    pub fn SDL_BlitSurfaceUncheckedScaled(
        src: *mut SDL_Surface,
        srcrect: *const SDL_Rect,
        dst: *mut SDL_Surface,
        dstrect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the YUV conversion mode\n\n \\param mode YUV conversion mode\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetYUVConversionMode(mode: SDL_YUV_CONVERSION_MODE);
}
extern "C" {
    #[doc = " Get the YUV conversion mode\n\n \\returns YUV conversion mode\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetYUVConversionMode() -> SDL_YUV_CONVERSION_MODE;
}
extern "C" {
    #[doc = " Get the YUV conversion mode, returning the correct mode for the resolution\n when the current conversion mode is SDL_YUV_CONVERSION_AUTOMATIC\n\n \\param width width\n \\param height height\n \\returns YUV conversion mode\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetYUVConversionModeForResolution(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> SDL_YUV_CONVERSION_MODE;
}
pub type SDL_DisplayID = Uint32;
pub type SDL_WindowID = Uint32;
#[doc = "< Unknown system theme"]
pub const SDL_SystemTheme_SDL_SYSTEM_THEME_UNKNOWN: SDL_SystemTheme = 0;
#[doc = "< Light colored system theme"]
pub const SDL_SystemTheme_SDL_SYSTEM_THEME_LIGHT: SDL_SystemTheme = 1;
#[doc = "< Dark colored system theme"]
pub const SDL_SystemTheme_SDL_SYSTEM_THEME_DARK: SDL_SystemTheme = 2;
#[doc = "  \\brief System theme"]
pub type SDL_SystemTheme = ::std::os::raw::c_uint;
#[doc = "  \\brief  The structure that defines a display mode\n\n  \\sa SDL_GetFullscreenDisplayModes()\n  \\sa SDL_GetDesktopDisplayMode()\n  \\sa SDL_GetCurrentDisplayMode()\n  \\sa SDL_SetWindowFullscreenMode()\n  \\sa SDL_GetWindowFullscreenMode()"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DisplayMode {
    #[doc = "< the display this mode is associated with"]
    pub displayID: SDL_DisplayID,
    #[doc = "< pixel format"]
    pub format: Uint32,
    #[doc = "< width"]
    pub w: ::std::os::raw::c_int,
    #[doc = "< height"]
    pub h: ::std::os::raw::c_int,
    #[doc = "< scale converting size to pixels (e.g. a 1920x1080 mode with 2.0 scale would have 3840x2160 pixels)"]
    pub pixel_density: f32,
    #[doc = "< refresh rate (or zero for unspecified)"]
    pub refresh_rate: f32,
    #[doc = "< driver-specific data, initialize to 0"]
    pub driverdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SDL_DisplayMode() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DisplayMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DisplayMode>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DisplayMode>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DisplayMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(displayID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixel_density) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(pixel_density)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refresh_rate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(refresh_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayMode),
            "::",
            stringify!(driverdata)
        )
    );
}
#[doc = "< The display orientation can't be determined"]
pub const SDL_DisplayOrientation_SDL_ORIENTATION_UNKNOWN: SDL_DisplayOrientation = 0;
#[doc = "< The display is in landscape mode, with the right side up, relative to portrait mode"]
pub const SDL_DisplayOrientation_SDL_ORIENTATION_LANDSCAPE: SDL_DisplayOrientation = 1;
#[doc = "< The display is in landscape mode, with the left side up, relative to portrait mode"]
pub const SDL_DisplayOrientation_SDL_ORIENTATION_LANDSCAPE_FLIPPED: SDL_DisplayOrientation = 2;
#[doc = "< The display is in portrait mode"]
pub const SDL_DisplayOrientation_SDL_ORIENTATION_PORTRAIT: SDL_DisplayOrientation = 3;
#[doc = "< The display is in portrait mode, upside down"]
pub const SDL_DisplayOrientation_SDL_ORIENTATION_PORTRAIT_FLIPPED: SDL_DisplayOrientation = 4;
#[doc = "  \\brief Display orientation"]
pub type SDL_DisplayOrientation = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Window {
    _unused: [u8; 0],
}
#[doc = "< window is in fullscreen mode"]
pub const SDL_WindowFlags_SDL_WINDOW_FULLSCREEN: SDL_WindowFlags = 1;
#[doc = "< window usable with OpenGL context"]
pub const SDL_WindowFlags_SDL_WINDOW_OPENGL: SDL_WindowFlags = 2;
#[doc = "< window is occluded"]
pub const SDL_WindowFlags_SDL_WINDOW_OCCLUDED: SDL_WindowFlags = 4;
#[doc = "< window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; SDL_ShowWindow() is required for it to become visible"]
pub const SDL_WindowFlags_SDL_WINDOW_HIDDEN: SDL_WindowFlags = 8;
#[doc = "< no window decoration"]
pub const SDL_WindowFlags_SDL_WINDOW_BORDERLESS: SDL_WindowFlags = 16;
#[doc = "< window can be resized"]
pub const SDL_WindowFlags_SDL_WINDOW_RESIZABLE: SDL_WindowFlags = 32;
#[doc = "< window is minimized"]
pub const SDL_WindowFlags_SDL_WINDOW_MINIMIZED: SDL_WindowFlags = 64;
#[doc = "< window is maximized"]
pub const SDL_WindowFlags_SDL_WINDOW_MAXIMIZED: SDL_WindowFlags = 128;
#[doc = "< window has grabbed mouse input"]
pub const SDL_WindowFlags_SDL_WINDOW_MOUSE_GRABBED: SDL_WindowFlags = 256;
#[doc = "< window has input focus"]
pub const SDL_WindowFlags_SDL_WINDOW_INPUT_FOCUS: SDL_WindowFlags = 512;
#[doc = "< window has mouse focus"]
pub const SDL_WindowFlags_SDL_WINDOW_MOUSE_FOCUS: SDL_WindowFlags = 1024;
#[doc = "< window not created by SDL"]
pub const SDL_WindowFlags_SDL_WINDOW_FOREIGN: SDL_WindowFlags = 2048;
#[doc = "< window uses high pixel density back buffer if possible"]
pub const SDL_WindowFlags_SDL_WINDOW_HIGH_PIXEL_DENSITY: SDL_WindowFlags = 8192;
#[doc = "< window has mouse captured (unrelated to MOUSE_GRABBED)"]
pub const SDL_WindowFlags_SDL_WINDOW_MOUSE_CAPTURE: SDL_WindowFlags = 16384;
#[doc = "< window should always be above others"]
pub const SDL_WindowFlags_SDL_WINDOW_ALWAYS_ON_TOP: SDL_WindowFlags = 32768;
#[doc = "< window should be treated as a utility window, not showing in the task bar and window list"]
pub const SDL_WindowFlags_SDL_WINDOW_UTILITY: SDL_WindowFlags = 131072;
#[doc = "< window should be treated as a tooltip and must be created using SDL_CreatePopupWindow()"]
pub const SDL_WindowFlags_SDL_WINDOW_TOOLTIP: SDL_WindowFlags = 262144;
#[doc = "< window should be treated as a popup menu and must be created using SDL_CreatePopupWindow()"]
pub const SDL_WindowFlags_SDL_WINDOW_POPUP_MENU: SDL_WindowFlags = 524288;
#[doc = "< window has grabbed keyboard input"]
pub const SDL_WindowFlags_SDL_WINDOW_KEYBOARD_GRABBED: SDL_WindowFlags = 1048576;
#[doc = "< window usable for Vulkan surface"]
pub const SDL_WindowFlags_SDL_WINDOW_VULKAN: SDL_WindowFlags = 268435456;
#[doc = "< window usable for Metal view"]
pub const SDL_WindowFlags_SDL_WINDOW_METAL: SDL_WindowFlags = 536870912;
#[doc = "< window with transparent buffer"]
pub const SDL_WindowFlags_SDL_WINDOW_TRANSPARENT: SDL_WindowFlags = 1073741824;
#[doc = "  \\brief The flags on a window\n\n  \\sa SDL_GetWindowFlags()"]
pub type SDL_WindowFlags = ::std::os::raw::c_uint;
#[doc = "< Cancel any window flash state"]
pub const SDL_FlashOperation_SDL_FLASH_CANCEL: SDL_FlashOperation = 0;
#[doc = "< Flash the window briefly to get attention"]
pub const SDL_FlashOperation_SDL_FLASH_BRIEFLY: SDL_FlashOperation = 1;
#[doc = "< Flash the window until it gets focus"]
pub const SDL_FlashOperation_SDL_FLASH_UNTIL_FOCUSED: SDL_FlashOperation = 2;
#[doc = "  \\brief Window flash operation"]
pub type SDL_FlashOperation = ::std::os::raw::c_uint;
#[doc = "  \\brief An opaque handle to an OpenGL context."]
pub type SDL_GLContext = *mut ::std::os::raw::c_void;
#[doc = "  \\brief Opaque EGL types."]
pub type SDL_EGLDisplay = *mut ::std::os::raw::c_void;
pub type SDL_EGLConfig = *mut ::std::os::raw::c_void;
pub type SDL_EGLSurface = *mut ::std::os::raw::c_void;
pub type SDL_EGLAttrib = isize;
pub type SDL_EGLint = ::std::os::raw::c_int;
#[doc = "  \\brief EGL attribute initialization callback types."]
pub type SDL_EGLAttribArrayCallback =
    ::std::option::Option<unsafe extern "C" fn() -> *mut SDL_EGLAttrib>;
pub type SDL_EGLIntArrayCallback = ::std::option::Option<unsafe extern "C" fn() -> *mut SDL_EGLint>;
pub const SDL_GLattr_SDL_GL_RED_SIZE: SDL_GLattr = 0;
pub const SDL_GLattr_SDL_GL_GREEN_SIZE: SDL_GLattr = 1;
pub const SDL_GLattr_SDL_GL_BLUE_SIZE: SDL_GLattr = 2;
pub const SDL_GLattr_SDL_GL_ALPHA_SIZE: SDL_GLattr = 3;
pub const SDL_GLattr_SDL_GL_BUFFER_SIZE: SDL_GLattr = 4;
pub const SDL_GLattr_SDL_GL_DOUBLEBUFFER: SDL_GLattr = 5;
pub const SDL_GLattr_SDL_GL_DEPTH_SIZE: SDL_GLattr = 6;
pub const SDL_GLattr_SDL_GL_STENCIL_SIZE: SDL_GLattr = 7;
pub const SDL_GLattr_SDL_GL_ACCUM_RED_SIZE: SDL_GLattr = 8;
pub const SDL_GLattr_SDL_GL_ACCUM_GREEN_SIZE: SDL_GLattr = 9;
pub const SDL_GLattr_SDL_GL_ACCUM_BLUE_SIZE: SDL_GLattr = 10;
pub const SDL_GLattr_SDL_GL_ACCUM_ALPHA_SIZE: SDL_GLattr = 11;
pub const SDL_GLattr_SDL_GL_STEREO: SDL_GLattr = 12;
pub const SDL_GLattr_SDL_GL_MULTISAMPLEBUFFERS: SDL_GLattr = 13;
pub const SDL_GLattr_SDL_GL_MULTISAMPLESAMPLES: SDL_GLattr = 14;
pub const SDL_GLattr_SDL_GL_ACCELERATED_VISUAL: SDL_GLattr = 15;
pub const SDL_GLattr_SDL_GL_RETAINED_BACKING: SDL_GLattr = 16;
pub const SDL_GLattr_SDL_GL_CONTEXT_MAJOR_VERSION: SDL_GLattr = 17;
pub const SDL_GLattr_SDL_GL_CONTEXT_MINOR_VERSION: SDL_GLattr = 18;
pub const SDL_GLattr_SDL_GL_CONTEXT_FLAGS: SDL_GLattr = 19;
pub const SDL_GLattr_SDL_GL_CONTEXT_PROFILE_MASK: SDL_GLattr = 20;
pub const SDL_GLattr_SDL_GL_SHARE_WITH_CURRENT_CONTEXT: SDL_GLattr = 21;
pub const SDL_GLattr_SDL_GL_FRAMEBUFFER_SRGB_CAPABLE: SDL_GLattr = 22;
pub const SDL_GLattr_SDL_GL_CONTEXT_RELEASE_BEHAVIOR: SDL_GLattr = 23;
pub const SDL_GLattr_SDL_GL_CONTEXT_RESET_NOTIFICATION: SDL_GLattr = 24;
pub const SDL_GLattr_SDL_GL_CONTEXT_NO_ERROR: SDL_GLattr = 25;
pub const SDL_GLattr_SDL_GL_FLOATBUFFERS: SDL_GLattr = 26;
pub const SDL_GLattr_SDL_GL_EGL_PLATFORM: SDL_GLattr = 27;
#[doc = "  \\brief OpenGL configuration attributes"]
pub type SDL_GLattr = ::std::os::raw::c_uint;
pub const SDL_GLprofile_SDL_GL_CONTEXT_PROFILE_CORE: SDL_GLprofile = 1;
pub const SDL_GLprofile_SDL_GL_CONTEXT_PROFILE_COMPATIBILITY: SDL_GLprofile = 2;
#[doc = "< GLX_CONTEXT_ES2_PROFILE_BIT_EXT"]
pub const SDL_GLprofile_SDL_GL_CONTEXT_PROFILE_ES: SDL_GLprofile = 4;
pub type SDL_GLprofile = ::std::os::raw::c_uint;
pub const SDL_GLcontextFlag_SDL_GL_CONTEXT_DEBUG_FLAG: SDL_GLcontextFlag = 1;
pub const SDL_GLcontextFlag_SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG: SDL_GLcontextFlag = 2;
pub const SDL_GLcontextFlag_SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG: SDL_GLcontextFlag = 4;
pub const SDL_GLcontextFlag_SDL_GL_CONTEXT_RESET_ISOLATION_FLAG: SDL_GLcontextFlag = 8;
pub type SDL_GLcontextFlag = ::std::os::raw::c_uint;
pub const SDL_GLcontextReleaseFlag_SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE: SDL_GLcontextReleaseFlag =
    0;
pub const SDL_GLcontextReleaseFlag_SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH: SDL_GLcontextReleaseFlag =
    1;
pub type SDL_GLcontextReleaseFlag = ::std::os::raw::c_uint;
pub const SDL_GLContextResetNotification_SDL_GL_CONTEXT_RESET_NO_NOTIFICATION:
    SDL_GLContextResetNotification = 0;
pub const SDL_GLContextResetNotification_SDL_GL_CONTEXT_RESET_LOSE_CONTEXT:
    SDL_GLContextResetNotification = 1;
pub type SDL_GLContextResetNotification = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Get the number of video drivers compiled into SDL.\n\n \\returns a number >= 1 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetVideoDriver"]
    pub fn SDL_GetNumVideoDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the name of a built in video driver.\n\n The video drivers are presented in the order in which they are normally\n checked during initialization.\n\n \\param index the index of a video driver\n \\returns the name of the video driver with the given **index**.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumVideoDrivers"]
    pub fn SDL_GetVideoDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the name of the currently initialized video driver.\n\n \\returns the name of the current video driver or NULL if no driver has been\n          initialized.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumVideoDrivers\n \\sa SDL_GetVideoDriver"]
    pub fn SDL_GetCurrentVideoDriver() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the current system theme\n\n \\returns the current system theme, light, dark, or unknown\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetSystemTheme() -> SDL_SystemTheme;
}
extern "C" {
    #[doc = " Get a list of currently connected displays.\n\n \\param count a pointer filled in with the number of displays returned\n \\returns a 0 terminated array of display instance IDs which should be freed\n          with SDL_free(), or NULL on error; call SDL_GetError() for more\n          details.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetDisplays(count: *mut ::std::os::raw::c_int) -> *mut SDL_DisplayID;
}
extern "C" {
    #[doc = " Return the primary display.\n\n \\returns the instance ID of the primary display on success or 0 on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetPrimaryDisplay() -> SDL_DisplayID;
}
extern "C" {
    #[doc = " Get the name of a display in UTF-8 encoding.\n\n \\param displayID the instance ID of the display to query\n \\returns the name of a display or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayName(displayID: SDL_DisplayID) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the desktop area represented by a display.\n\n The primary display is always located at (0,0).\n\n \\param displayID the instance ID of the display to query\n \\param rect the SDL_Rect structure filled in with the display bounds\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplayUsableBounds\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayBounds(
        displayID: SDL_DisplayID,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the usable desktop area represented by a display, in screen\n coordinates.\n\n This is the same area as SDL_GetDisplayBounds() reports, but with portions\n reserved by the system removed. For example, on Apple's macOS, this\n subtracts the area occupied by the menu bar and dock.\n\n Setting a window to be fullscreen generally bypasses these unusable areas,\n so these are good guidelines for the maximum space available to a\n non-fullscreen window.\n\n \\param displayID the instance ID of the display to query\n \\param rect the SDL_Rect structure filled in with the display bounds\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplayBounds\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayUsableBounds(
        displayID: SDL_DisplayID,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the orientation of a display when it is unrotated.\n\n \\param displayID the instance ID of the display to query\n \\returns The SDL_DisplayOrientation enum value of the display, or\n          `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetNaturalDisplayOrientation(displayID: SDL_DisplayID) -> SDL_DisplayOrientation;
}
extern "C" {
    #[doc = " Get the orientation of a display.\n\n \\param displayID the instance ID of the display to query\n \\returns The SDL_DisplayOrientation enum value of the display, or\n          `SDL_ORIENTATION_UNKNOWN` if it isn't available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetCurrentDisplayOrientation(displayID: SDL_DisplayID) -> SDL_DisplayOrientation;
}
extern "C" {
    #[doc = " Get the content scale of a display.\n\n The content scale is the expected scale for content based on the DPI\n settings of the display. For example, a 4K display might have a 2.0 (200%)\n display scale, which means that the user expects UI elements to be twice as\n big on this display, to aid in readability.\n\n \\param displayID the instance ID of the display to query\n \\returns The content scale of the display, or 0.0f on error; call\n          SDL_GetError() for more details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayContentScale(displayID: SDL_DisplayID) -> f32;
}
extern "C" {
    #[doc = " Get a list of fullscreen display modes available on a display.\n\n The display modes are sorted in this priority:\n\n - w -> largest to smallest\n - h -> largest to smallest\n - bits per pixel -> more colors to fewer colors\n - packed pixel layout -> largest to smallest\n - refresh rate -> highest to lowest\n - pixel density -> lowest to highest\n\n \\param displayID the instance ID of the display to query\n \\param count a pointer filled in with the number of displays returned\n \\returns a NULL terminated array of display mode pointers which should be\n          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n          more details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetFullscreenDisplayModes(
        displayID: SDL_DisplayID,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *const SDL_DisplayMode;
}
extern "C" {
    #[doc = " Get the closest match to the requested display mode.\n\n The available display modes are scanned and `closest` is filled in with the\n closest mode matching the requested mode and returned. The mode format and\n refresh rate default to the desktop mode if they are set to 0. The modes\n are scanned with size being first priority, format being second priority,\n and finally checking the refresh rate. If all the available modes are too\n small, then NULL is returned.\n\n \\param displayID the instance ID of the display to query\n \\param w the width in pixels of the desired display mode\n \\param h the height in pixels of the desired display mode\n \\param refresh_rate the refresh rate of the desired display mode, or 0.0f\n                     for the desktop refresh rate\n \\param include_high_density_modes Boolean to include high density modes in\n                                   the search\n \\returns a pointer to the closest display mode equal to or larger than the\n          desired mode, or NULL on error; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplays\n \\sa SDL_GetFullscreenDisplayModes"]
    pub fn SDL_GetClosestFullscreenDisplayMode(
        displayID: SDL_DisplayID,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        refresh_rate: f32,
        include_high_density_modes: SDL_bool,
    ) -> *const SDL_DisplayMode;
}
extern "C" {
    #[doc = " Get information about the desktop's display mode.\n\n There's a difference between this function and SDL_GetCurrentDisplayMode()\n when SDL runs fullscreen and has changed the resolution. In that case this\n function will return the previous native display mode, and not the current\n display mode.\n\n \\param displayID the instance ID of the display to query\n \\returns a pointer to the desktop display mode or NULL on error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetCurrentDisplayMode\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDesktopDisplayMode(displayID: SDL_DisplayID) -> *const SDL_DisplayMode;
}
extern "C" {
    #[doc = " Get information about the current display mode.\n\n There's a difference between this function and SDL_GetDesktopDisplayMode()\n when SDL runs fullscreen and has changed the resolution. In that case this\n function will return the current display mode, and not the previous native\n display mode.\n\n \\param displayID the instance ID of the display to query\n \\returns a pointer to the desktop display mode or NULL on error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDesktopDisplayMode\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetCurrentDisplayMode(displayID: SDL_DisplayID) -> *const SDL_DisplayMode;
}
extern "C" {
    #[doc = " Get the display containing a point.\n\n \\param point the point to query\n \\returns the instance ID of the display containing the point or 0 on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplayBounds\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayForPoint(point: *const SDL_Point) -> SDL_DisplayID;
}
extern "C" {
    #[doc = " Get the display primarily containing a rect.\n\n \\param rect the rect to query\n \\returns the instance ID of the display entirely containing the rect or\n          closest to the center of the rect on success or 0 on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplayBounds\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayForRect(rect: *const SDL_Rect) -> SDL_DisplayID;
}
extern "C" {
    #[doc = " Get the display associated with a window.\n\n \\param window the window to query\n \\returns the instance ID of the display containing the center of the window\n          on success or 0 on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetDisplayBounds\n \\sa SDL_GetDisplays"]
    pub fn SDL_GetDisplayForWindow(window: *mut SDL_Window) -> SDL_DisplayID;
}
extern "C" {
    #[doc = " Get the pixel density of a window.\n\n This is a ratio of pixel size to window size. For example, if the window is\n 1920x1080 and it has a high density back buffer of 3840x2160 pixels, it\n would have a pixel density of 2.0.\n\n \\param window the window to query\n \\returns the pixel density or 0.0f on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowDisplayScale"]
    pub fn SDL_GetWindowPixelDensity(window: *mut SDL_Window) -> f32;
}
extern "C" {
    #[doc = " Get the content display scale relative to a window's pixel size.\n\n This is a combination of the window pixel density and the display content\n scale, and is the expected scale for displaying content in this window. For\n example, if a 3840x2160 window had a display scale of 2.0, the user expects\n the content to take twice as many pixels and be the same physical size as\n if it were being displayed in a 1920x1080 window with a display scale of\n 1.0.\n\n Conceptually this value corresponds to the scale display setting, and is\n updated when that setting is changed, or the window moves to a display with\n a different scale setting.\n\n \\param window the window to query\n \\returns the display scale, or 0.0f on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetWindowDisplayScale(window: *mut SDL_Window) -> f32;
}
extern "C" {
    #[doc = " Set the display mode to use when a window is visible and fullscreen.\n\n This only affects the display mode used when the window is fullscreen. To\n change the window size when the window is not fullscreen, use\n SDL_SetWindowSize().\n\n \\param window the window to affect\n \\param mode a pointer to the display mode to use, which can be NULL for\n             desktop mode, or one of the fullscreen modes returned by\n             SDL_GetFullscreenDisplayModes().\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFullscreenMode\n \\sa SDL_SetWindowFullscreen"]
    pub fn SDL_SetWindowFullscreenMode(
        window: *mut SDL_Window,
        mode: *const SDL_DisplayMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query the display mode to use when a window is visible at fullscreen.\n\n \\param window the window to query\n \\returns a pointer to the fullscreen mode to use or NULL for desktop mode\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowFullscreenMode\n \\sa SDL_SetWindowFullscreen"]
    pub fn SDL_GetWindowFullscreenMode(window: *mut SDL_Window) -> *const SDL_DisplayMode;
}
extern "C" {
    #[doc = " Get the raw ICC profile data for the screen the window is currently on.\n\n Data returned should be freed with SDL_free.\n\n \\param window the window to query\n \\param size the size of the ICC profile\n \\returns the raw ICC profile data on success or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetWindowICCProfile(
        window: *mut SDL_Window,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Get the pixel format associated with the window.\n\n \\param window the window to query\n \\returns the pixel format of the window on success or\n          SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetWindowPixelFormat(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    #[doc = " Create a window with the specified dimensions and flags.\n\n `flags` may be any of the following OR'd together:\n\n - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution\n - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context\n - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance\n - `SDL_WINDOW_METAL`: window usable with a Metal instance\n - `SDL_WINDOW_HIDDEN`: window is not visible\n - `SDL_WINDOW_BORDERLESS`: no window decoration\n - `SDL_WINDOW_RESIZABLE`: window can be resized\n - `SDL_WINDOW_MINIMIZED`: window is minimized\n - `SDL_WINDOW_MAXIMIZED`: window is maximized\n - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus\n\n The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.\n\n On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist\n property to YES, otherwise you will not receive a High-DPI OpenGL canvas.\n\n The window pixel size may differ from its window coordinate size if the\n window is on a high pixel density display. Use SDL_GetWindowSize() to query\n the client area's size in window coordinates, and\n SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the\n drawable size in pixels. Note that the drawable size can vary after the\n window is created and should be queried again if you get an\n SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.\n\n If the window is set fullscreen, the width and height parameters `w` and\n `h` will not be used. However, invalid size parameters (e.g. too large) may\n still fail. Window size is actually limited to 16384 x 16384 for all\n platforms at window creation.\n\n If the window is created with any of the SDL_WINDOW_OPENGL or\n SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function\n (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the\n corresponding UnloadLibrary function is called by SDL_DestroyWindow().\n\n If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,\n SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.\n\n If SDL_WINDOW_METAL is specified on an OS that does not support Metal,\n SDL_CreateWindow() will fail.\n\n On non-Apple devices, SDL requires you to either not link to the Vulkan\n loader or link to a dynamic library version. This limitation may be removed\n in a future version of SDL.\n\n \\param title the title of the window, in UTF-8 encoding\n \\param w the width of the window\n \\param h the height of the window\n \\param flags 0, or one or more SDL_WindowFlags OR'd together\n \\returns the window that was created or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePopupWindow\n \\sa SDL_CreateWindowFrom\n \\sa SDL_CreateWindowWithPosition\n \\sa SDL_DestroyWindow"]
    pub fn SDL_CreateWindow(
        title: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Create a window with the specified position, dimensions, and flags.\n\n `flags` may be any of the following OR'd together:\n\n - `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution\n - `SDL_WINDOW_OPENGL`: window usable with an OpenGL context\n - `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance\n - `SDL_WINDOW_METAL`: window usable with a Metal instance\n - `SDL_WINDOW_HIDDEN`: window is not visible\n - `SDL_WINDOW_BORDERLESS`: no window decoration\n - `SDL_WINDOW_RESIZABLE`: window can be resized\n - `SDL_WINDOW_MINIMIZED`: window is minimized\n - `SDL_WINDOW_MAXIMIZED`: window is maximized\n - `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus\n\n The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.\n\n On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist\n property to YES, otherwise you will not receive a High-DPI OpenGL canvas.\n\n The window pixel size may differ from its window coordinate size if the\n window is on a high pixel density display. Use SDL_GetWindowSize() to query\n the client area's size in window coordinates, and\n SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the\n drawable size in pixels. Note that the drawable size can vary after the\n window is created and should be queried again if you get an\n SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.\n\n If the window is set fullscreen, the width and height parameters `w` and\n `h` will not be used. However, invalid size parameters (e.g. too large) may\n still fail. Window size is actually limited to 16384 x 16384 for all\n platforms at window creation.\n\n If the window is created with any of the SDL_WINDOW_OPENGL or\n SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function\n (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the\n corresponding UnloadLibrary function is called by SDL_DestroyWindow().\n\n If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,\n SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.\n\n If SDL_WINDOW_METAL is specified on an OS that does not support Metal,\n SDL_CreateWindow() will fail.\n\n On non-Apple devices, SDL requires you to either not link to the Vulkan\n loader or link to a dynamic library version. This limitation may be removed\n in a future version of SDL.\n\n \\param title the title of the window, in UTF-8 encoding\n \\param x the x position of the window, or `SDL_WINDOWPOS_CENTERED`\n \\param y the y position of the window, or `SDL_WINDOWPOS_CENTERED`\n \\param w the width of the window\n \\param h the height of the window\n \\param flags 0, or one or more SDL_WindowFlags OR'd together\n \\returns the window that was created or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePopupWindow\n \\sa SDL_CreateWindow\n \\sa SDL_CreateWindowFrom\n \\sa SDL_DestroyWindow"]
    pub fn SDL_CreateWindowWithPosition(
        title: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Create a child popup window of the specified parent window.\n\n 'flags' **must** contain exactly one of the following: -\n 'SDL_WINDOW_TOOLTIP': The popup window is a tooltip and will not pass any\n input events. - 'SDL_WINDOW_POPUP_MENU': The popup window is a popup menu.\n The topmost popup menu will implicitly gain the keyboard focus.\n\n The following flags are not relevant to popup window creation and will be\n ignored: - 'SDL_WINDOW_MINIMIZED' - 'SDL_WINDOW_MAXIMIZED' -\n 'SDL_WINDOW_FULLSCREEN' - 'SDL_WINDOW_BORDERLESS' -\n 'SDL_WINDOW_SKIP_TASKBAR'\n\n The parent parameter **must** be non-null and a valid window. The parent of\n a popup window can be either a regular, toplevel window, or another popup\n window.\n\n Popup windows cannot be minimized, maximized, made fullscreen, raised,\n flash, be made a modal window, be the parent of a modal window, or grab the\n mouse and/or keyboard. Attempts to do so will fail.\n\n Popup windows implicitly do not have a border/decorations and do not appear\n on the taskbar/dock or in lists of windows such as alt-tab menus.\n\n If a parent window is hidden, any child popup windows will be recursively\n hidden as well. Child popup windows not explicitly hidden will be restored\n when the parent is shown.\n\n If the parent window is destroyed, any child popup windows will be\n recursively destroyed as well.\n\n \\param parent the parent of the window, must not be NULL\n \\param offset_x the x position of the popup window relative to the origin\n                 of the parent\n \\param offset_y the y position of the popup window relative to the origin\n                 of the parent window\n \\param w the width of the window\n \\param h the height of the window\n \\param flags SDL_WINDOW_TOOLTIP or SDL_WINDOW_POPUP MENU, and zero or more\n              additional SDL_WindowFlags OR'd together.\n \\returns the window that was created or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateWindow\n \\sa SDL_DestroyWindow\n \\sa SDL_GetWindowParent"]
    pub fn SDL_CreatePopupWindow(
        parent: *mut SDL_Window,
        offset_x: ::std::os::raw::c_int,
        offset_y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Create an SDL window from an existing native window.\n\n In some cases (e.g. OpenGL) and on some platforms (e.g. Microsoft Windows)\n the hint `SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT` needs to be configured\n before using SDL_CreateWindowFrom().\n\n \\param data a pointer to driver-dependent window creation data, typically\n             your native window cast to a void*\n \\returns the window that was created or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateWindow\n \\sa SDL_DestroyWindow"]
    pub fn SDL_CreateWindowFrom(data: *const ::std::os::raw::c_void) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get the numeric ID of a window.\n\n The numeric ID is what SDL_WindowEvent references, and is necessary to map\n these events to specific SDL_Window objects.\n\n \\param window the window to query\n \\returns the ID of the window on success or 0 on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFromID"]
    pub fn SDL_GetWindowID(window: *mut SDL_Window) -> SDL_WindowID;
}
extern "C" {
    #[doc = " Get a window from a stored ID.\n\n The numeric ID is what SDL_WindowEvent references, and is necessary to map\n these events to specific SDL_Window objects.\n\n \\param id the ID of the window\n \\returns the window associated with `id` or NULL if it doesn't exist; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowID"]
    pub fn SDL_GetWindowFromID(id: SDL_WindowID) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get parent of a window.\n\n \\param window the window to query\n \\returns the parent of the window on success or NULL if the window has no\n          parent.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreatePopupWindow"]
    pub fn SDL_GetWindowParent(window: *mut SDL_Window) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get the window flags.\n\n \\param window the window to query\n \\returns a mask of the SDL_WindowFlags associated with `window`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateWindow\n \\sa SDL_HideWindow\n \\sa SDL_MaximizeWindow\n \\sa SDL_MinimizeWindow\n \\sa SDL_SetWindowFullscreen\n \\sa SDL_SetWindowGrab\n \\sa SDL_ShowWindow"]
    pub fn SDL_GetWindowFlags(window: *mut SDL_Window) -> Uint32;
}
extern "C" {
    #[doc = " Set the title of a window.\n\n This string is expected to be in UTF-8 encoding.\n\n \\param window the window to change\n \\param title the desired window title in UTF-8 format\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowTitle"]
    pub fn SDL_SetWindowTitle(
        window: *mut SDL_Window,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the title of a window.\n\n \\param window the window to query\n \\returns the title of the window in UTF-8 format or \"\" if there is no\n          title.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowTitle"]
    pub fn SDL_GetWindowTitle(window: *mut SDL_Window) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Set the icon for a window.\n\n \\param window the window to change\n \\param icon an SDL_Surface structure containing the icon for the window\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetWindowIcon(
        window: *mut SDL_Window,
        icon: *mut SDL_Surface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Associate an arbitrary named pointer with a window.\n\n `name` is case-sensitive.\n\n \\param window the window to associate with the pointer\n \\param name the name of the pointer\n \\param userdata the associated pointer\n \\returns the previous value associated with `name`.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowData"]
    pub fn SDL_SetWindowData(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Retrieve the data pointer associated with a window.\n\n \\param window the window to query\n \\param name the name of the pointer\n \\returns the value associated with `name`.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowData"]
    pub fn SDL_GetWindowData(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Set the position of a window.\n\n \\param window the window to reposition\n \\param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n          `SDL_WINDOWPOS_UNDEFINED`\n \\param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or\n          `SDL_WINDOWPOS_UNDEFINED`\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowPosition"]
    pub fn SDL_SetWindowPosition(
        window: *mut SDL_Window,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the position of a window.\n\n If you do not need the value for one of the positions a NULL may be passed\n in the `x` or `y` parameter.\n\n \\param window the window to query\n \\param x a pointer filled in with the x position of the window, may be NULL\n \\param y a pointer filled in with the y position of the window, may be NULL\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowPosition"]
    pub fn SDL_GetWindowPosition(
        window: *mut SDL_Window,
        x: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the size of a window's client area.\n\n This only affects the size of the window when not in fullscreen mode. To\n change the fullscreen mode of a window, use SDL_SetWindowFullscreenMode()\n\n \\param window the window to change\n \\param w the width of the window, must be > 0\n \\param h the height of the window, must be > 0\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSize\n \\sa SDL_SetWindowFullscreenMode"]
    pub fn SDL_SetWindowSize(
        window: *mut SDL_Window,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the size of a window's client area.\n\n NULL can safely be passed as the `w` or `h` parameter if the width or\n height value is not desired.\n\n The window pixel size may differ from its window coordinate size if the\n window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()\n or SDL_GetRenderOutputSize() to get the real client area size in pixels.\n\n \\param window the window to query the width and height from\n \\param w a pointer filled in with the width of the window, may be NULL\n \\param h a pointer filled in with the height of the window, may be NULL\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderOutputSize\n \\sa SDL_GetWindowSizeInPixels\n \\sa SDL_SetWindowSize"]
    pub fn SDL_GetWindowSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the size of a window's borders (decorations) around the client area.\n\n Note: If this function fails (returns -1), the size values will be\n initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the\n window in question was borderless.\n\n Note: This function may fail on systems where the window has not yet been\n decorated by the display server (for example, immediately after calling\n SDL_CreateWindow). It is recommended that you wait at least until the\n window has been presented and composited, so that the window system has a\n chance to decorate the window and provide the border dimensions to SDL.\n\n This function also returns -1 if getting the information is not supported.\n\n \\param window the window to query the size values of the border\n               (decorations) from\n \\param top pointer to variable for storing the size of the top border; NULL\n            is permitted\n \\param left pointer to variable for storing the size of the left border;\n             NULL is permitted\n \\param bottom pointer to variable for storing the size of the bottom\n               border; NULL is permitted\n \\param right pointer to variable for storing the size of the right border;\n              NULL is permitted\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSize"]
    pub fn SDL_GetWindowBordersSize(
        window: *mut SDL_Window,
        top: *mut ::std::os::raw::c_int,
        left: *mut ::std::os::raw::c_int,
        bottom: *mut ::std::os::raw::c_int,
        right: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the size of a window's client area, in pixels.\n\n \\param window the window from which the drawable size should be queried\n \\param w a pointer to variable for storing the width in pixels, may be NULL\n \\param h a pointer to variable for storing the height in pixels, may be\n          NULL\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateWindow\n \\sa SDL_GetWindowSize"]
    pub fn SDL_GetWindowSizeInPixels(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the minimum size of a window's client area.\n\n \\param window the window to change\n \\param min_w the minimum width of the window, or 0 for no limit\n \\param min_h the minimum height of the window, or 0 for no limit\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMinimumSize\n \\sa SDL_SetWindowMaximumSize"]
    pub fn SDL_SetWindowMinimumSize(
        window: *mut SDL_Window,
        min_w: ::std::os::raw::c_int,
        min_h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the minimum size of a window's client area.\n\n \\param window the window to query\n \\param w a pointer filled in with the minimum width of the window, may be\n          NULL\n \\param h a pointer filled in with the minimum height of the window, may be\n          NULL\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMaximumSize\n \\sa SDL_SetWindowMinimumSize"]
    pub fn SDL_GetWindowMinimumSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the maximum size of a window's client area.\n\n \\param window the window to change\n \\param max_w the maximum width of the window, or 0 for no limit\n \\param max_h the maximum height of the window, or 0 for no limit\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMaximumSize\n \\sa SDL_SetWindowMinimumSize"]
    pub fn SDL_SetWindowMaximumSize(
        window: *mut SDL_Window,
        max_w: ::std::os::raw::c_int,
        max_h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the maximum size of a window's client area.\n\n \\param window the window to query\n \\param w a pointer filled in with the maximum width of the window, may be\n          NULL\n \\param h a pointer filled in with the maximum height of the window, may be\n          NULL\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMinimumSize\n \\sa SDL_SetWindowMaximumSize"]
    pub fn SDL_GetWindowMaximumSize(
        window: *mut SDL_Window,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the border state of a window.\n\n This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add\n or remove the border from the actual window. This is a no-op if the\n window's border already matches the requested state.\n\n You can't change the border state of a fullscreen window.\n\n \\param window the window of which to change the border state\n \\param bordered SDL_FALSE to remove border, SDL_TRUE to add border\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFlags"]
    pub fn SDL_SetWindowBordered(
        window: *mut SDL_Window,
        bordered: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the user-resizable state of a window.\n\n This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and\n allow/disallow user resizing of the window. This is a no-op if the window's\n resizable state already matches the requested state.\n\n You can't change the resizable state of a fullscreen window.\n\n \\param window the window of which to change the resizable state\n \\param resizable SDL_TRUE to allow resizing, SDL_FALSE to disallow\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFlags"]
    pub fn SDL_SetWindowResizable(
        window: *mut SDL_Window,
        resizable: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the window to always be above the others.\n\n This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This\n will bring the window to the front and keep the window above the rest.\n\n \\param window The window of which to change the always on top state\n \\param on_top SDL_TRUE to set the window always on top, SDL_FALSE to\n               disable\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFlags"]
    pub fn SDL_SetWindowAlwaysOnTop(
        window: *mut SDL_Window,
        on_top: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Show a window.\n\n \\param window the window to show\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HideWindow\n \\sa SDL_RaiseWindow"]
    pub fn SDL_ShowWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Hide a window.\n\n \\param window the window to hide\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ShowWindow"]
    pub fn SDL_HideWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Raise a window above other windows and set the input focus.\n\n \\param window the window to raise\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RaiseWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Make a window as large as possible.\n\n \\param window the window to maximize\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_MinimizeWindow\n \\sa SDL_RestoreWindow"]
    pub fn SDL_MaximizeWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Minimize a window to an iconic representation.\n\n \\param window the window to minimize\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_MaximizeWindow\n \\sa SDL_RestoreWindow"]
    pub fn SDL_MinimizeWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Restore the size and position of a minimized or maximized window.\n\n \\param window the window to restore\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_MaximizeWindow\n \\sa SDL_MinimizeWindow"]
    pub fn SDL_RestoreWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a window's fullscreen state.\n\n By default a window in fullscreen state uses fullscreen desktop mode, but a\n specific display mode can be set using SDL_SetWindowFullscreenMode().\n\n \\param window the window to change\n \\param fullscreen SDL_TRUE for fullscreen mode, SDL_FALSE for windowed mode\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowFullscreenMode\n \\sa SDL_SetWindowFullscreenMode"]
    pub fn SDL_SetWindowFullscreen(
        window: *mut SDL_Window,
        fullscreen: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return whether the window has a surface associated with it.\n\n \\param window the window to query\n \\returns SDL_TRUE if there is a surface associated with the window, or\n          SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSurface"]
    pub fn SDL_HasWindowSurface(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the SDL surface associated with the window.\n\n A new surface will be created with the optimal format for the window, if\n necessary. This surface will be freed when the window is destroyed. Do not\n free this surface.\n\n This surface will be invalidated if the window is resized. After resizing a\n window this function must be called again to return a valid surface.\n\n You may not combine this with 3D or the rendering API on this window.\n\n This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.\n\n \\param window the window to query\n \\returns the surface associated with the window, or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyWindowSurface\n \\sa SDL_HasWindowSurface\n \\sa SDL_UpdateWindowSurface\n \\sa SDL_UpdateWindowSurfaceRects"]
    pub fn SDL_GetWindowSurface(window: *mut SDL_Window) -> *mut SDL_Surface;
}
extern "C" {
    #[doc = " Copy the window surface to the screen.\n\n This is the function you use to reflect any changes to the surface on the\n screen.\n\n This function is equivalent to the SDL 1.2 API SDL_Flip().\n\n \\param window the window to update\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSurface\n \\sa SDL_UpdateWindowSurfaceRects"]
    pub fn SDL_UpdateWindowSurface(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Copy areas of the window surface to the screen.\n\n This is the function you use to reflect changes to portions of the surface\n on the screen.\n\n This function is equivalent to the SDL 1.2 API SDL_UpdateRects().\n\n \\param window the window to update\n \\param rects an array of SDL_Rect structures representing areas of the\n              surface to copy, in pixels\n \\param numrects the number of rectangles\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSurface\n \\sa SDL_UpdateWindowSurface"]
    pub fn SDL_UpdateWindowSurfaceRects(
        window: *mut SDL_Window,
        rects: *const SDL_Rect,
        numrects: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy the surface associated with the window.\n\n \\param window the window to update\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowSurface\n \\sa SDL_HasWindowSurface"]
    pub fn SDL_DestroyWindowSurface(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a window's input grab mode.\n\n When input is grabbed, the mouse is confined to the window. This function\n will also grab the keyboard if `SDL_HINT_GRAB_KEYBOARD` is set. To grab the\n keyboard without also grabbing the mouse, use SDL_SetWindowKeyboardGrab().\n\n If the caller enables a grab while another window is currently grabbed, the\n other window loses its grab in favor of the caller's window.\n\n \\param window the window for which the input grab mode should be set\n \\param grabbed SDL_TRUE to grab input or SDL_FALSE to release input\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGrabbedWindow\n \\sa SDL_GetWindowGrab"]
    pub fn SDL_SetWindowGrab(window: *mut SDL_Window, grabbed: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a window's keyboard grab mode.\n\n Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or\n the Meta/Super key. Note that not all system keyboard shortcuts can be\n captured by applications (one example is Ctrl+Alt+Del on Windows).\n\n This is primarily intended for specialized applications such as VNC clients\n or VM frontends. Normal games should not use keyboard grab.\n\n When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the\n window is full-screen to ensure the user is not trapped in your\n application. If you have a custom keyboard shortcut to exit fullscreen\n mode, you may suppress this behavior with\n `SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.\n\n If the caller enables a grab while another window is currently grabbed, the\n other window loses its grab in favor of the caller's window.\n\n \\param window The window for which the keyboard grab mode should be set.\n \\param grabbed This is SDL_TRUE to grab keyboard, and SDL_FALSE to release.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowKeyboardGrab\n \\sa SDL_SetWindowMouseGrab\n \\sa SDL_SetWindowGrab"]
    pub fn SDL_SetWindowKeyboardGrab(
        window: *mut SDL_Window,
        grabbed: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set a window's mouse grab mode.\n\n Mouse grab confines the mouse cursor to the window.\n\n \\param window The window for which the mouse grab mode should be set.\n \\param grabbed This is SDL_TRUE to grab mouse, and SDL_FALSE to release.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMouseGrab\n \\sa SDL_SetWindowKeyboardGrab\n \\sa SDL_SetWindowGrab"]
    pub fn SDL_SetWindowMouseGrab(
        window: *mut SDL_Window,
        grabbed: SDL_bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a window's input grab mode.\n\n \\param window the window to query\n \\returns SDL_TRUE if input is grabbed, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowGrab"]
    pub fn SDL_GetWindowGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    #[doc = " Get a window's keyboard grab mode.\n\n \\param window the window to query\n \\returns SDL_TRUE if keyboard is grabbed, and SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowKeyboardGrab\n \\sa SDL_GetWindowGrab"]
    pub fn SDL_GetWindowKeyboardGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    #[doc = " Get a window's mouse grab mode.\n\n \\param window the window to query\n \\returns SDL_TRUE if mouse is grabbed, and SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowKeyboardGrab\n \\sa SDL_GetWindowGrab"]
    pub fn SDL_GetWindowMouseGrab(window: *mut SDL_Window) -> SDL_bool;
}
extern "C" {
    #[doc = " Get the window that currently has an input grab enabled.\n\n \\returns the window if input is grabbed or NULL otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowGrab\n \\sa SDL_SetWindowGrab"]
    pub fn SDL_GetGrabbedWindow() -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Confines the cursor to the specified area of a window.\n\n Note that this does NOT grab the cursor, it only defines the area a cursor\n is restricted to when the window has mouse focus.\n\n \\param window The window that will be associated with the barrier.\n \\param rect A rectangle area in window-relative coordinates. If NULL the\n             barrier for the specified window will be destroyed.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowMouseRect\n \\sa SDL_SetWindowMouseGrab"]
    pub fn SDL_SetWindowMouseRect(
        window: *mut SDL_Window,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the mouse confinement rectangle of a window.\n\n \\param window The window to query\n \\returns A pointer to the mouse confinement rectangle of a window, or NULL\n          if there isn't one.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowMouseRect"]
    pub fn SDL_GetWindowMouseRect(window: *mut SDL_Window) -> *const SDL_Rect;
}
extern "C" {
    #[doc = " Set the opacity for a window.\n\n The parameter `opacity` will be clamped internally between 0.0f\n (transparent) and 1.0f (opaque).\n\n This function also returns -1 if setting the opacity isn't supported.\n\n \\param window the window which will be made transparent or opaque\n \\param opacity the opacity value (0.0f - transparent, 1.0f - opaque)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetWindowOpacity"]
    pub fn SDL_SetWindowOpacity(window: *mut SDL_Window, opacity: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the opacity of a window.\n\n If transparency isn't supported on this platform, opacity will be reported\n as 1.0f without error.\n\n The parameter `opacity` is ignored if it is NULL.\n\n This function also returns -1 if an invalid window was provided.\n\n \\param window the window to get the current opacity value from\n \\param out_opacity the float filled in (0.0f - transparent, 1.0f - opaque)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetWindowOpacity"]
    pub fn SDL_GetWindowOpacity(
        window: *mut SDL_Window,
        out_opacity: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the window as a modal for another window.\n\n \\param modal_window the window that should be set modal\n \\param parent_window the parent window for the modal window\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetWindowModalFor(
        modal_window: *mut SDL_Window,
        parent_window: *mut SDL_Window,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Explicitly set input focus to the window.\n\n You almost certainly want SDL_RaiseWindow() instead of this function. Use\n this with caution, as you might give focus to a window that is completely\n obscured by other windows.\n\n \\param window the window that should get the input focus\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RaiseWindow"]
    pub fn SDL_SetWindowInputFocus(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Display the system-level window menu.\n\n This default window menu is provided by the system and on some platforms\n provides functionality for setting or changing privileged state on the\n window, such as moving it between workspaces or displays, or toggling the\n always-on-top property.\n\n On platforms or desktops where this is unsupported, this function does\n nothing.\n\n \\param window the window for which the menu will be displayed\n \\param x the x coordinate of the menu, relative to the origin (top-left) of\n          the client area\n \\param y the y coordinate of the menu, relative to the origin (top-left) of\n          the client area\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_ShowWindowSystemMenu(
        window: *mut SDL_Window,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = "< Region is normal. No special properties."]
pub const SDL_HitTestResult_SDL_HITTEST_NORMAL: SDL_HitTestResult = 0;
#[doc = "< Region can drag entire window."]
pub const SDL_HitTestResult_SDL_HITTEST_DRAGGABLE: SDL_HitTestResult = 1;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_TOPLEFT: SDL_HitTestResult = 2;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_TOP: SDL_HitTestResult = 3;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_TOPRIGHT: SDL_HitTestResult = 4;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_RIGHT: SDL_HitTestResult = 5;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_BOTTOMRIGHT: SDL_HitTestResult = 6;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_BOTTOM: SDL_HitTestResult = 7;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_BOTTOMLEFT: SDL_HitTestResult = 8;
pub const SDL_HitTestResult_SDL_HITTEST_RESIZE_LEFT: SDL_HitTestResult = 9;
#[doc = " Possible return values from the SDL_HitTest callback.\n\n \\sa SDL_HitTest"]
pub type SDL_HitTestResult = ::std::os::raw::c_uint;
#[doc = " Callback used for hit-testing.\n\n \\param win the SDL_Window where hit-testing was set on\n \\param area an SDL_Point which should be hit-tested\n \\param data what was passed as `callback_data` to SDL_SetWindowHitTest()\n \\returns an SDL_HitTestResult value.\n\n \\sa SDL_SetWindowHitTest"]
pub type SDL_HitTest = ::std::option::Option<
    unsafe extern "C" fn(
        win: *mut SDL_Window,
        area: *const SDL_Point,
        data: *mut ::std::os::raw::c_void,
    ) -> SDL_HitTestResult,
>;
extern "C" {
    #[doc = " Provide a callback that decides if a window region has special properties.\n\n Normally windows are dragged and resized by decorations provided by the\n system window manager (a title bar, borders, etc), but for some apps, it\n makes sense to drag them from somewhere else inside the window itself; for\n example, one might have a borderless window that wants to be draggable from\n any part, or simulate its own title bar, etc.\n\n This function lets the app provide a callback that designates pieces of a\n given window as special. This callback is run during event processing if we\n need to tell the OS to treat a region of the window specially; the use of\n this callback is known as \"hit testing.\"\n\n Mouse input may not be delivered to your application if it is within a\n special area; the OS will often apply that input to moving the window or\n resizing the window and not deliver it to the application.\n\n Specifying NULL for a callback disables hit-testing. Hit-testing is\n disabled by default.\n\n Platforms that don't support this functionality will return -1\n unconditionally, even if you're attempting to disable hit-testing.\n\n Your callback may fire at any time, and its firing does not indicate any\n specific behavior (for example, on Windows, this certainly might fire when\n the OS is deciding whether to drag your window, but it fires for lots of\n other reasons, too, some unrelated to anything you probably care about _and\n when the mouse isn't actually at the location it is testing_). Since this\n can fire at any time, you should try to keep your callback efficient,\n devoid of allocations, etc.\n\n \\param window the window to set hit-testing on\n \\param callback the function to call when doing a hit-test\n \\param callback_data an app-defined void pointer passed to **callback**\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetWindowHitTest(
        window: *mut SDL_Window,
        callback: SDL_HitTest,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Request a window to demand attention from the user.\n\n \\param window the window to be flashed\n \\param operation the flash operation\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_FlashWindow(
        window: *mut SDL_Window,
        operation: SDL_FlashOperation,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy a window.\n\n If `window` is NULL, this function will return immediately after setting\n the SDL error message to \"Invalid window\". See SDL_GetError().\n\n \\param window the window to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateWindow\n \\sa SDL_CreateWindowFrom"]
    pub fn SDL_DestroyWindow(window: *mut SDL_Window);
}
extern "C" {
    #[doc = " Check whether the screensaver is currently enabled.\n\n The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2\n the screensaver was enabled by default.\n\n The default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.\n\n \\returns SDL_TRUE if the screensaver is enabled, SDL_FALSE if it is\n          disabled.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DisableScreenSaver\n \\sa SDL_EnableScreenSaver"]
    pub fn SDL_ScreenSaverEnabled() -> SDL_bool;
}
extern "C" {
    #[doc = " Allow the screen to be blanked by a screen saver.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DisableScreenSaver\n \\sa SDL_ScreenSaverEnabled"]
    pub fn SDL_EnableScreenSaver() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Prevent the screen from being blanked by a screen saver.\n\n If you disable the screensaver, it is automatically re-enabled when SDL\n quits.\n\n The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2\n the screensaver was enabled by default.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_EnableScreenSaver\n \\sa SDL_ScreenSaverEnabled"]
    pub fn SDL_DisableScreenSaver() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Dynamically load an OpenGL library.\n\n This should be done after initializing the video driver, but before\n creating any OpenGL windows. If no OpenGL library is loaded, the default\n library will be loaded upon creation of the first OpenGL window.\n\n If you do this, you need to retrieve all of the GL functions used in your\n program from the dynamic library using SDL_GL_GetProcAddress().\n\n \\param path the platform dependent OpenGL library name, or NULL to open the\n             default OpenGL library\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_GetProcAddress\n \\sa SDL_GL_UnloadLibrary"]
    pub fn SDL_GL_LoadLibrary(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get an OpenGL function by name.\n\n If the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all\n GL functions must be retrieved this way. Usually this is used to retrieve\n function pointers to OpenGL extensions.\n\n There are some quirks to looking up OpenGL functions that require some\n extra care from the application. If you code carefully, you can handle\n these quirks without any platform-specific code, though:\n\n - On Windows, function pointers are specific to the current GL context;\n   this means you need to have created a GL context and made it current\n   before calling SDL_GL_GetProcAddress(). If you recreate your context or\n   create a second context, you should assume that any existing function\n   pointers aren't valid to use with it. This is (currently) a\n   Windows-specific limitation, and in practice lots of drivers don't suffer\n   this limitation, but it is still the way the wgl API is documented to\n   work and you should expect crashes if you don't respect it. Store a copy\n   of the function pointers that comes and goes with context lifespan.\n - On X11, function pointers returned by this function are valid for any\n   context, and can even be looked up before a context is created at all.\n   This means that, for at least some common OpenGL implementations, if you\n   look up a function that doesn't exist, you'll get a non-NULL result that\n   is _NOT_ safe to call. You must always make sure the function is actually\n   available for a given GL context before calling it, by checking for the\n   existence of the appropriate extension with SDL_GL_ExtensionSupported(),\n   or verifying that the version of OpenGL you're using offers the function\n   as core functionality.\n - Some OpenGL drivers, on all platforms, *will* return NULL if a function\n   isn't supported, but you can't count on this behavior. Check for\n   extensions you use, and if you get a NULL anyway, act as if that\n   extension wasn't available. This is probably a bug in the driver, but you\n   can code defensively for this scenario anyhow.\n - Just because you're on Linux/Unix, don't assume you'll be using X11.\n   Next-gen display servers are waiting to replace it, and may or may not\n   make the same promises about function pointers.\n - OpenGL function pointers must be declared `APIENTRY` as in the example\n   code. This will ensure the proper calling convention is followed on\n   platforms where this matters (Win32) thereby avoiding stack corruption.\n\n \\param proc the name of an OpenGL function\n \\returns a pointer to the named OpenGL function. The returned pointer\n          should be cast to the appropriate function signature.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_ExtensionSupported\n \\sa SDL_GL_LoadLibrary\n \\sa SDL_GL_UnloadLibrary"]
    pub fn SDL_GL_GetProcAddress(proc_: *const ::std::os::raw::c_char) -> SDL_FunctionPointer;
}
extern "C" {
    #[doc = " Get an EGL library function by name.\n\n If an EGL library is loaded, this function allows applications to get entry\n points for EGL functions. This is useful to provide to an EGL API and\n extension loader.\n\n \\param proc the name of an EGL function\n \\returns a pointer to the named EGL function. The returned pointer should\n          be cast to the appropriate function signature.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_GetCurrentEGLDisplay"]
    pub fn SDL_EGL_GetProcAddress(proc_: *const ::std::os::raw::c_char) -> SDL_FunctionPointer;
}
extern "C" {
    #[doc = " Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_LoadLibrary"]
    pub fn SDL_GL_UnloadLibrary();
}
extern "C" {
    #[doc = " Check if an OpenGL extension is supported for the current context.\n\n This function operates on the current GL context; you must have created a\n context and it must be current before calling this function. Do not assume\n that all contexts you create will have the same set of extensions\n available, or that recreating an existing context will offer the same\n extensions again.\n\n While it's probably not a massive overhead, this function is not an O(1)\n operation. Check the extensions you care about after creating the GL\n context and save that information somewhere instead of calling the function\n every time you need to know.\n\n \\param extension the name of the extension to check\n \\returns SDL_TRUE if the extension is supported, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GL_ExtensionSupported(extension: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    #[doc = " Reset all previously set OpenGL context attributes to their default values.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_GetAttribute\n \\sa SDL_GL_SetAttribute"]
    pub fn SDL_GL_ResetAttributes();
}
extern "C" {
    #[doc = " Set an OpenGL window attribute before window creation.\n\n This function sets the OpenGL attribute `attr` to `value`. The requested\n attributes should be set before creating an OpenGL window. You should use\n SDL_GL_GetAttribute() to check the values after creating the OpenGL\n context, since the values obtained can differ from the requested ones.\n\n \\param attr an SDL_GLattr enum value specifying the OpenGL attribute to set\n \\param value the desired value for the attribute\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_GetAttribute\n \\sa SDL_GL_ResetAttributes"]
    pub fn SDL_GL_SetAttribute(
        attr: SDL_GLattr,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the actual value for an attribute from the current context.\n\n \\param attr an SDL_GLattr enum value specifying the OpenGL attribute to get\n \\param value a pointer filled in with the current value of `attr`\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_ResetAttributes\n \\sa SDL_GL_SetAttribute"]
    pub fn SDL_GL_GetAttribute(
        attr: SDL_GLattr,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create an OpenGL context for an OpenGL window, and make it current.\n\n Windows users new to OpenGL should note that, for historical reasons, GL\n functions added after OpenGL version 1.1 are not available by default.\n Those functions must be loaded at run-time, either with an OpenGL\n extension-handling library or with SDL_GL_GetProcAddress() and its related\n functions.\n\n SDL_GLContext is an alias for `void *`. It's opaque to the application.\n\n \\param window the window to associate with the context\n \\returns the OpenGL context associated with `window` or NULL on error; call\n          SDL_GetError() for more details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_DeleteContext\n \\sa SDL_GL_MakeCurrent"]
    pub fn SDL_GL_CreateContext(window: *mut SDL_Window) -> SDL_GLContext;
}
extern "C" {
    #[doc = " Set up an OpenGL context for rendering into an OpenGL window.\n\n The context must have been created with a compatible window.\n\n \\param window the window to associate with the context\n \\param context the OpenGL context to associate with the window\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_CreateContext"]
    pub fn SDL_GL_MakeCurrent(
        window: *mut SDL_Window,
        context: SDL_GLContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the currently active OpenGL window.\n\n \\returns the currently active OpenGL window on success or NULL on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GL_GetCurrentWindow() -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get the currently active OpenGL context.\n\n \\returns the currently active OpenGL context or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_MakeCurrent"]
    pub fn SDL_GL_GetCurrentContext() -> SDL_GLContext;
}
extern "C" {
    #[doc = " Get the currently active EGL display.\n\n \\returns the currently active EGL display or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_EGL_GetCurrentEGLDisplay() -> SDL_EGLDisplay;
}
extern "C" {
    #[doc = " Get the currently active EGL config.\n\n \\returns the currently active EGL config or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_EGL_GetCurrentEGLConfig() -> SDL_EGLConfig;
}
extern "C" {
    #[doc = " Get the EGL surface associated with the window.\n\n \\param window the window to query\n \\returns the EGLSurface pointer associated with the window, or NULL on\n          failure.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_EGL_GetWindowEGLSurface(window: *mut SDL_Window) -> SDL_EGLSurface;
}
extern "C" {
    #[doc = " Sets the callbacks for defining custom EGLAttrib arrays for EGL\n initialization.\n\n Each callback should return a pointer to an EGL attribute array terminated\n with EGL_NONE. Callbacks may return NULL pointers to signal an error, which\n will cause the SDL_CreateWindow process to fail gracefully.\n\n The arrays returned by each callback will be appended to the existing\n attribute arrays defined by SDL.\n\n NOTE: These callback pointers will be reset after SDL_GL_ResetAttributes.\n\n \\param platformAttribCallback Callback for attributes to pass to\n                               eglGetPlatformDisplay.\n \\param surfaceAttribCallback Callback for attributes to pass to\n                              eglCreateSurface.\n \\param contextAttribCallback Callback for attributes to pass to\n                              eglCreateContext.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_EGL_SetEGLAttributeCallbacks(
        platformAttribCallback: SDL_EGLAttribArrayCallback,
        surfaceAttribCallback: SDL_EGLIntArrayCallback,
        contextAttribCallback: SDL_EGLIntArrayCallback,
    );
}
extern "C" {
    #[doc = " Set the swap interval for the current OpenGL context.\n\n Some systems allow specifying -1 for the interval, to enable adaptive\n vsync. Adaptive vsync works the same as vsync, but if you've already missed\n the vertical retrace for a given frame, it swaps buffers immediately, which\n might be less jarring for the user during occasional framerate drops. If an\n application requests adaptive vsync and the system does not support it,\n this function will fail and return -1. In such a case, you should probably\n retry the call with 1 for the interval.\n\n Adaptive vsync is implemented for some glX drivers with\n GLX_EXT_swap_control_tear, and for some Windows drivers with\n WGL_EXT_swap_control_tear.\n\n Read more on the Khronos wiki:\n https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync\n\n \\param interval 0 for immediate updates, 1 for updates synchronized with\n                 the vertical retrace, -1 for adaptive vsync\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_GetSwapInterval"]
    pub fn SDL_GL_SetSwapInterval(interval: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the swap interval for the current OpenGL context.\n\n If the system can't determine the swap interval, or there isn't a valid\n current context, this function will set *interval to 0 as a safe default.\n\n \\param interval Output interval value. 0 if there is no vertical retrace\n                 synchronization, 1 if the buffer swap is synchronized with\n                 the vertical retrace, and -1 if late swaps happen\n                 immediately instead of waiting for the next retrace\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_SetSwapInterval"]
    pub fn SDL_GL_GetSwapInterval(interval: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update a window with OpenGL rendering.\n\n This is used with double-buffered OpenGL contexts, which are the default.\n\n On macOS, make sure you bind 0 to the draw framebuffer before swapping the\n window, otherwise nothing will happen. If you aren't using\n glBindFramebuffer(), this is the default and you won't have to do anything\n extra.\n\n \\param window the window to change\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GL_SwapWindow(window: *mut SDL_Window) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Delete an OpenGL context.\n\n \\param context the OpenGL context to be deleted\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_CreateContext"]
    pub fn SDL_GL_DeleteContext(context: SDL_GLContext) -> ::std::os::raw::c_int;
}
#[doc = "  \\brief The SDL keysym structure, used in key events.\n\n  \\note  If you are looking for translated character input, see the ::SDL_EVENT_TEXT_INPUT event."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Keysym {
    #[doc = "< SDL physical key code - see ::SDL_Scancode for details"]
    pub scancode: SDL_Scancode,
    #[doc = "< SDL virtual key code - see ::SDL_Keycode for details"]
    pub sym: SDL_Keycode,
    #[doc = "< current key modifiers"]
    pub mod_: Uint16,
    pub unused: Uint32,
}
#[test]
fn bindgen_test_layout_SDL_Keysym() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Keysym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Keysym>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Keysym>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Keysym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scancode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(scancode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sym) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Keysym),
            "::",
            stringify!(unused)
        )
    );
}
extern "C" {
    #[doc = " Query the window which currently has keyboard focus.\n\n \\returns the window with keyboard focus.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetKeyboardFocus() -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get a snapshot of the current state of the keyboard.\n\n The pointer returned is a pointer to an internal SDL array. It will be\n valid for the whole lifetime of the application and should not be freed by\n the caller.\n\n A array element with a value of 1 means that the key is pressed and a value\n of 0 means that it is not. Indexes into this array are obtained by using\n SDL_Scancode values.\n\n Use SDL_PumpEvents() to update the state array.\n\n This function gives you the current state after all events have been\n processed, so if a key or button has been pressed and released before you\n process events, then the pressed state will never show up in the\n SDL_GetKeyboardState() calls.\n\n Note: This function doesn't take into account whether shift has been\n pressed or not.\n\n \\param numkeys if non-NULL, receives the length of the returned array\n \\returns a pointer to an array of key states.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PumpEvents\n \\sa SDL_ResetKeyboard"]
    pub fn SDL_GetKeyboardState(numkeys: *mut ::std::os::raw::c_int) -> *const Uint8;
}
extern "C" {
    #[doc = " Clear the state of the keyboard\n\n This function will generate key up events for all pressed keys.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyboardState"]
    pub fn SDL_ResetKeyboard();
}
extern "C" {
    #[doc = " Get the current key modifier state for the keyboard.\n\n \\returns an OR'd combination of the modifier keys for the keyboard. See\n          SDL_Keymod for details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyboardState\n \\sa SDL_SetModState"]
    pub fn SDL_GetModState() -> SDL_Keymod;
}
extern "C" {
    #[doc = " Set the current key modifier state for the keyboard.\n\n The inverse of SDL_GetModState(), SDL_SetModState() allows you to impose\n modifier key states on your application. Simply pass your desired modifier\n states into `modstate`. This value may be a bitwise, OR'd combination of\n SDL_Keymod values.\n\n This does not change the keyboard state, only the key modifier flags that\n SDL reports.\n\n \\param modstate the desired SDL_Keymod for the keyboard\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetModState"]
    pub fn SDL_SetModState(modstate: SDL_Keymod);
}
extern "C" {
    #[doc = " Get the key code corresponding to the given scancode according to the\n current keyboard layout.\n\n See SDL_Keycode for details.\n\n \\param scancode the desired SDL_Scancode to query\n \\returns the SDL_Keycode that corresponds to the given SDL_Scancode.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyName\n \\sa SDL_GetScancodeFromKey"]
    pub fn SDL_GetKeyFromScancode(scancode: SDL_Scancode) -> SDL_Keycode;
}
extern "C" {
    #[doc = " Get the scancode corresponding to the given key code according to the\n current keyboard layout.\n\n See SDL_Scancode for details.\n\n \\param key the desired SDL_Keycode to query\n \\returns the SDL_Scancode that corresponds to the given SDL_Keycode.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyFromScancode\n \\sa SDL_GetScancodeName"]
    pub fn SDL_GetScancodeFromKey(key: SDL_Keycode) -> SDL_Scancode;
}
extern "C" {
    #[doc = " Get a human-readable name for a scancode.\n\n See SDL_Scancode for details.\n\n **Warning**: The returned name is by design not stable across platforms,\n e.g. the name for `SDL_SCANCODE_LGUI` is \"Left GUI\" under Linux but \"Left\n Windows\" under Microsoft Windows, and some scancodes like\n `SDL_SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even\n scancodes that share names, e.g. `SDL_SCANCODE_RETURN` and\n `SDL_SCANCODE_RETURN2` (both called \"Return\"). This function is therefore\n unsuitable for creating a stable cross-platform two-way mapping between\n strings and scancodes.\n\n \\param scancode the desired SDL_Scancode to query\n \\returns a pointer to the name for the scancode. If the scancode doesn't\n          have a name this function returns an empty string (\"\").\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetScancodeFromKey\n \\sa SDL_GetScancodeFromName"]
    pub fn SDL_GetScancodeName(scancode: SDL_Scancode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get a scancode from a human-readable name.\n\n \\param name the human-readable scancode name\n \\returns the SDL_Scancode, or `SDL_SCANCODE_UNKNOWN` if the name wasn't\n          recognized; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyFromName\n \\sa SDL_GetScancodeFromKey\n \\sa SDL_GetScancodeName"]
    pub fn SDL_GetScancodeFromName(name: *const ::std::os::raw::c_char) -> SDL_Scancode;
}
extern "C" {
    #[doc = " Get a human-readable name for a key.\n\n See SDL_Scancode and SDL_Keycode for details.\n\n \\param key the desired SDL_Keycode to query\n \\returns a pointer to a UTF-8 string that stays valid at least until the\n          next call to this function. If you need it around any longer, you\n          must copy it. If the key doesn't have a name, this function\n          returns an empty string (\"\").\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyFromName\n \\sa SDL_GetKeyFromScancode\n \\sa SDL_GetScancodeFromKey"]
    pub fn SDL_GetKeyName(key: SDL_Keycode) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get a key code from a human-readable name.\n\n \\param name the human-readable key name\n \\returns key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetKeyFromScancode\n \\sa SDL_GetKeyName\n \\sa SDL_GetScancodeFromName"]
    pub fn SDL_GetKeyFromName(name: *const ::std::os::raw::c_char) -> SDL_Keycode;
}
extern "C" {
    #[doc = " Start accepting Unicode text input events.\n\n This function will start accepting Unicode text input events in the focused\n SDL window, and start emitting SDL_TextInputEvent (SDL_EVENT_TEXT_INPUT)\n and SDL_TextEditingEvent (SDL_EVENT_TEXT_EDITING) events. Please use this\n function in pair with SDL_StopTextInput().\n\n On some platforms using this function activates the screen keyboard.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetTextInputRect\n \\sa SDL_StopTextInput"]
    pub fn SDL_StartTextInput();
}
extern "C" {
    #[doc = " Check whether or not Unicode text input events are enabled.\n\n \\returns SDL_TRUE if text input events are enabled else SDL_FALSE.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_StartTextInput"]
    pub fn SDL_TextInputActive() -> SDL_bool;
}
extern "C" {
    #[doc = " Stop receiving any text input events.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_StartTextInput"]
    pub fn SDL_StopTextInput();
}
extern "C" {
    #[doc = " Dismiss the composition window/IME without disabling the subsystem.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_StartTextInput\n \\sa SDL_StopTextInput"]
    pub fn SDL_ClearComposition();
}
extern "C" {
    #[doc = " Returns if an IME Composite or Candidate window is currently shown.\n\n \\returns SDL_TRUE if shown, else SDL_FALSE\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_TextInputShown() -> SDL_bool;
}
extern "C" {
    #[doc = " Set the rectangle used to type Unicode text inputs.\n\n To start text input in a given location, this function is intended to be\n called before SDL_StartTextInput, although some platforms support moving\n the rectangle even while text input (and a composition) is active.\n\n Note: If you want to use the system native IME window, try setting hint\n **SDL_HINT_IME_SHOW_UI** to **1**, otherwise this function won't give you\n any feedback.\n\n \\param rect the SDL_Rect structure representing the rectangle to receive\n             text (ignored if NULL)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_StartTextInput"]
    pub fn SDL_SetTextInputRect(rect: *const SDL_Rect) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check whether the platform has screen keyboard support.\n\n \\returns SDL_TRUE if the platform has some screen keyboard support or\n          SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_StartTextInput\n \\sa SDL_ScreenKeyboardShown"]
    pub fn SDL_HasScreenKeyboardSupport() -> SDL_bool;
}
extern "C" {
    #[doc = " Check whether the screen keyboard is shown for given window.\n\n \\param window the window for which screen keyboard should be queried\n \\returns SDL_TRUE if screen keyboard is shown or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasScreenKeyboardSupport"]
    pub fn SDL_ScreenKeyboardShown(window: *mut SDL_Window) -> SDL_bool;
}
pub type SDL_MouseID = Uint32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Cursor {
    _unused: [u8; 0],
}
#[doc = "< Arrow"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_ARROW: SDL_SystemCursor = 0;
#[doc = "< I-beam"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_IBEAM: SDL_SystemCursor = 1;
#[doc = "< Wait"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_WAIT: SDL_SystemCursor = 2;
#[doc = "< Crosshair"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_CROSSHAIR: SDL_SystemCursor = 3;
#[doc = "< Small wait cursor (or Wait if not available)"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_WAITARROW: SDL_SystemCursor = 4;
#[doc = "< Double arrow pointing northwest and southeast"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_SIZENWSE: SDL_SystemCursor = 5;
#[doc = "< Double arrow pointing northeast and southwest"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_SIZENESW: SDL_SystemCursor = 6;
#[doc = "< Double arrow pointing west and east"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_SIZEWE: SDL_SystemCursor = 7;
#[doc = "< Double arrow pointing north and south"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_SIZENS: SDL_SystemCursor = 8;
#[doc = "< Four pointed arrow pointing north, south, east, and west"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_SIZEALL: SDL_SystemCursor = 9;
#[doc = "< Slashed circle or crossbones"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_NO: SDL_SystemCursor = 10;
#[doc = "< Hand"]
pub const SDL_SystemCursor_SDL_SYSTEM_CURSOR_HAND: SDL_SystemCursor = 11;
pub const SDL_SystemCursor_SDL_NUM_SYSTEM_CURSORS: SDL_SystemCursor = 12;
#[doc = " \\brief Cursor types for SDL_CreateSystemCursor()."]
pub type SDL_SystemCursor = ::std::os::raw::c_uint;
#[doc = "< The scroll direction is normal"]
pub const SDL_MouseWheelDirection_SDL_MOUSEWHEEL_NORMAL: SDL_MouseWheelDirection = 0;
#[doc = "< The scroll direction is flipped / natural"]
pub const SDL_MouseWheelDirection_SDL_MOUSEWHEEL_FLIPPED: SDL_MouseWheelDirection = 1;
#[doc = " \\brief Scroll direction types for the Scroll event"]
pub type SDL_MouseWheelDirection = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Get the window which currently has mouse focus.\n\n \\returns the window with mouse focus.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetMouseFocus() -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Retrieve the current state of the mouse.\n\n The current button state is returned as a button bitmask, which can be\n tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the\n left, 2 for middle, 3 for the right button), and `x` and `y` are set to the\n mouse cursor position relative to the focus window. You can pass NULL for\n either `x` or `y`.\n\n \\param x the x coordinate of the mouse cursor position relative to the\n          focus window\n \\param y the y coordinate of the mouse cursor position relative to the\n          focus window\n \\returns a 32-bit button bitmask of the current button state.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGlobalMouseState\n \\sa SDL_GetRelativeMouseState\n \\sa SDL_PumpEvents"]
    pub fn SDL_GetMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    #[doc = " Get the current state of the mouse in relation to the desktop.\n\n This works similarly to SDL_GetMouseState(), but the coordinates will be\n reported relative to the top-left of the desktop. This can be useful if you\n need to track the mouse outside of a specific window and SDL_CaptureMouse()\n doesn't fit your needs. For example, it could be useful if you need to\n track the mouse while dragging a window, where coordinates relative to a\n window might not be in sync at all times.\n\n Note: SDL_GetMouseState() returns the mouse position as SDL understands it\n from the last pump of the event queue. This function, however, queries the\n OS for the current mouse position, and as such, might be a slightly less\n efficient function. Unless you know what you're doing and have a good\n reason to use this function, you probably want SDL_GetMouseState() instead.\n\n \\param x filled in with the current X coord relative to the desktop; can be\n          NULL\n \\param y filled in with the current Y coord relative to the desktop; can be\n          NULL\n \\returns the current button state as a bitmask which can be tested using\n          the SDL_BUTTON(X) macros.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CaptureMouse"]
    pub fn SDL_GetGlobalMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    #[doc = " Retrieve the relative state of the mouse.\n\n The current button state is returned as a button bitmask, which can be\n tested using the `SDL_BUTTON(X)` macros (where `X` is generally 1 for the\n left, 2 for middle, 3 for the right button), and `x` and `y` are set to the\n mouse deltas since the last call to SDL_GetRelativeMouseState() or since\n event initialization. You can pass NULL for either `x` or `y`.\n\n \\param x a pointer filled with the last recorded x coordinate of the mouse\n \\param y a pointer filled with the last recorded y coordinate of the mouse\n \\returns a 32-bit button bitmask of the relative button state.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetMouseState"]
    pub fn SDL_GetRelativeMouseState(x: *mut f32, y: *mut f32) -> Uint32;
}
extern "C" {
    #[doc = " Move the mouse cursor to the given position within the window.\n\n This function generates a mouse motion event if relative mode is not\n enabled. If relative mode is enabled, you can force mouse events for the\n warp by setting the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION hint.\n\n Note that this function will appear to succeed, but not actually move the\n mouse when used over Microsoft Remote Desktop.\n\n \\param window the window to move the mouse into, or NULL for the current\n               mouse focus\n \\param x the x coordinate within the window\n \\param y the y coordinate within the window\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_WarpMouseGlobal"]
    pub fn SDL_WarpMouseInWindow(window: *mut SDL_Window, x: f32, y: f32);
}
extern "C" {
    #[doc = " Move the mouse to the given position in global screen space.\n\n This function generates a mouse motion event.\n\n A failure of this function usually means that it is unsupported by a\n platform.\n\n Note that this function will appear to succeed, but not actually move the\n mouse when used over Microsoft Remote Desktop.\n\n \\param x the x coordinate\n \\param y the y coordinate\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_WarpMouseInWindow"]
    pub fn SDL_WarpMouseGlobal(x: f32, y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set relative mouse mode.\n\n While the mouse is in relative mode, the cursor is hidden, the mouse\n position is constrained to the window, and SDL will report continuous\n relative mouse motion even if the mouse is at the edge of the window.\n\n This function will flush any pending mouse motion.\n\n \\param enabled SDL_TRUE to enable relative mode, SDL_FALSE to disable.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRelativeMouseMode"]
    pub fn SDL_SetRelativeMouseMode(enabled: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Capture the mouse and to track input outside an SDL window.\n\n Capturing enables your app to obtain mouse events globally, instead of just\n within your window. Not all video targets support this function. When\n capturing is enabled, the current window will get all mouse events, but\n unlike relative mode, no change is made to the cursor and it is not\n restrained to your window.\n\n This function may also deny mouse input to other windows--both those in\n your application and others on the system--so you should use this function\n sparingly, and in small bursts. For example, you might want to track the\n mouse while the user is dragging something, until the user releases a mouse\n button. It is not recommended that you capture the mouse for long periods\n of time, such as the entire time your app is running. For that, you should\n probably use SDL_SetRelativeMouseMode() or SDL_SetWindowGrab(), depending\n on your goals.\n\n While captured, mouse events still report coordinates relative to the\n current (foreground) window, but those coordinates may be outside the\n bounds of the window (including negative values). Capturing is only allowed\n for the foreground window. If the window loses focus while capturing, the\n capture will be disabled automatically.\n\n While capturing is enabled, the current window will have the\n `SDL_WINDOW_MOUSE_CAPTURE` flag set.\n\n Please note that as of SDL 2.0.22, SDL will attempt to \"auto capture\" the\n mouse while the user is pressing a button; this is to try and make mouse\n behavior more consistent between platforms, and deal with the common case\n of a user dragging the mouse outside of the window. This means that if you\n are calling SDL_CaptureMouse() only to deal with this situation, you no\n longer have to (although it is safe to do so). If this causes problems for\n your app, you can disable auto capture by setting the\n `SDL_HINT_MOUSE_AUTO_CAPTURE` hint to zero.\n\n \\param enabled SDL_TRUE to enable capturing, SDL_FALSE to disable.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetGlobalMouseState"]
    pub fn SDL_CaptureMouse(enabled: SDL_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether relative mouse mode is enabled.\n\n \\returns SDL_TRUE if relative mode is enabled or SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRelativeMouseMode"]
    pub fn SDL_GetRelativeMouseMode() -> SDL_bool;
}
extern "C" {
    #[doc = " Create a cursor using the specified bitmap data and mask (in MSB format).\n\n `mask` has to be in MSB (Most Significant Bit) format.\n\n The cursor width (`w`) must be a multiple of 8 bits.\n\n The cursor is created in black and white according to the following:\n\n - data=0, mask=1: white\n - data=1, mask=1: black\n - data=0, mask=0: transparent\n - data=1, mask=0: inverted color if possible, black if not.\n\n Cursors created with this function must be freed with SDL_DestroyCursor().\n\n If you want to have a color cursor, or create your cursor from an\n SDL_Surface, you should use SDL_CreateColorCursor(). Alternately, you can\n hide the cursor and draw your own as part of your game's rendering, but it\n will be bound to the framerate.\n\n Also, since SDL 2.0.0, SDL_CreateSystemCursor() is available, which\n provides twelve readily available system cursors to pick from.\n\n \\param data the color value for each pixel of the cursor\n \\param mask the mask value for each pixel of the cursor\n \\param w the width of the cursor\n \\param h the height of the cursor\n \\param hot_x the X-axis location of the upper left corner of the cursor\n              relative to the actual mouse position\n \\param hot_y the Y-axis location of the upper left corner of the cursor\n              relative to the actual mouse position\n \\returns a new cursor with the specified parameters on success or NULL on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyCursor\n \\sa SDL_SetCursor"]
    pub fn SDL_CreateCursor(
        data: *const Uint8,
        mask: *const Uint8,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        hot_x: ::std::os::raw::c_int,
        hot_y: ::std::os::raw::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    #[doc = " Create a color cursor.\n\n \\param surface an SDL_Surface structure representing the cursor image\n \\param hot_x the x position of the cursor hot spot\n \\param hot_y the y position of the cursor hot spot\n \\returns the new cursor on success or NULL on failure; call SDL_GetError()\n          for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateCursor\n \\sa SDL_DestroyCursor"]
    pub fn SDL_CreateColorCursor(
        surface: *mut SDL_Surface,
        hot_x: ::std::os::raw::c_int,
        hot_y: ::std::os::raw::c_int,
    ) -> *mut SDL_Cursor;
}
extern "C" {
    #[doc = " Create a system cursor.\n\n \\param id an SDL_SystemCursor enum value\n \\returns a cursor on success or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyCursor"]
    pub fn SDL_CreateSystemCursor(id: SDL_SystemCursor) -> *mut SDL_Cursor;
}
extern "C" {
    #[doc = " Set the active cursor.\n\n This function sets the currently active cursor to the specified one. If the\n cursor is currently visible, the change will be immediately represented on\n the display. SDL_SetCursor(NULL) can be used to force cursor redraw, if\n this is desired for any reason.\n\n \\param cursor a cursor to make active\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateCursor\n \\sa SDL_GetCursor"]
    pub fn SDL_SetCursor(cursor: *mut SDL_Cursor) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the active cursor.\n\n This function returns a pointer to the current cursor which is owned by the\n library. It is not necessary to free the cursor with SDL_DestroyCursor().\n\n \\returns the active cursor or NULL if there is no mouse.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetCursor"]
    pub fn SDL_GetCursor() -> *mut SDL_Cursor;
}
extern "C" {
    #[doc = " Get the default cursor.\n\n You do not have to call SDL_DestroyCursor() on the return value, but it is\n safe to do so.\n\n \\returns the default cursor on success or NULL on failure.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSystemCursor"]
    pub fn SDL_GetDefaultCursor() -> *mut SDL_Cursor;
}
extern "C" {
    #[doc = " Free a previously-created cursor.\n\n Use this function to free cursor resources created with SDL_CreateCursor(),\n SDL_CreateColorCursor() or SDL_CreateSystemCursor().\n\n \\param cursor the cursor to free\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateColorCursor\n \\sa SDL_CreateCursor\n \\sa SDL_CreateSystemCursor"]
    pub fn SDL_DestroyCursor(cursor: *mut SDL_Cursor);
}
extern "C" {
    #[doc = " Show the cursor.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CursorVisible\n \\sa SDL_HideCursor"]
    pub fn SDL_ShowCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Hide the cursor.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CursorVisible\n \\sa SDL_ShowCursor"]
    pub fn SDL_HideCursor() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Return whether the cursor is currently being shown.\n\n \\returns `SDL_TRUE` if the cursor is being shown, or `SDL_FALSE` if the\n          cursor is hidden.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HideCursor\n \\sa SDL_ShowCursor"]
    pub fn SDL_CursorVisible() -> SDL_bool;
}
pub type SDL_TouchID = Sint64;
pub type SDL_FingerID = Sint64;
pub const SDL_TouchDeviceType_SDL_TOUCH_DEVICE_INVALID: SDL_TouchDeviceType = -1;
pub const SDL_TouchDeviceType_SDL_TOUCH_DEVICE_DIRECT: SDL_TouchDeviceType = 0;
pub const SDL_TouchDeviceType_SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE: SDL_TouchDeviceType = 1;
pub const SDL_TouchDeviceType_SDL_TOUCH_DEVICE_INDIRECT_RELATIVE: SDL_TouchDeviceType = 2;
pub type SDL_TouchDeviceType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Finger {
    pub id: SDL_FingerID,
    pub x: f32,
    pub y: f32,
    pub pressure: f32,
}
#[test]
fn bindgen_test_layout_SDL_Finger() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Finger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Finger>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_Finger))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Finger>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Finger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Finger),
            "::",
            stringify!(pressure)
        )
    );
}
extern "C" {
    #[doc = " Get the number of registered touch devices.\n\n On some platforms SDL first sees the touch device if it was actually used.\n Therefore SDL_GetNumTouchDevices() may return 0 although devices are\n available. After using all devices at least once the number will be\n correct.\n\n This was fixed for Android in SDL 2.0.1.\n\n \\returns the number of registered touch devices.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTouchDevice"]
    pub fn SDL_GetNumTouchDevices() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the touch ID with the given index.\n\n \\param index the touch device index\n \\returns the touch ID with the given index on success or 0 if the index is\n          invalid; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumTouchDevices"]
    pub fn SDL_GetTouchDevice(index: ::std::os::raw::c_int) -> SDL_TouchID;
}
extern "C" {
    #[doc = " Get the touch device name as reported from the driver or NULL if the index\n is invalid.\n\n \\param index the touch device index\n \\returns touch device name\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetTouchName(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the type of the given touch device.\n\n \\param touchID the ID of a touch device\n \\returns touch device type\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetTouchDeviceType(touchID: SDL_TouchID) -> SDL_TouchDeviceType;
}
extern "C" {
    #[doc = " Get the number of active fingers for a given touch device.\n\n \\param touchID the ID of a touch device\n \\returns the number of active fingers for a given touch device on success\n          or a negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTouchFinger"]
    pub fn SDL_GetNumTouchFingers(touchID: SDL_TouchID) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the finger object for specified touch device ID and finger index.\n\n The returned resource is owned by SDL and should not be deallocated.\n\n \\param touchID the ID of the requested touch device\n \\param index the index of the requested finger\n \\returns a pointer to the SDL_Finger object or NULL if no object at the\n          given ID and index could be found.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetTouchFinger(
        touchID: SDL_TouchID,
        index: ::std::os::raw::c_int,
    ) -> *mut SDL_Finger;
}
#[doc = "< Unused (do not remove)"]
pub const SDL_EventType_SDL_EVENT_FIRST: SDL_EventType = 0;
#[doc = "< User-requested quit"]
pub const SDL_EventType_SDL_EVENT_QUIT: SDL_EventType = 256;
#[doc = "< The application is being terminated by the OS\nCalled on iOS in applicationWillTerminate()\nCalled on Android in onDestroy()"]
pub const SDL_EventType_SDL_EVENT_TERMINATING: SDL_EventType = 257;
#[doc = "< The application is low on memory, free memory if possible.\nCalled on iOS in applicationDidReceiveMemoryWarning()\nCalled on Android in onLowMemory()"]
pub const SDL_EventType_SDL_EVENT_LOW_MEMORY: SDL_EventType = 258;
#[doc = "< The application is about to enter the background\nCalled on iOS in applicationWillResignActive()\nCalled on Android in onPause()"]
pub const SDL_EventType_SDL_EVENT_WILL_ENTER_BACKGROUND: SDL_EventType = 259;
#[doc = "< The application did enter the background and may not get CPU for some time\nCalled on iOS in applicationDidEnterBackground()\nCalled on Android in onPause()"]
pub const SDL_EventType_SDL_EVENT_DID_ENTER_BACKGROUND: SDL_EventType = 260;
#[doc = "< The application is about to enter the foreground\nCalled on iOS in applicationWillEnterForeground()\nCalled on Android in onResume()"]
pub const SDL_EventType_SDL_EVENT_WILL_ENTER_FOREGROUND: SDL_EventType = 261;
#[doc = "< The application is now interactive\nCalled on iOS in applicationDidBecomeActive()\nCalled on Android in onResume()"]
pub const SDL_EventType_SDL_EVENT_DID_ENTER_FOREGROUND: SDL_EventType = 262;
#[doc = "< The user's locale preferences have changed."]
pub const SDL_EventType_SDL_EVENT_LOCALE_CHANGED: SDL_EventType = 263;
#[doc = "< The system theme changed"]
pub const SDL_EventType_SDL_EVENT_SYSTEM_THEME_CHANGED: SDL_EventType = 264;
#[doc = "< Display orientation has changed to data1"]
pub const SDL_EventType_SDL_EVENT_DISPLAY_ORIENTATION: SDL_EventType = 337;
#[doc = "< Display has been added to the system"]
pub const SDL_EventType_SDL_EVENT_DISPLAY_CONNECTED: SDL_EventType = 338;
#[doc = "< Display has been removed from the system"]
pub const SDL_EventType_SDL_EVENT_DISPLAY_DISCONNECTED: SDL_EventType = 339;
#[doc = "< Display has changed position"]
pub const SDL_EventType_SDL_EVENT_DISPLAY_MOVED: SDL_EventType = 340;
#[doc = "< Display has changed content scale"]
pub const SDL_EventType_SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED: SDL_EventType = 341;
pub const SDL_EventType_SDL_EVENT_DISPLAY_FIRST: SDL_EventType = 337;
pub const SDL_EventType_SDL_EVENT_DISPLAY_LAST: SDL_EventType = 341;
#[doc = "< System specific event"]
pub const SDL_EventType_SDL_EVENT_SYSWM: SDL_EventType = 513;
#[doc = "< Window has been shown"]
pub const SDL_EventType_SDL_EVENT_WINDOW_SHOWN: SDL_EventType = 514;
#[doc = "< Window has been hidden"]
pub const SDL_EventType_SDL_EVENT_WINDOW_HIDDEN: SDL_EventType = 515;
#[doc = "< Window has been exposed and should be redrawn"]
pub const SDL_EventType_SDL_EVENT_WINDOW_EXPOSED: SDL_EventType = 516;
#[doc = "< Window has been moved to data1, data2"]
pub const SDL_EventType_SDL_EVENT_WINDOW_MOVED: SDL_EventType = 517;
#[doc = "< Window has been resized to data1xdata2"]
pub const SDL_EventType_SDL_EVENT_WINDOW_RESIZED: SDL_EventType = 518;
#[doc = "< The pixel size of the window has changed to data1xdata2"]
pub const SDL_EventType_SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED: SDL_EventType = 519;
#[doc = "< Window has been minimized"]
pub const SDL_EventType_SDL_EVENT_WINDOW_MINIMIZED: SDL_EventType = 520;
#[doc = "< Window has been maximized"]
pub const SDL_EventType_SDL_EVENT_WINDOW_MAXIMIZED: SDL_EventType = 521;
#[doc = "< Window has been restored to normal size and position"]
pub const SDL_EventType_SDL_EVENT_WINDOW_RESTORED: SDL_EventType = 522;
#[doc = "< Window has gained mouse focus"]
pub const SDL_EventType_SDL_EVENT_WINDOW_MOUSE_ENTER: SDL_EventType = 523;
#[doc = "< Window has lost mouse focus"]
pub const SDL_EventType_SDL_EVENT_WINDOW_MOUSE_LEAVE: SDL_EventType = 524;
#[doc = "< Window has gained keyboard focus"]
pub const SDL_EventType_SDL_EVENT_WINDOW_FOCUS_GAINED: SDL_EventType = 525;
#[doc = "< Window has lost keyboard focus"]
pub const SDL_EventType_SDL_EVENT_WINDOW_FOCUS_LOST: SDL_EventType = 526;
#[doc = "< The window manager requests that the window be closed"]
pub const SDL_EventType_SDL_EVENT_WINDOW_CLOSE_REQUESTED: SDL_EventType = 527;
#[doc = "< Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore)"]
pub const SDL_EventType_SDL_EVENT_WINDOW_TAKE_FOCUS: SDL_EventType = 528;
#[doc = "< Window had a hit test that wasn't SDL_HITTEST_NORMAL"]
pub const SDL_EventType_SDL_EVENT_WINDOW_HIT_TEST: SDL_EventType = 529;
#[doc = "< The ICC profile of the window's display has changed"]
pub const SDL_EventType_SDL_EVENT_WINDOW_ICCPROF_CHANGED: SDL_EventType = 530;
#[doc = "< Window has been moved to display data1"]
pub const SDL_EventType_SDL_EVENT_WINDOW_DISPLAY_CHANGED: SDL_EventType = 531;
#[doc = "< Window display scale has been changed"]
pub const SDL_EventType_SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED: SDL_EventType = 532;
#[doc = "< The window has been occluded"]
pub const SDL_EventType_SDL_EVENT_WINDOW_OCCLUDED: SDL_EventType = 533;
#[doc = "< The window with the associated ID is being or has been destroyed. If this message is being handled\nin an event watcher, the window handle is still valid and can still be used to retrieve any userdata\nassociated with the window. Otherwise, the handle has already been destroyed and all resources\nassociated with it are invalid"]
pub const SDL_EventType_SDL_EVENT_WINDOW_DESTROYED: SDL_EventType = 534;
pub const SDL_EventType_SDL_EVENT_WINDOW_FIRST: SDL_EventType = 514;
pub const SDL_EventType_SDL_EVENT_WINDOW_LAST: SDL_EventType = 534;
#[doc = "< Key pressed"]
pub const SDL_EventType_SDL_EVENT_KEY_DOWN: SDL_EventType = 768;
#[doc = "< Key released"]
pub const SDL_EventType_SDL_EVENT_KEY_UP: SDL_EventType = 769;
#[doc = "< Keyboard text editing (composition)"]
pub const SDL_EventType_SDL_EVENT_TEXT_EDITING: SDL_EventType = 770;
#[doc = "< Keyboard text input"]
pub const SDL_EventType_SDL_EVENT_TEXT_INPUT: SDL_EventType = 771;
#[doc = "< Keymap changed due to a system event such as an\ninput language or keyboard layout change."]
pub const SDL_EventType_SDL_EVENT_KEYMAP_CHANGED: SDL_EventType = 772;
#[doc = "< Extended keyboard text editing (composition)"]
pub const SDL_EventType_SDL_EVENT_TEXT_EDITING_EXT: SDL_EventType = 773;
#[doc = "< Mouse moved"]
pub const SDL_EventType_SDL_EVENT_MOUSE_MOTION: SDL_EventType = 1024;
#[doc = "< Mouse button pressed"]
pub const SDL_EventType_SDL_EVENT_MOUSE_BUTTON_DOWN: SDL_EventType = 1025;
#[doc = "< Mouse button released"]
pub const SDL_EventType_SDL_EVENT_MOUSE_BUTTON_UP: SDL_EventType = 1026;
#[doc = "< Mouse wheel motion"]
pub const SDL_EventType_SDL_EVENT_MOUSE_WHEEL: SDL_EventType = 1027;
#[doc = "< Joystick axis motion"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_AXIS_MOTION: SDL_EventType = 1536;
#[doc = "< Joystick hat position change"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_HAT_MOTION: SDL_EventType = 1538;
#[doc = "< Joystick button pressed"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_BUTTON_DOWN: SDL_EventType = 1539;
#[doc = "< Joystick button released"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_BUTTON_UP: SDL_EventType = 1540;
#[doc = "< A new joystick has been inserted into the system"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_ADDED: SDL_EventType = 1541;
#[doc = "< An opened joystick has been removed"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_REMOVED: SDL_EventType = 1542;
#[doc = "< Joystick battery level change"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_BATTERY_UPDATED: SDL_EventType = 1543;
#[doc = "< Joystick update is complete"]
pub const SDL_EventType_SDL_EVENT_JOYSTICK_UPDATE_COMPLETE: SDL_EventType = 1544;
#[doc = "< Gamepad axis motion"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_AXIS_MOTION: SDL_EventType = 1616;
#[doc = "< Gamepad button pressed"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_BUTTON_DOWN: SDL_EventType = 1617;
#[doc = "< Gamepad button released"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_BUTTON_UP: SDL_EventType = 1618;
#[doc = "< A new gamepad has been inserted into the system"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_ADDED: SDL_EventType = 1619;
#[doc = "< An opened gamepad has been removed"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_REMOVED: SDL_EventType = 1620;
#[doc = "< The gamepad mapping was updated"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_REMAPPED: SDL_EventType = 1621;
#[doc = "< Gamepad touchpad was touched"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN: SDL_EventType = 1622;
#[doc = "< Gamepad touchpad finger was moved"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION: SDL_EventType = 1623;
#[doc = "< Gamepad touchpad finger was lifted"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_TOUCHPAD_UP: SDL_EventType = 1624;
#[doc = "< Gamepad sensor was updated"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_SENSOR_UPDATE: SDL_EventType = 1625;
#[doc = "< Gamepad update is complete"]
pub const SDL_EventType_SDL_EVENT_GAMEPAD_UPDATE_COMPLETE: SDL_EventType = 1626;
pub const SDL_EventType_SDL_EVENT_FINGER_DOWN: SDL_EventType = 1792;
pub const SDL_EventType_SDL_EVENT_FINGER_UP: SDL_EventType = 1793;
pub const SDL_EventType_SDL_EVENT_FINGER_MOTION: SDL_EventType = 1794;
#[doc = "< The clipboard or primary selection changed"]
pub const SDL_EventType_SDL_EVENT_CLIPBOARD_UPDATE: SDL_EventType = 2304;
#[doc = "< The system requests a file open"]
pub const SDL_EventType_SDL_EVENT_DROP_FILE: SDL_EventType = 4096;
#[doc = "< text/plain drag-and-drop event"]
pub const SDL_EventType_SDL_EVENT_DROP_TEXT: SDL_EventType = 4097;
#[doc = "< A new set of drops is beginning (NULL filename)"]
pub const SDL_EventType_SDL_EVENT_DROP_BEGIN: SDL_EventType = 4098;
#[doc = "< Current set of drops is now complete (NULL filename)"]
pub const SDL_EventType_SDL_EVENT_DROP_COMPLETE: SDL_EventType = 4099;
#[doc = "< Position while moving over the window"]
pub const SDL_EventType_SDL_EVENT_DROP_POSITION: SDL_EventType = 4100;
#[doc = "< A new audio device is available"]
pub const SDL_EventType_SDL_EVENT_AUDIO_DEVICE_ADDED: SDL_EventType = 4352;
#[doc = "< An audio device has been removed."]
pub const SDL_EventType_SDL_EVENT_AUDIO_DEVICE_REMOVED: SDL_EventType = 4353;
#[doc = "< A sensor was updated"]
pub const SDL_EventType_SDL_EVENT_SENSOR_UPDATE: SDL_EventType = 4608;
#[doc = "< The render targets have been reset and their contents need to be updated"]
pub const SDL_EventType_SDL_EVENT_RENDER_TARGETS_RESET: SDL_EventType = 8192;
#[doc = "< The device has been reset and all textures need to be recreated"]
pub const SDL_EventType_SDL_EVENT_RENDER_DEVICE_RESET: SDL_EventType = 8193;
#[doc = "< Signals the end of an event poll cycle"]
pub const SDL_EventType_SDL_EVENT_POLL_SENTINEL: SDL_EventType = 32512;
#[doc = " Events ::SDL_EVENT_USER through ::SDL_EVENT_LAST are for your use,\n  and should be allocated with SDL_RegisterEvents()"]
pub const SDL_EventType_SDL_EVENT_USER: SDL_EventType = 32768;
#[doc = "  This last event is only for bounding internal arrays"]
pub const SDL_EventType_SDL_EVENT_LAST: SDL_EventType = 65535;
#[doc = " The types of events that can be delivered."]
pub type SDL_EventType = ::std::os::raw::c_uint;
#[doc = "  \\brief Fields shared by every event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_CommonEvent {
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_CommonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_CommonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_CommonEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_CommonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_CommonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_CommonEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[doc = "  \\brief Display state change event data (event.display.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DisplayEvent {
    #[doc = "< ::SDL_DISPLAYEVENT_*"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The associated display"]
    pub displayID: SDL_DisplayID,
    #[doc = "< event dependent data"]
    pub data1: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_DisplayEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DisplayEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DisplayEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DisplayEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DisplayEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(displayID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DisplayEvent),
            "::",
            stringify!(data1)
        )
    );
}
#[doc = "  \\brief Window state change event data (event.window.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_WindowEvent {
    #[doc = "< ::SDL_WINDOWEVENT_*"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The associated window"]
    pub windowID: SDL_WindowID,
    #[doc = "< event dependent data"]
    pub data1: Sint32,
    #[doc = "< event dependent data"]
    pub data2: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_WindowEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_WindowEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowEvent),
            "::",
            stringify!(data2)
        )
    );
}
#[doc = "  \\brief Keyboard button event structure (event.key.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_KeyboardEvent {
    #[doc = "< ::SDL_EVENT_KEY_DOWN or ::SDL_EVENT_KEY_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with keyboard focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< ::SDL_PRESSED or ::SDL_RELEASED"]
    pub state: Uint8,
    #[doc = "< Non-zero if this is a key repeat"]
    pub repeat: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    #[doc = "< The key that was pressed or released"]
    pub keysym: SDL_Keysym,
}
#[test]
fn bindgen_test_layout_SDL_KeyboardEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_KeyboardEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_KeyboardEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_KeyboardEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_KeyboardEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).repeat) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(repeat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keysym) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_KeyboardEvent),
            "::",
            stringify!(keysym)
        )
    );
}
#[doc = "  \\brief Keyboard text editing event structure (event.edit.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextEditingEvent {
    #[doc = "< ::SDL_EVENT_TEXT_EDITING"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with keyboard focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The editing text"]
    pub text: [::std::os::raw::c_char; 32usize],
    #[doc = "< The start cursor of selected editing text"]
    pub start: Sint32,
    #[doc = "< The length of selected editing text"]
    pub length: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_TextEditingEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextEditingEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextEditingEvent>(),
        64usize,
        concat!("Size of: ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextEditingEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextEditingEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingEvent),
            "::",
            stringify!(length)
        )
    );
}
#[doc = "  \\brief Extended keyboard text editing event structure (event.editExt.*) when text would be\n  truncated if stored in the text buffer SDL_TextEditingEvent"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextEditingExtEvent {
    #[doc = "< ::SDL_EVENT_TEXT_EDITING_EXT"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with keyboard focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The editing text, which should be freed with SDL_free(), and will not be NULL"]
    pub text: *mut ::std::os::raw::c_char,
    #[doc = "< The start cursor of selected editing text"]
    pub start: Sint32,
    #[doc = "< The length of selected editing text"]
    pub length: Sint32,
}
#[test]
fn bindgen_test_layout_SDL_TextEditingExtEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextEditingExtEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextEditingExtEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_TextEditingExtEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextEditingExtEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextEditingExtEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextEditingExtEvent),
            "::",
            stringify!(length)
        )
    );
}
#[doc = "  \\brief Keyboard text input event structure (event.text.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TextInputEvent {
    #[doc = "< ::SDL_EVENT_TEXT_INPUT"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with keyboard focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The input text"]
    pub text: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_SDL_TextInputEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TextInputEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TextInputEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TextInputEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TextInputEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TextInputEvent),
            "::",
            stringify!(text)
        )
    );
}
#[doc = "  \\brief Mouse motion event structure (event.motion.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseMotionEvent {
    #[doc = "< ::SDL_EVENT_MOUSE_MOTION"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with mouse focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The mouse instance id, or SDL_TOUCH_MOUSEID"]
    pub which: SDL_MouseID,
    #[doc = "< The current button state"]
    pub state: Uint32,
    #[doc = "< X coordinate, relative to window"]
    pub x: f32,
    #[doc = "< Y coordinate, relative to window"]
    pub y: f32,
    #[doc = "< The relative motion in the X direction"]
    pub xrel: f32,
    #[doc = "< The relative motion in the Y direction"]
    pub yrel: f32,
}
#[test]
fn bindgen_test_layout_SDL_MouseMotionEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseMotionEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseMotionEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseMotionEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseMotionEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrel) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(xrel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yrel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseMotionEvent),
            "::",
            stringify!(yrel)
        )
    );
}
#[doc = "  \\brief Mouse button event structure (event.button.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseButtonEvent {
    #[doc = "< ::SDL_EVENT_MOUSE_BUTTON_DOWN or ::SDL_EVENT_MOUSE_BUTTON_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with mouse focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The mouse instance id, or SDL_TOUCH_MOUSEID"]
    pub which: SDL_MouseID,
    #[doc = "< The mouse button index"]
    pub button: Uint8,
    #[doc = "< ::SDL_PRESSED or ::SDL_RELEASED"]
    pub state: Uint8,
    #[doc = "< 1 for single-click, 2 for double-click, etc."]
    pub clicks: Uint8,
    pub padding: Uint8,
    #[doc = "< X coordinate, relative to window"]
    pub x: f32,
    #[doc = "< Y coordinate, relative to window"]
    pub y: f32,
}
#[test]
fn bindgen_test_layout_SDL_MouseButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseButtonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseButtonEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clicks) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(clicks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseButtonEvent),
            "::",
            stringify!(y)
        )
    );
}
#[doc = "  \\brief Mouse wheel event structure (event.wheel.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MouseWheelEvent {
    #[doc = "< ::SDL_EVENT_MOUSE_WHEEL"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The window with mouse focus, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< The mouse instance id, or SDL_TOUCH_MOUSEID"]
    pub which: SDL_MouseID,
    #[doc = "< The amount scrolled horizontally, positive to the right and negative to the left"]
    pub x: f32,
    #[doc = "< The amount scrolled vertically, positive away from the user and negative toward the user"]
    pub y: f32,
    #[doc = "< Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back"]
    pub direction: Uint32,
    #[doc = "< X coordinate, relative to window"]
    pub mouseX: f32,
    #[doc = "< Y coordinate, relative to window"]
    pub mouseY: f32,
}
#[test]
fn bindgen_test_layout_SDL_MouseWheelEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MouseWheelEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MouseWheelEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MouseWheelEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MouseWheelEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouseX) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(mouseX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mouseY) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MouseWheelEvent),
            "::",
            stringify!(mouseY)
        )
    );
}
#[doc = "  \\brief Joystick axis motion event structure (event.jaxis.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyAxisEvent {
    #[doc = "< ::SDL_EVENT_JOYSTICK_AXIS_MOTION"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The joystick axis index"]
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    #[doc = "< The axis value (range: -32768 to 32767)"]
    pub value: Sint16,
    pub padding4: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_JoyAxisEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyAxisEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyAxisEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyAxisEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyAxisEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding4) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[doc = "  \\brief Joystick hat position change event structure (event.jhat.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyHatEvent {
    #[doc = "< ::SDL_EVENT_JOYSTICK_HAT_MOTION"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The joystick hat index"]
    pub hat: Uint8,
    #[doc = "< The hat position value.\n   \\sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP\n   \\sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT\n   \\sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN\n\n   Note that zero means the POV is centered."]
    pub value: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_JoyHatEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyHatEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyHatEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyHatEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyHatEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hat) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(hat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyHatEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[doc = "  \\brief Joystick button event structure (event.jbutton.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyButtonEvent {
    #[doc = "< ::SDL_EVENT_JOYSTICK_BUTTON_DOWN or ::SDL_EVENT_JOYSTICK_BUTTON_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The joystick button index"]
    pub button: Uint8,
    #[doc = "< ::SDL_PRESSED or ::SDL_RELEASED"]
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_JoyButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyButtonEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyButtonEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[doc = "  \\brief Joystick device event structure (event.jdevice.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyDeviceEvent {
    #[doc = "< ::SDL_EVENT_JOYSTICK_ADDED or ::SDL_EVENT_JOYSTICK_REMOVED or ::SDL_EVENT_JOYSTICK_UPDATE_COMPLETE"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
}
#[test]
fn bindgen_test_layout_SDL_JoyDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyDeviceEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[doc = "  \\brief Joysick battery level change event structure (event.jbattery.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_JoyBatteryEvent {
    #[doc = "< ::SDL_EVENT_JOYSTICK_BATTERY_UPDATED"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The joystick battery level"]
    pub level: SDL_JoystickPowerLevel,
}
#[test]
fn bindgen_test_layout_SDL_JoyBatteryEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_JoyBatteryEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_JoyBatteryEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_JoyBatteryEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_JoyBatteryEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_JoyBatteryEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_JoyBatteryEvent),
            "::",
            stringify!(level)
        )
    );
}
#[doc = "  \\brief Gamepad axis motion event structure (event.gaxis.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadAxisEvent {
    #[doc = "< ::SDL_EVENT_GAMEPAD_AXIS_MOTION"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The gamepad axis (SDL_GamepadAxis)"]
    pub axis: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
    #[doc = "< The axis value (range: -32768 to 32767)"]
    pub value: Sint16,
    pub padding4: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_GamepadAxisEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadAxisEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadAxisEvent>(),
        32usize,
        concat!("Size of: ", stringify!(SDL_GamepadAxisEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadAxisEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadAxisEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).axis) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding4) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadAxisEvent),
            "::",
            stringify!(padding4)
        )
    );
}
#[doc = "  \\brief Gamepad button event structure (event.gbutton.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadButtonEvent {
    #[doc = "< ::SDL_EVENT_GAMEPAD_BUTTON_DOWN or ::SDL_EVENT_GAMEPAD_BUTTON_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The gamepad button (SDL_GamepadButton)"]
    pub button: Uint8,
    #[doc = "< ::SDL_PRESSED or ::SDL_RELEASED"]
    pub state: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_GamepadButtonEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadButtonEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadButtonEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_GamepadButtonEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadButtonEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadButtonEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadButtonEvent),
            "::",
            stringify!(padding2)
        )
    );
}
#[doc = "  \\brief Gamepad device event structure (event.gdevice.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadDeviceEvent {
    #[doc = "< ::SDL_EVENT_GAMEPAD_ADDED, ::SDL_EVENT_GAMEPAD_REMOVED, or ::SDL_EVENT_GAMEPAD_REMAPPED or ::SDL_EVENT_GAMEPAD_UPDATE_COMPLETE"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
}
#[test]
fn bindgen_test_layout_SDL_GamepadDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadDeviceEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_GamepadDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadDeviceEvent),
            "::",
            stringify!(which)
        )
    );
}
#[doc = "  \\brief Gamepad touchpad event structure (event.gtouchpad.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadTouchpadEvent {
    #[doc = "< ::SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or ::SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or ::SDL_EVENT_GAMEPAD_TOUCHPAD_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The index of the touchpad"]
    pub touchpad: Sint32,
    #[doc = "< The index of the finger on the touchpad"]
    pub finger: Sint32,
    #[doc = "< Normalized in the range 0...1 with 0 being on the left"]
    pub x: f32,
    #[doc = "< Normalized in the range 0...1 with 0 being at the top"]
    pub y: f32,
    #[doc = "< Normalized in the range 0...1"]
    pub pressure: f32,
}
#[test]
fn bindgen_test_layout_SDL_GamepadTouchpadEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadTouchpadEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadTouchpadEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_GamepadTouchpadEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadTouchpadEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadTouchpadEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchpad) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(touchpad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finger) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(finger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadTouchpadEvent),
            "::",
            stringify!(pressure)
        )
    );
}
#[doc = "  \\brief Gamepad sensor event structure (event.gsensor.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_GamepadSensorEvent {
    #[doc = "< ::SDL_EVENT_GAMEPAD_SENSOR_UPDATE"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The joystick instance id"]
    pub which: SDL_JoystickID,
    #[doc = "< The type of the sensor, one of the values of ::SDL_SensorType"]
    pub sensor: Sint32,
    #[doc = "< Up to 3 values from the sensor, as defined in SDL_sensor.h"]
    pub data: [f32; 3usize],
    #[doc = "< The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock"]
    pub sensor_timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_GamepadSensorEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_GamepadSensorEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_GamepadSensorEvent>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_GamepadSensorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_GamepadSensorEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_GamepadSensorEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_GamepadSensorEvent),
            "::",
            stringify!(sensor_timestamp)
        )
    );
}
#[doc = "  \\brief Audio device event structure (event.adevice.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_AudioDeviceEvent {
    #[doc = "< ::SDL_EVENT_AUDIO_DEVICE_ADDED, or ::SDL_EVENT_AUDIO_DEVICE_REMOVED"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< SDL_AudioDeviceID for the device being added or removed"]
    pub which: SDL_AudioDeviceID,
    #[doc = "< zero if an output device, non-zero if a capture device."]
    pub iscapture: Uint8,
    pub padding1: Uint8,
    pub padding2: Uint8,
    pub padding3: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_AudioDeviceEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_AudioDeviceEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_AudioDeviceEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_AudioDeviceEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_AudioDeviceEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iscapture) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(iscapture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_AudioDeviceEvent),
            "::",
            stringify!(padding3)
        )
    );
}
#[doc = "  \\brief Touch finger event structure (event.tfinger.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_TouchFingerEvent {
    #[doc = "< ::SDL_EVENT_FINGER_MOTION or ::SDL_EVENT_FINGER_DOWN or ::SDL_EVENT_FINGER_UP"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The touch device id"]
    pub touchId: SDL_TouchID,
    pub fingerId: SDL_FingerID,
    #[doc = "< Normalized in the range 0...1"]
    pub x: f32,
    #[doc = "< Normalized in the range 0...1"]
    pub y: f32,
    #[doc = "< Normalized in the range -1...1"]
    pub dx: f32,
    #[doc = "< Normalized in the range -1...1"]
    pub dy: f32,
    #[doc = "< Normalized in the range 0...1"]
    pub pressure: f32,
    #[doc = "< The window underneath the finger, if any"]
    pub windowID: SDL_WindowID,
}
#[test]
fn bindgen_test_layout_SDL_TouchFingerEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_TouchFingerEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_TouchFingerEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_TouchFingerEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_TouchFingerEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touchId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(touchId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fingerId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(fingerId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dy) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_TouchFingerEvent),
            "::",
            stringify!(windowID)
        )
    );
}
#[doc = "  \\brief An event used to request a file open by the system (event.drop.*)\n         This event is enabled by default, you can disable it with SDL_SetEventEnabled().\n  \\note If this event is enabled, you must free the filename in the event."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_DropEvent {
    #[doc = "< ::SDL_EVENT_DROP_BEGIN or ::SDL_EVENT_DROP_FILE or ::SDL_EVENT_DROP_TEXT or ::SDL_EVENT_DROP_COMPLETE or ::SDL_EVENT_DROP_POSITION"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The file name, which should be freed with SDL_free(), is NULL on begin/complete"]
    pub file: *mut ::std::os::raw::c_char,
    #[doc = "< The window that was dropped on, if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< X coordinate, relative to window (not on begin)"]
    pub x: f32,
    #[doc = "< Y coordinate, relative to window (not on begin)"]
    pub y: f32,
}
#[test]
fn bindgen_test_layout_SDL_DropEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_DropEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_DropEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_DropEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_DropEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_DropEvent),
            "::",
            stringify!(y)
        )
    );
}
#[doc = " \\brief An event triggered when the clipboard contents have changed (event.clipboard.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_ClipboardEvent {
    #[doc = "< ::SDL_EVENT_CLIPBOARD_UPDATE"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_ClipboardEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_ClipboardEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_ClipboardEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_ClipboardEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_ClipboardEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_ClipboardEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ClipboardEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_ClipboardEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[doc = "  \\brief Sensor event structure (event.sensor.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SensorEvent {
    #[doc = "< ::SDL_EVENT_SENSOR_UPDATE"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The instance ID of the sensor"]
    pub which: SDL_SensorID,
    #[doc = "< Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData()"]
    pub data: [f32; 6usize],
    #[doc = "< The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock"]
    pub sensor_timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_SensorEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SensorEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SensorEvent>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SensorEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SensorEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor_timestamp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SensorEvent),
            "::",
            stringify!(sensor_timestamp)
        )
    );
}
#[doc = "  \\brief The \"quit requested\" event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_QuitEvent {
    #[doc = "< ::SDL_EVENT_QUIT"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_QuitEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_QuitEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_QuitEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_QuitEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_QuitEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_QuitEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[doc = "  \\brief OS Specific event"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_OSEvent {
    #[doc = "< ::SDL_EVENT_QUIT"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
}
#[test]
fn bindgen_test_layout_SDL_OSEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_OSEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_OSEvent>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_OSEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_OSEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_OSEvent),
            "::",
            stringify!(timestamp)
        )
    );
}
#[doc = "  \\brief A user-defined event type (event.user.*)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_UserEvent {
    #[doc = "< ::SDL_EVENT_USER through ::SDL_EVENT_LAST-1"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< The associated window if any"]
    pub windowID: SDL_WindowID,
    #[doc = "< User defined event code"]
    pub code: Sint32,
    #[doc = "< User defined data pointer"]
    pub data1: *mut ::std::os::raw::c_void,
    #[doc = "< User defined data pointer"]
    pub data2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SDL_UserEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_UserEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_UserEvent>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_UserEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_UserEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(windowID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_UserEvent),
            "::",
            stringify!(data2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SysWMmsg {
    _unused: [u8; 0],
}
#[doc = "  \\brief A video driver dependent system event (event.syswm.*)\n         This event is disabled by default, you can enable it with SDL_SetEventEnabled()\n\n  \\note If you want to use this event, you should include SDL_syswm.h."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_SysWMEvent {
    #[doc = "< ::SDL_EVENT_SYSWM"]
    pub type_: Uint32,
    #[doc = "< In nanoseconds, populated using SDL_GetTicksNS()"]
    pub timestamp: Uint64,
    #[doc = "< driver dependent data, defined in SDL_syswm.h"]
    pub msg: *mut SDL_SysWMmsg,
}
#[test]
fn bindgen_test_layout_SDL_SysWMEvent() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_SysWMEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_SysWMEvent>(),
        24usize,
        concat!("Size of: ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_SysWMEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_SysWMEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_SysWMEvent),
            "::",
            stringify!(msg)
        )
    );
}
#[doc = "  \\brief General event structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_Event {
    #[doc = "< Event type, shared with all events"]
    pub type_: Uint32,
    #[doc = "< Common event data"]
    pub common: SDL_CommonEvent,
    #[doc = "< Display event data"]
    pub display: SDL_DisplayEvent,
    #[doc = "< Window event data"]
    pub window: SDL_WindowEvent,
    #[doc = "< Keyboard event data"]
    pub key: SDL_KeyboardEvent,
    #[doc = "< Text editing event data"]
    pub edit: SDL_TextEditingEvent,
    #[doc = "< Extended text editing event data"]
    pub editExt: SDL_TextEditingExtEvent,
    #[doc = "< Text input event data"]
    pub text: SDL_TextInputEvent,
    #[doc = "< Mouse motion event data"]
    pub motion: SDL_MouseMotionEvent,
    #[doc = "< Mouse button event data"]
    pub button: SDL_MouseButtonEvent,
    #[doc = "< Mouse wheel event data"]
    pub wheel: SDL_MouseWheelEvent,
    #[doc = "< Joystick axis event data"]
    pub jaxis: SDL_JoyAxisEvent,
    #[doc = "< Joystick hat event data"]
    pub jhat: SDL_JoyHatEvent,
    #[doc = "< Joystick button event data"]
    pub jbutton: SDL_JoyButtonEvent,
    #[doc = "< Joystick device change event data"]
    pub jdevice: SDL_JoyDeviceEvent,
    #[doc = "< Joystick battery event data"]
    pub jbattery: SDL_JoyBatteryEvent,
    #[doc = "< Gamepad axis event data"]
    pub gaxis: SDL_GamepadAxisEvent,
    #[doc = "< Gamepad button event data"]
    pub gbutton: SDL_GamepadButtonEvent,
    #[doc = "< Gamepad device event data"]
    pub gdevice: SDL_GamepadDeviceEvent,
    #[doc = "< Gamepad touchpad event data"]
    pub gtouchpad: SDL_GamepadTouchpadEvent,
    #[doc = "< Gamepad sensor event data"]
    pub gsensor: SDL_GamepadSensorEvent,
    #[doc = "< Audio device event data"]
    pub adevice: SDL_AudioDeviceEvent,
    #[doc = "< Sensor event data"]
    pub sensor: SDL_SensorEvent,
    #[doc = "< Quit request event data"]
    pub quit: SDL_QuitEvent,
    #[doc = "< Custom event data"]
    pub user: SDL_UserEvent,
    #[doc = "< System dependent window event data"]
    pub syswm: SDL_SysWMEvent,
    #[doc = "< Touch finger event data"]
    pub tfinger: SDL_TouchFingerEvent,
    #[doc = "< Drag and drop event data"]
    pub drop: SDL_DropEvent,
    #[doc = "< Clipboard cancelled event data"]
    pub clipboard: SDL_ClipboardEvent,
    pub padding: [Uint8; 128usize],
}
#[test]
fn bindgen_test_layout_SDL_Event() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Event>(),
        128usize,
        concat!("Size of: ", stringify!(SDL_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(common)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).editExt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(editExt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).motion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(motion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wheel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(wheel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jhat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jhat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jbutton) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jbutton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jdevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jdevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jbattery) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(jbattery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gaxis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gaxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gbutton) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gbutton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gdevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gdevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gtouchpad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gtouchpad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsensor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(gsensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(adevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sensor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(sensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(quit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syswm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(syswm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfinger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(tfinger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(drop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipboard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(clipboard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Event),
            "::",
            stringify!(padding)
        )
    );
}
extern "C" {
    #[doc = " Pump the event loop, gathering events from the input devices.\n\n This function updates the event queue and internal input device state.\n\n **WARNING**: This should only be run in the thread that initialized the\n video subsystem, and for extra safety, you should consider only doing those\n things on the main thread in any case.\n\n SDL_PumpEvents() gathers all the pending input information from devices and\n places it in the event queue. Without calls to SDL_PumpEvents() no events\n would ever be placed on the queue. Often the need for calls to\n SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and\n SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not\n polling or waiting for events (e.g. you are filtering them), then you must\n call SDL_PumpEvents() to force an event queue update.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PollEvent\n \\sa SDL_WaitEvent"]
    pub fn SDL_PumpEvents();
}
pub const SDL_eventaction_SDL_ADDEVENT: SDL_eventaction = 0;
pub const SDL_eventaction_SDL_PEEKEVENT: SDL_eventaction = 1;
pub const SDL_eventaction_SDL_GETEVENT: SDL_eventaction = 2;
pub type SDL_eventaction = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Check the event queue for messages and optionally return them.\n\n `action` may be any of the following:\n\n - `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the\n   event queue.\n - `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,\n   within the specified minimum and maximum type, will be returned to the\n   caller and will _not_ be removed from the queue.\n - `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,\n   within the specified minimum and maximum type, will be returned to the\n   caller and will be removed from the queue.\n\n You may have to call SDL_PumpEvents() before calling this function.\n Otherwise, the events may not be ready to be filtered when you call\n SDL_PeepEvents().\n\n This function is thread-safe.\n\n \\param events destination buffer for the retrieved events\n \\param numevents if action is SDL_ADDEVENT, the number of events to add\n                  back to the event queue; if action is SDL_PEEKEVENT or\n                  SDL_GETEVENT, the maximum number of events to retrieve\n \\param action action to take; see [[#action|Remarks]] for details\n \\param minType minimum value of the event type to be considered;\n                SDL_EVENT_FIRST is a safe choice\n \\param maxType maximum value of the event type to be considered;\n                SDL_EVENT_LAST is a safe choice\n \\returns the number of events actually stored or a negative error code on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PollEvent\n \\sa SDL_PumpEvents\n \\sa SDL_PushEvent"]
    pub fn SDL_PeepEvents(
        events: *mut SDL_Event,
        numevents: ::std::os::raw::c_int,
        action: SDL_eventaction,
        minType: Uint32,
        maxType: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check for the existence of a certain event type in the event queue.\n\n If you need to check for a range of event types, use SDL_HasEvents()\n instead.\n\n \\param type the type of event to be queried; see SDL_EventType for details\n \\returns SDL_TRUE if events matching `type` are present, or SDL_FALSE if\n          events matching `type` are not present.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasEvents"]
    pub fn SDL_HasEvent(type_: Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Check for the existence of certain event types in the event queue.\n\n If you need to check for a single event type, use SDL_HasEvent() instead.\n\n \\param minType the low end of event type to be queried, inclusive; see\n                SDL_EventType for details\n \\param maxType the high end of event type to be queried, inclusive; see\n                SDL_EventType for details\n \\returns SDL_TRUE if events with type >= `minType` and <= `maxType` are\n          present, or SDL_FALSE if not.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HasEvents"]
    pub fn SDL_HasEvents(minType: Uint32, maxType: Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Clear events of a specific type from the event queue.\n\n This will unconditionally remove any events from the queue that match\n `type`. If you need to remove a range of event types, use SDL_FlushEvents()\n instead.\n\n It's also normal to just ignore events you don't care about in your event\n loop without calling this function.\n\n This function only affects currently queued events. If you want to make\n sure that all pending OS events are flushed, you can call SDL_PumpEvents()\n on the main thread immediately before the flush call.\n\n \\param type the type of event to be cleared; see SDL_EventType for details\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_FlushEvents"]
    pub fn SDL_FlushEvent(type_: Uint32);
}
extern "C" {
    #[doc = " Clear events of a range of types from the event queue.\n\n This will unconditionally remove any events from the queue that are in the\n range of `minType` to `maxType`, inclusive. If you need to remove a single\n event type, use SDL_FlushEvent() instead.\n\n It's also normal to just ignore events you don't care about in your event\n loop without calling this function.\n\n This function only affects currently queued events. If you want to make\n sure that all pending OS events are flushed, you can call SDL_PumpEvents()\n on the main thread immediately before the flush call.\n\n \\param minType the low end of event type to be cleared, inclusive; see\n                SDL_EventType for details\n \\param maxType the high end of event type to be cleared, inclusive; see\n                SDL_EventType for details\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_FlushEvent"]
    pub fn SDL_FlushEvents(minType: Uint32, maxType: Uint32);
}
extern "C" {
    #[doc = " Poll for currently pending events.\n\n If `event` is not NULL, the next event is removed from the queue and stored\n in the SDL_Event structure pointed to by `event`. The 1 returned refers to\n this event, immediately stored in the SDL Event structure -- not an event\n to follow.\n\n If `event` is NULL, it simply returns 1 if there is an event in the queue,\n but will not remove it from the queue.\n\n As this function may implicitly call SDL_PumpEvents(), you can only call\n this function in the thread that set the video mode.\n\n SDL_PollEvent() is the favored way of receiving system events since it can\n be done from the main loop and does not suspend the main loop while waiting\n on an event to be posted.\n\n The common practice is to fully process the event queue once every frame,\n usually as a first step before updating the game's state:\n\n ```c\n while (game_is_still_running) {\n     SDL_Event event;\n     while (SDL_PollEvent(&event)) {  // poll until all events are handled!\n         // decide what to do with this event.\n     }\n\n     // update game state, draw the current frame\n }\n ```\n\n \\param event the SDL_Event structure to be filled with the next event from\n              the queue, or NULL\n \\returns 1 if there is a pending event or 0 if there are none available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetEventFilter\n \\sa SDL_PeepEvents\n \\sa SDL_PushEvent\n \\sa SDL_SetEventFilter\n \\sa SDL_WaitEvent\n \\sa SDL_WaitEventTimeout"]
    pub fn SDL_PollEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait indefinitely for the next available event.\n\n If `event` is not NULL, the next event is removed from the queue and stored\n in the SDL_Event structure pointed to by `event`.\n\n As this function may implicitly call SDL_PumpEvents(), you can only call\n this function in the thread that initialized the video subsystem.\n\n \\param event the SDL_Event structure to be filled in with the next event\n              from the queue, or NULL\n \\returns 1 on success or 0 if there was an error while waiting for events;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PollEvent\n \\sa SDL_PumpEvents\n \\sa SDL_WaitEventTimeout"]
    pub fn SDL_WaitEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Wait until the specified timeout (in milliseconds) for the next available\n event.\n\n If `event` is not NULL, the next event is removed from the queue and stored\n in the SDL_Event structure pointed to by `event`.\n\n As this function may implicitly call SDL_PumpEvents(), you can only call\n this function in the thread that initialized the video subsystem.\n\n The timeout is not guaranteed, the actual wait time could be longer due to\n system scheduling.\n\n \\param event the SDL_Event structure to be filled in with the next event\n              from the queue, or NULL\n \\param timeoutMS the maximum number of milliseconds to wait for the next\n                  available event\n \\returns 1 on success or 0 if there was an error while waiting for events;\n          call SDL_GetError() for more information. This also returns 0 if\n          the timeout elapsed without an event arriving.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PollEvent\n \\sa SDL_PumpEvents\n \\sa SDL_WaitEvent"]
    pub fn SDL_WaitEventTimeout(event: *mut SDL_Event, timeoutMS: Sint32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add an event to the event queue.\n\n The event queue can actually be used as a two way communication channel.\n Not only can events be read from the queue, but the user can also push\n their own events onto it. `event` is a pointer to the event structure you\n wish to push onto the queue. The event is copied into the queue, and the\n caller may dispose of the memory pointed to after SDL_PushEvent() returns.\n\n Note: Pushing device input events onto the queue doesn't modify the state\n of the device within SDL.\n\n This function is thread-safe, and can be called from other threads safely.\n\n Note: Events pushed onto the queue with SDL_PushEvent() get passed through\n the event filter but events added with SDL_PeepEvents() do not.\n\n For pushing application-specific events, please use SDL_RegisterEvents() to\n get an event type that does not conflict with other code that also wants\n its own custom event types.\n\n \\param event the SDL_Event to be added to the queue\n \\returns 1 on success, 0 if the event was filtered, or a negative error\n          code on failure; call SDL_GetError() for more information. A\n          common reason for error is the event queue being full.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PeepEvents\n \\sa SDL_PollEvent\n \\sa SDL_RegisterEvents"]
    pub fn SDL_PushEvent(event: *mut SDL_Event) -> ::std::os::raw::c_int;
}
#[doc = " A function pointer used for callbacks that watch the event queue.\n\n \\param userdata what was passed as `userdata` to SDL_SetEventFilter()\n        or SDL_AddEventWatch, etc\n \\param event the event that triggered the callback\n \\returns 1 to permit event to be added to the queue, and 0 to disallow\n          it. When used with SDL_AddEventWatch, the return value is ignored.\n\n \\sa SDL_SetEventFilter\n \\sa SDL_AddEventWatch"]
pub type SDL_EventFilter = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        event: *mut SDL_Event,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " Set up a filter to process all events before they change internal state and\n are posted to the internal event queue.\n\n If the filter function returns 1 when called, then the event will be added\n to the internal queue. If it returns 0, then the event will be dropped from\n the queue, but the internal state will still be updated. This allows\n selective filtering of dynamically arriving events.\n\n **WARNING**: Be very careful of what you do in the event filter function,\n as it may run in a different thread!\n\n On platforms that support it, if the quit event is generated by an\n interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the\n application at the next event poll.\n\n There is one caveat when dealing with the ::SDL_QuitEvent event type. The\n event filter is only called when the window manager desires to close the\n application window. If the event filter returns 1, then the window will be\n closed, otherwise the window will remain open if possible.\n\n Note: Disabled events never make it to the event filter function; see\n SDL_SetEventEnabled().\n\n Note: If you just want to inspect events without filtering, you should use\n SDL_AddEventWatch() instead.\n\n Note: Events pushed onto the queue with SDL_PushEvent() get passed through\n the event filter, but events pushed onto the queue with SDL_PeepEvents() do\n not.\n\n \\param filter An SDL_EventFilter function to call when an event happens\n \\param userdata a pointer that is passed to `filter`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddEventWatch\n \\sa SDL_SetEventEnabled\n \\sa SDL_GetEventFilter\n \\sa SDL_PeepEvents\n \\sa SDL_PushEvent"]
    pub fn SDL_SetEventFilter(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Query the current event filter.\n\n This function can be used to \"chain\" filters, by saving the existing filter\n before replacing it with a function that will call that saved filter.\n\n \\param filter the current callback function will be stored here\n \\param userdata the pointer that is passed to the current event filter will\n                 be stored here\n \\returns SDL_TRUE on success or SDL_FALSE if there is no event filter set.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetEventFilter"]
    pub fn SDL_GetEventFilter(
        filter: *mut SDL_EventFilter,
        userdata: *mut *mut ::std::os::raw::c_void,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Add a callback to be triggered when an event is added to the event queue.\n\n `filter` will be called when an event happens, and its return value is\n ignored.\n\n **WARNING**: Be very careful of what you do in the event filter function,\n as it may run in a different thread!\n\n If the quit event is generated by a signal (e.g. SIGINT), it will bypass\n the internal queue and be delivered to the watch callback immediately, and\n arrive at the next event poll.\n\n Note: the callback is called for events posted by the user through\n SDL_PushEvent(), but not for disabled events, nor for events by a filter\n callback set with SDL_SetEventFilter(), nor for events posted by the user\n through SDL_PeepEvents().\n\n \\param filter an SDL_EventFilter function to call when an event happens.\n \\param userdata a pointer that is passed to `filter`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DelEventWatch\n \\sa SDL_SetEventFilter"]
    pub fn SDL_AddEventWatch(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Remove an event watch callback added with SDL_AddEventWatch().\n\n This function takes the same input as SDL_AddEventWatch() to identify and\n delete the corresponding callback.\n\n \\param filter the function originally passed to SDL_AddEventWatch()\n \\param userdata the pointer originally passed to SDL_AddEventWatch()\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddEventWatch"]
    pub fn SDL_DelEventWatch(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Run a specific filter function on the current event queue, removing any\n events for which the filter returns 0.\n\n See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),\n this function does not change the filter permanently, it only uses the\n supplied filter until this function returns.\n\n \\param filter the SDL_EventFilter function to call when an event happens\n \\param userdata a pointer that is passed to `filter`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetEventFilter\n \\sa SDL_SetEventFilter"]
    pub fn SDL_FilterEvents(filter: SDL_EventFilter, userdata: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Set the state of processing events by type.\n\n \\param type the type of event; see SDL_EventType for details\n \\param enabled whether to process the event or not\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_IsEventEnabled"]
    pub fn SDL_SetEventEnabled(type_: Uint32, enabled: SDL_bool);
}
extern "C" {
    #[doc = " Query the state of processing events by type.\n\n \\param type the type of event; see SDL_EventType for details\n \\returns SDL_TRUE if the event is being processed, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetEventEnabled"]
    pub fn SDL_EventEnabled(type_: Uint32) -> SDL_bool;
}
extern "C" {
    #[doc = " Allocate a set of user-defined events, and return the beginning event\n number for that set of events.\n\n Calling this function with `numevents` <= 0 is an error and will return\n (Uint32)-1.\n\n Note, (Uint32)-1 means the maximum unsigned 32-bit integer value (or\n 0xFFFFFFFF), but is clearer to write.\n\n \\param numevents the number of events to be allocated\n \\returns the beginning event number, or (Uint32)-1 if there are not enough\n          user-defined events left.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_PushEvent"]
    pub fn SDL_RegisterEvents(numevents: ::std::os::raw::c_int) -> Uint32;
}
extern "C" {
    #[doc = " Get the directory where the application was run from.\n\n This is not necessarily a fast call, so you should call this once near\n startup and save the string if you need it.\n\n **macOS and iOS Specific Functionality**: If the application is in a \".app\"\n bundle, this function returns the Resource directory (e.g.\n MyApp.app/Contents/Resources/). This behaviour can be overridden by adding\n a property to the Info.plist file. Adding a string key with the name\n SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the\n behaviour.\n\n Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an\n application in /Applications/SDLApp/MyApp.app):\n\n - `resource`: bundle resource directory (the default). For example:\n   `/Applications/SDLApp/MyApp.app/Contents/Resources`\n - `bundle`: the Bundle directory. For example:\n   `/Applications/SDLApp/MyApp.app/`\n - `parent`: the containing directory of the bundle. For example:\n   `/Applications/SDLApp/`\n\n **Nintendo 3DS Specific Functionality**: This function returns \"romfs\"\n directory of the application as it is uncommon to store resources outside\n the executable. As such it is not a writable directory.\n\n The returned path is guaranteed to end with a path separator ('\\' on\n Windows, '/' on most other platforms).\n\n The pointer returned is owned by the caller. Please call SDL_free() on the\n pointer when done with it.\n\n \\returns an absolute path in UTF-8 encoding to the application data\n          directory. NULL will be returned on error or when the platform\n          doesn't implement this functionality, call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPrefPath"]
    pub fn SDL_GetBasePath() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the user-and-app-specific path where files can be written.\n\n Get the \"pref dir\". This is meant to be where users can write personal\n files (preferences and save games, etc) that are specific to your\n application. This directory is unique per user, per application.\n\n This function will decide the appropriate location in the native\n filesystem, create the directory if necessary, and return a string of the\n absolute path to the directory in UTF-8 encoding.\n\n On Windows, the string might look like:\n\n `C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\`\n\n On Linux, the string might look like:\n\n `/home/bob/.local/share/My Program Name/`\n\n On macOS, the string might look like:\n\n `/Users/bob/Library/Application Support/My Program Name/`\n\n You should assume the path returned by this function is the only safe place\n to write files (and that SDL_GetBasePath(), while it might be writable, or\n even the parent of the returned path, isn't where you should be writing\n things).\n\n Both the org and app strings may become part of a directory name, so please\n follow these rules:\n\n - Try to use the same org string (_including case-sensitivity_) for all\n   your applications that use this function.\n - Always use a unique app string for each one, and make sure it never\n   changes for an app once you've decided on it.\n - Unicode characters are legal, as long as it's UTF-8 encoded, but...\n - ...only use letters, numbers, and spaces. Avoid punctuation like \"Game\n   Name 2: Bad Guy's Revenge!\" ... \"Game Name 2\" is sufficient.\n\n The returned path is guaranteed to end with a path separator ('\\' on\n Windows, '/' on most other platforms).\n\n The pointer returned is owned by the caller. Please call SDL_free() on the\n pointer when done with it.\n\n \\param org the name of your organization\n \\param app the name of your application\n \\returns a UTF-8 string of the user directory in platform-dependent\n          notation. NULL if there's a problem (creating directory failed,\n          etc.).\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetBasePath"]
    pub fn SDL_GetPrefPath(
        org: *const ::std::os::raw::c_char,
        app: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[doc = " The folder which contains all of the current user's data, preferences,\nand documents. It usually contains most of the other folders. If a\nrequested folder does not exist, the home folder can be considered a safe\nfallback to store a user's documents."]
pub const SDL_Folder_SDL_FOLDER_HOME: SDL_Folder = 0;
#[doc = " The folder of files that are displayed on the desktop. Note that the\nexistence of a desktop folder does not guarantee that the system does\nshow icons on its desktop; certain GNU/Linux distros with a graphical\nenvironment may not have desktop icons."]
pub const SDL_Folder_SDL_FOLDER_DESKTOP: SDL_Folder = 1;
#[doc = " User document files, possibly application-specific. This is a good\nplace to save a user's projects."]
pub const SDL_Folder_SDL_FOLDER_DOCUMENTS: SDL_Folder = 2;
#[doc = " Standard folder for user files downloaded from the internet."]
pub const SDL_Folder_SDL_FOLDER_DOWNLOADS: SDL_Folder = 3;
#[doc = " Music files that can be played using a standard music player (mp3,\nogg...)."]
pub const SDL_Folder_SDL_FOLDER_MUSIC: SDL_Folder = 4;
#[doc = " Image files that can be displayed using a standard viewer (png,\njpg...)."]
pub const SDL_Folder_SDL_FOLDER_PICTURES: SDL_Folder = 5;
#[doc = " Files that are meant to be shared with other users on the same\ncomputer."]
pub const SDL_Folder_SDL_FOLDER_PUBLICSHARE: SDL_Folder = 6;
#[doc = " Save files for games."]
pub const SDL_Folder_SDL_FOLDER_SAVEDGAMES: SDL_Folder = 7;
#[doc = " Application screenshots."]
pub const SDL_Folder_SDL_FOLDER_SCREENSHOTS: SDL_Folder = 8;
#[doc = " Template files to be used when the user requests the desktop environment\nto create a new file in a certain folder, such as \"New Text File.txt\".\nAny file in the Templates folder can be used as a starting point for a\nnew file."]
pub const SDL_Folder_SDL_FOLDER_TEMPLATES: SDL_Folder = 9;
#[doc = " Video files that can be played using a standard video player (mp4,\nwebm...)."]
pub const SDL_Folder_SDL_FOLDER_VIDEOS: SDL_Folder = 10;
#[doc = " The type of the OS-provided default folder for a specific purpose.\n\n Note that the Trash folder isn't included here, because trashing files usually\n involves extra OS-specific functionality to remember the file's original\n location.\n\n The folders supported per platform are:\n\n |             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |\n | ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |\n | HOME        | X       | X         |      | X          | X     | X          |\n | DESKTOP     | X       | X         |      | X          | X     |            |\n | DOCUMENTS   | X       | X         |      | X          |       |            |\n | DOWNLOADS   | Vista+  | X         |      | X          |       |            |\n | MUSIC       | X       | X         |      | X          |       |            |\n | PICTURES    | X       | X         |      | X          |       |            |\n | PUBLICSHARE |         | X         |      | X          |       |            |\n | SAVEDGAMES  | Vista+  |           |      |            |       |            |\n | SCREENSHOTS | Vista+  |           |      |            |       |            |\n | TEMPLATES   | X       | X         |      | X          |       |            |\n | VIDEOS      | X       | X*        |      | X          |       |            |\n\n * Note that on macOS/iOS, the Videos folder is called \"Movies\".\n\n \\sa SDL_GetUserFolder"]
pub type SDL_Folder = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Finds the most suitable user folder for @p purpose, and returns its path in\n OS-specific notation.\n\n Many OSes provide certain standard folders for certain purposes, such as\n storing pictures, music or videos for a certain user. This function gives\n the path for many of those special locations.\n\n This function is specifically for _user_ folders, which are meant for the\n user to access and manage. For application-specific folders, meant to hold\n data for the application to manage, see SDL_GetBasePath() and\n SDL_GetPrefPath().\n\n Note that the function is expensive, and should be called once at the\n beginning of the execution and kept for as long as needed.\n\n The returned value is owned by the caller and should be freed with\n SDL_free().\n\n If NULL is returned, the error may be obtained with SDL_GetError().\n\n \\param folder The type of folder to find\n \\returns Either a null-terminated C string containing the full path to the\n          folder, or NULL if an error happened.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Folder"]
    pub fn SDL_GetUserFolder(folder: SDL_Folder) -> *mut ::std::os::raw::c_char;
}
#[doc = "  \\typedef SDL_Haptic\n\n  \\brief The haptic structure used to identify an SDL haptic.\n\n  \\sa SDL_HapticOpen\n  \\sa SDL_HapticOpenFromJoystick\n  \\sa SDL_HapticClose"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Haptic {
    _unused: [u8; 0],
}
#[doc = "  \\brief Structure that represents a haptic direction.\n\n  This is the direction where the force comes from,\n  instead of the direction in which the force is exerted.\n\n  Directions can be specified by:\n   - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.\n   - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.\n   - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.\n\n  Cardinal directions of the haptic device are relative to the positioning\n  of the device.  North is considered to be away from the user.\n\n  The following diagram represents the cardinal directions:\n  \\verbatim\n.--.\n|__| .-------.\n|=.| |.-----.|\n|--| ||     ||\n|  | |'-----'|\n|__|~')_____('\n[ COMPUTER ]\n\n\nNorth (0,-1)\n^\n|\n|\n(-1,0)  West <----[ HAPTIC ]----> East (1,0)\n|\n|\nv\nSouth (0,1)\n\n\n[ USER ]\n\\|||/\n(o o)\n---ooO-(_)-Ooo---\n\\endverbatim\n\n  If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a\n  degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses\n  the first \\c dir parameter.  The cardinal directions would be:\n   - North: 0 (0 degrees)\n   - East: 9000 (90 degrees)\n   - South: 18000 (180 degrees)\n   - West: 27000 (270 degrees)\n\n  If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions\n  (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses\n  the first three \\c dir parameters.  The cardinal directions would be:\n   - North:  0,-1, 0\n   - East:   1, 0, 0\n   - South:  0, 1, 0\n   - West:  -1, 0, 0\n\n  The Z axis represents the height of the effect if supported, otherwise\n  it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you\n  can use any multiple you want, only the direction matters.\n\n  If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.\n  The first two \\c dir parameters are used.  The \\c dir parameters are as\n  follows (all values are in hundredths of degrees):\n   - Degrees from (1, 0) rotated towards (0, 1).\n   - Degrees towards (0, 0, 1) (device needs at least 3 axes).\n\n\n  Example of force coming from the south with all encodings (force coming\n  from the south means the user will have to pull the stick to counteract):\n  \\code\n  SDL_HapticDirection direction;\n\n  // Cartesian directions\n  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\n  direction.dir[0] = 0; // X position\n  direction.dir[1] = 1; // Y position\n  // Assuming the device has 2 axes, we don't need to specify third parameter.\n\n  // Polar directions\n  direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.\n  direction.dir[0] = 18000; // Polar only uses first parameter\n\n  // Spherical coordinates\n  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\n  direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.\n  \\endcode\n\n  \\sa SDL_HAPTIC_POLAR\n  \\sa SDL_HAPTIC_CARTESIAN\n  \\sa SDL_HAPTIC_SPHERICAL\n  \\sa SDL_HAPTIC_STEERING_AXIS\n  \\sa SDL_HapticEffect\n  \\sa SDL_HapticNumAxes"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticDirection {
    #[doc = "< The type of encoding."]
    pub type_: Uint8,
    #[doc = "< The encoded direction."]
    pub dir: [Sint32; 3usize],
}
#[test]
fn bindgen_test_layout_SDL_HapticDirection() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticDirection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticDirection>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticDirection>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticDirection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticDirection),
            "::",
            stringify!(dir)
        )
    );
}
#[doc = "  \\brief A structure containing a template for a Constant effect.\n\n  This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.\n\n  A constant effect applies a constant force in the specified direction\n  to the joystick.\n\n  \\sa SDL_HAPTIC_CONSTANT\n  \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticConstant {
    #[doc = "< ::SDL_HAPTIC_CONSTANT"]
    pub type_: Uint16,
    #[doc = "< Direction of the effect."]
    pub direction: SDL_HapticDirection,
    #[doc = "< Duration of the effect."]
    pub length: Uint32,
    #[doc = "< Delay before starting the effect."]
    pub delay: Uint16,
    #[doc = "< Button that triggers the effect."]
    pub button: Uint16,
    #[doc = "< How soon it can be triggered again after button."]
    pub interval: Uint16,
    #[doc = "< Strength of the constant effect."]
    pub level: Sint16,
    #[doc = "< Duration of the attack."]
    pub attack_length: Uint16,
    #[doc = "< Level at the start of the attack."]
    pub attack_level: Uint16,
    #[doc = "< Duration of the fade."]
    pub fade_length: Uint16,
    #[doc = "< Level at the end of the fade."]
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticConstant() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticConstant> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticConstant>(),
        40usize,
        concat!("Size of: ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticConstant>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticConstant))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticConstant),
            "::",
            stringify!(fade_level)
        )
    );
}
#[doc = "  \\brief A structure containing a template for a Periodic effect.\n\n  The struct handles the following effects:\n   - ::SDL_HAPTIC_SINE\n   - ::SDL_HAPTIC_LEFTRIGHT\n   - ::SDL_HAPTIC_TRIANGLE\n   - ::SDL_HAPTIC_SAWTOOTHUP\n   - ::SDL_HAPTIC_SAWTOOTHDOWN\n\n  A periodic effect consists in a wave-shaped effect that repeats itself\n  over time.  The type determines the shape of the wave and the parameters\n  determine the dimensions of the wave.\n\n  Phase is given by hundredth of a degree meaning that giving the phase a value\n  of 9000 will displace it 25% of its period.  Here are sample values:\n   -     0: No phase displacement.\n   -  9000: Displaced 25% of its period.\n   - 18000: Displaced 50% of its period.\n   - 27000: Displaced 75% of its period.\n   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.\n\n  Examples:\n  \\verbatim\nSDL_HAPTIC_SINE\n__      __      __      __\n/  \\    /  \\    /  \\    /\n/    \\__/    \\__/    \\__/\n\nSDL_HAPTIC_SQUARE\n__    __    __    __    __\n|  |  |  |  |  |  |  |  |  |\n|  |__|  |__|  |__|  |__|  |\n\nSDL_HAPTIC_TRIANGLE\n/\\    /\\    /\\    /\\    /\\\n/  \\  /  \\  /  \\  /  \\  /\n/    \\/    \\/    \\/    \\/\n\nSDL_HAPTIC_SAWTOOTHUP\n/|  /|  /|  /|  /|  /|  /|\n/ | / | / | / | / | / | / |\n/  |/  |/  |/  |/  |/  |/  |\n\nSDL_HAPTIC_SAWTOOTHDOWN\n\\  |\\  |\\  |\\  |\\  |\\  |\\  |\n\\ | \\ | \\ | \\ | \\ | \\ | \\ |\n\\|  \\|  \\|  \\|  \\|  \\|  \\|\n\\endverbatim\n\n  \\sa SDL_HAPTIC_SINE\n  \\sa SDL_HAPTIC_LEFTRIGHT\n  \\sa SDL_HAPTIC_TRIANGLE\n  \\sa SDL_HAPTIC_SAWTOOTHUP\n  \\sa SDL_HAPTIC_SAWTOOTHDOWN\n  \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticPeriodic {
    #[doc = "< ::SDL_HAPTIC_SINE, ::SDL_HAPTIC_LEFTRIGHT,\n::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or\n::SDL_HAPTIC_SAWTOOTHDOWN"]
    pub type_: Uint16,
    #[doc = "< Direction of the effect."]
    pub direction: SDL_HapticDirection,
    #[doc = "< Duration of the effect."]
    pub length: Uint32,
    #[doc = "< Delay before starting the effect."]
    pub delay: Uint16,
    #[doc = "< Button that triggers the effect."]
    pub button: Uint16,
    #[doc = "< How soon it can be triggered again after button."]
    pub interval: Uint16,
    #[doc = "< Period of the wave."]
    pub period: Uint16,
    #[doc = "< Peak value; if negative, equivalent to 180 degrees extra phase shift."]
    pub magnitude: Sint16,
    #[doc = "< Mean value of the wave."]
    pub offset: Sint16,
    #[doc = "< Positive phase shift given by hundredth of a degree."]
    pub phase: Uint16,
    #[doc = "< Duration of the attack."]
    pub attack_length: Uint16,
    #[doc = "< Level at the start of the attack."]
    pub attack_level: Uint16,
    #[doc = "< Duration of the fade."]
    pub fade_length: Uint16,
    #[doc = "< Level at the end of the fade."]
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticPeriodic() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticPeriodic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticPeriodic>(),
        48usize,
        concat!("Size of: ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticPeriodic>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticPeriodic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magnitude) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phase) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(phase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticPeriodic),
            "::",
            stringify!(fade_level)
        )
    );
}
#[doc = "  \\brief A structure containing a template for a Condition effect.\n\n  The struct handles the following effects:\n   - ::SDL_HAPTIC_SPRING: Effect based on axes position.\n   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.\n   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.\n   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.\n\n  Direction is handled by condition internals instead of a direction member.\n  The condition effect specific members have three parameters.  The first\n  refers to the X axis, the second refers to the Y axis and the third\n  refers to the Z axis.  The right terms refer to the positive side of the\n  axis and the left terms refer to the negative side of the axis.  Please\n  refer to the ::SDL_HapticDirection diagram for which side is positive and\n  which is negative.\n\n  \\sa SDL_HapticDirection\n  \\sa SDL_HAPTIC_SPRING\n  \\sa SDL_HAPTIC_DAMPER\n  \\sa SDL_HAPTIC_INERTIA\n  \\sa SDL_HAPTIC_FRICTION\n  \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticCondition {
    #[doc = "< ::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,\n::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION"]
    pub type_: Uint16,
    #[doc = "< Direction of the effect - Not used ATM."]
    pub direction: SDL_HapticDirection,
    #[doc = "< Duration of the effect."]
    pub length: Uint32,
    #[doc = "< Delay before starting the effect."]
    pub delay: Uint16,
    #[doc = "< Button that triggers the effect."]
    pub button: Uint16,
    #[doc = "< How soon it can be triggered again after button."]
    pub interval: Uint16,
    #[doc = "< Level when joystick is to the positive side; max 0xFFFF."]
    pub right_sat: [Uint16; 3usize],
    #[doc = "< Level when joystick is to the negative side; max 0xFFFF."]
    pub left_sat: [Uint16; 3usize],
    #[doc = "< How fast to increase the force towards the positive side."]
    pub right_coeff: [Sint16; 3usize],
    #[doc = "< How fast to increase the force towards the negative side."]
    pub left_coeff: [Sint16; 3usize],
    #[doc = "< Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered."]
    pub deadband: [Uint16; 3usize],
    #[doc = "< Position of the dead zone."]
    pub center: [Sint16; 3usize],
}
#[test]
fn bindgen_test_layout_SDL_HapticCondition() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticCondition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticCondition>(),
        68usize,
        concat!("Size of: ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticCondition>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticCondition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_sat) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_sat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_sat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_sat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_coeff) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(right_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_coeff) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(left_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deadband) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(deadband)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCondition),
            "::",
            stringify!(center)
        )
    );
}
#[doc = "  \\brief A structure containing a template for a Ramp effect.\n\n  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.\n\n  The ramp effect starts at start strength and ends at end strength.\n  It augments in linear fashion.  If you use attack and fade with a ramp\n  the effects get added to the ramp effect making the effect become\n  quadratic instead of linear.\n\n  \\sa SDL_HAPTIC_RAMP\n  \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticRamp {
    #[doc = "< ::SDL_HAPTIC_RAMP"]
    pub type_: Uint16,
    #[doc = "< Direction of the effect."]
    pub direction: SDL_HapticDirection,
    #[doc = "< Duration of the effect."]
    pub length: Uint32,
    #[doc = "< Delay before starting the effect."]
    pub delay: Uint16,
    #[doc = "< Button that triggers the effect."]
    pub button: Uint16,
    #[doc = "< How soon it can be triggered again after button."]
    pub interval: Uint16,
    #[doc = "< Beginning strength level."]
    pub start: Sint16,
    #[doc = "< Ending strength level."]
    pub end: Sint16,
    #[doc = "< Duration of the attack."]
    pub attack_length: Uint16,
    #[doc = "< Level at the start of the attack."]
    pub attack_level: Uint16,
    #[doc = "< Duration of the fade."]
    pub fade_length: Uint16,
    #[doc = "< Level at the end of the fade."]
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticRamp() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticRamp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticRamp>(),
        44usize,
        concat!("Size of: ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticRamp>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticRamp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticRamp),
            "::",
            stringify!(fade_level)
        )
    );
}
#[doc = " \\brief A structure containing a template for a Left/Right effect.\n\n This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.\n\n The Left/Right effect is used to explicitly control the large and small\n motors, commonly found in modern game controllers. The small (right) motor\n is high frequency, and the large (left) motor is low frequency.\n\n \\sa SDL_HAPTIC_LEFTRIGHT\n \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticLeftRight {
    #[doc = "< ::SDL_HAPTIC_LEFTRIGHT"]
    pub type_: Uint16,
    #[doc = "< Duration of the effect in milliseconds."]
    pub length: Uint32,
    #[doc = "< Control of the large controller motor."]
    pub large_magnitude: Uint16,
    #[doc = "< Control of the small controller motor."]
    pub small_magnitude: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticLeftRight() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticLeftRight> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticLeftRight>(),
        12usize,
        concat!("Size of: ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticLeftRight>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_HapticLeftRight))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_magnitude) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(large_magnitude)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).small_magnitude) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticLeftRight),
            "::",
            stringify!(small_magnitude)
        )
    );
}
#[doc = "  \\brief A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.\n\n  This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.\n\n  A custom force feedback effect is much like a periodic effect, where the\n  application can define its exact shape.  You will have to allocate the\n  data yourself.  Data should consist of channels * samples Uint16 samples.\n\n  If channels is one, the effect is rotated using the defined direction.\n  Otherwise it uses the samples in data for the different axes.\n\n  \\sa SDL_HAPTIC_CUSTOM\n  \\sa SDL_HapticEffect"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_HapticCustom {
    #[doc = "< ::SDL_HAPTIC_CUSTOM"]
    pub type_: Uint16,
    #[doc = "< Direction of the effect."]
    pub direction: SDL_HapticDirection,
    #[doc = "< Duration of the effect."]
    pub length: Uint32,
    #[doc = "< Delay before starting the effect."]
    pub delay: Uint16,
    #[doc = "< Button that triggers the effect."]
    pub button: Uint16,
    #[doc = "< How soon it can be triggered again after button."]
    pub interval: Uint16,
    #[doc = "< Axes to use, minimum of one."]
    pub channels: Uint8,
    #[doc = "< Sample periods."]
    pub period: Uint16,
    #[doc = "< Amount of samples."]
    pub samples: Uint16,
    #[doc = "< Should contain channels*samples items."]
    pub data: *mut Uint16,
    #[doc = "< Duration of the attack."]
    pub attack_length: Uint16,
    #[doc = "< Level at the start of the attack."]
    pub attack_level: Uint16,
    #[doc = "< Duration of the fade."]
    pub fade_length: Uint16,
    #[doc = "< Level at the end of the fade."]
    pub fade_level: Uint16,
}
#[test]
fn bindgen_test_layout_SDL_HapticCustom() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticCustom> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticCustom>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticCustom>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticCustom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).direction) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(button)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interval) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channels) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attack_level) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(attack_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_length) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fade_level) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticCustom),
            "::",
            stringify!(fade_level)
        )
    );
}
#[doc = "  \\brief The generic template for any haptic effect.\n\n  All values max at 32767 (0x7FFF).  Signed values also can be negative.\n  Time values unless specified otherwise are in milliseconds.\n\n  You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767\n  value.  Neither delay, interval, attack_length nor fade_length support\n  ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.\n\n  Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of\n  ::SDL_HAPTIC_INFINITY.\n\n  Button triggers may not be supported on all devices, it is advised to not\n  use them if possible.  Buttons start at index 1 instead of index 0 like\n  the joystick.\n\n  If both attack_length and fade_level are 0, the envelope is not used,\n  otherwise both values are used.\n\n  Common parts:\n  \\code\n  // Replay - All effects have this\n  Uint32 length;        // Duration of effect (ms).\n  Uint16 delay;         // Delay before starting effect.\n\n  // Trigger - All effects have this\n  Uint16 button;        // Button that triggers effect.\n  Uint16 interval;      // How soon before effect can be triggered again.\n\n  // Envelope - All effects except condition effects have this\n  Uint16 attack_length; // Duration of the attack (ms).\n  Uint16 attack_level;  // Level at the start of the attack.\n  Uint16 fade_length;   // Duration of the fade out (ms).\n  Uint16 fade_level;    // Level at the end of the fade.\n  \\endcode\n\n\n  Here we have an example of a constant effect evolution in time:\n  \\verbatim\nStrength\n^\n|\n|    effect level -->  _________________\n|                     /                 \\\n|                    /                   \\\n|                   /                     \\\n|                  /                       \\\n| attack_level --> |                        \\\n|                  |                        |  <---  fade_level\n|\n+--------------------------------------------------> Time\n[--]                 [---]\nattack_length        fade_length\n\n[------------------][-----------------------]\ndelay               length\n\\endverbatim\n\n  Note either the attack_level or the fade_level may be above the actual\n  effect level.\n\n  \\sa SDL_HapticConstant\n  \\sa SDL_HapticPeriodic\n  \\sa SDL_HapticCondition\n  \\sa SDL_HapticRamp\n  \\sa SDL_HapticLeftRight\n  \\sa SDL_HapticCustom"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_HapticEffect {
    #[doc = "< Effect type."]
    pub type_: Uint16,
    #[doc = "< Constant effect."]
    pub constant: SDL_HapticConstant,
    #[doc = "< Periodic effect."]
    pub periodic: SDL_HapticPeriodic,
    #[doc = "< Condition effect."]
    pub condition: SDL_HapticCondition,
    #[doc = "< Ramp effect."]
    pub ramp: SDL_HapticRamp,
    #[doc = "< Left/Right effect."]
    pub leftright: SDL_HapticLeftRight,
    #[doc = "< Custom effect."]
    pub custom: SDL_HapticCustom,
}
#[test]
fn bindgen_test_layout_SDL_HapticEffect() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_HapticEffect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_HapticEffect>(),
        72usize,
        concat!("Size of: ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_HapticEffect>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_HapticEffect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).periodic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(periodic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).condition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ramp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftright) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(leftright)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_HapticEffect),
            "::",
            stringify!(custom)
        )
    );
}
extern "C" {
    #[doc = " Count the number of haptic devices attached to the system.\n\n \\returns the number of haptic devices detected on the system or a negative\n          error code on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticName"]
    pub fn SDL_NumHaptics() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the implementation dependent name of a haptic device.\n\n This can be called before any joysticks are opened. If no name can be\n found, this function returns NULL.\n\n \\param device_index index of the device to query.\n \\returns the name of the device or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_NumHaptics"]
    pub fn SDL_HapticName(device_index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Open a haptic device for use.\n\n The index passed as an argument refers to the N'th haptic device on this\n system.\n\n When opening a haptic device, its gain will be set to maximum and\n autocenter will be disabled. To modify these values use SDL_HapticSetGain()\n and SDL_HapticSetAutocenter().\n\n \\param device_index index of the device to open\n \\returns the device identifier or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticClose\n \\sa SDL_HapticIndex\n \\sa SDL_HapticOpenFromJoystick\n \\sa SDL_HapticOpenFromMouse\n \\sa SDL_HapticPause\n \\sa SDL_HapticSetAutocenter\n \\sa SDL_HapticSetGain\n \\sa SDL_HapticStopAll"]
    pub fn SDL_HapticOpen(device_index: ::std::os::raw::c_int) -> *mut SDL_Haptic;
}
extern "C" {
    #[doc = " Check if the haptic device at the designated index has been opened.\n\n \\param device_index the index of the device to query\n \\returns 1 if it has been opened, 0 if it hasn't or on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticIndex\n \\sa SDL_HapticOpen"]
    pub fn SDL_HapticOpened(device_index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the index of a haptic device.\n\n \\param haptic the SDL_Haptic device to query\n \\returns the index of the specified haptic device or a negative error code\n          on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpen\n \\sa SDL_HapticOpened"]
    pub fn SDL_HapticIndex(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query whether or not the current mouse has haptic capabilities.\n\n \\returns SDL_TRUE if the mouse is haptic or SDL_FALSE if it isn't.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpenFromMouse"]
    pub fn SDL_MouseIsHaptic() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Try to open a haptic device from the current mouse.\n\n \\returns the haptic device identifier or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpen\n \\sa SDL_MouseIsHaptic"]
    pub fn SDL_HapticOpenFromMouse() -> *mut SDL_Haptic;
}
extern "C" {
    #[doc = " Query if a joystick has haptic features.\n\n \\param joystick the SDL_Joystick to test for haptic capabilities\n \\returns SDL_TRUE if the joystick is haptic, SDL_FALSE if it isn't, or a\n          negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpenFromJoystick"]
    pub fn SDL_JoystickIsHaptic(joystick: *mut SDL_Joystick) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Open a haptic device for use from a joystick device.\n\n You must still close the haptic device separately. It will not be closed\n with the joystick.\n\n When opened from a joystick you should first close the haptic device before\n closing the joystick device. If not, on some implementations the haptic\n device will also get unallocated and you'll be unable to use force feedback\n on that device.\n\n \\param joystick the SDL_Joystick to create a haptic device from\n \\returns a valid haptic device identifier on success or NULL on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticClose\n \\sa SDL_HapticOpen\n \\sa SDL_JoystickIsHaptic"]
    pub fn SDL_HapticOpenFromJoystick(joystick: *mut SDL_Joystick) -> *mut SDL_Haptic;
}
extern "C" {
    #[doc = " Close a haptic device previously opened with SDL_HapticOpen().\n\n \\param haptic the SDL_Haptic device to close\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpen"]
    pub fn SDL_HapticClose(haptic: *mut SDL_Haptic);
}
extern "C" {
    #[doc = " Get the number of effects a haptic device can store.\n\n On some platforms this isn't fully supported, and therefore is an\n approximation. Always check to see if your created effect was actually\n created and do not rely solely on SDL_HapticNumEffects().\n\n \\param haptic the SDL_Haptic device to query\n \\returns the number of effects the haptic device can store or a negative\n          error code on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticNumEffectsPlaying\n \\sa SDL_HapticQuery"]
    pub fn SDL_HapticNumEffects(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the number of effects a haptic device can play at the same time.\n\n This is not supported on all platforms, but will always return a value.\n\n \\param haptic the SDL_Haptic device to query maximum playing effects\n \\returns the number of effects the haptic device can play at the same time\n          or a negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticNumEffects\n \\sa SDL_HapticQuery"]
    pub fn SDL_HapticNumEffectsPlaying(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the haptic device's supported features in bitwise manner.\n\n \\param haptic the SDL_Haptic device to query\n \\returns a list of supported haptic features in bitwise manner (OR'd), or 0\n          on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticEffectSupported\n \\sa SDL_HapticNumEffects"]
    pub fn SDL_HapticQuery(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " Get the number of haptic axes the device has.\n\n The number of haptic axes might be useful if working with the\n SDL_HapticDirection effect.\n\n \\param haptic the SDL_Haptic device to query\n \\returns the number of axes on success or a negative error code on failure;\n          call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_HapticNumAxes(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check to see if an effect is supported by a haptic device.\n\n \\param haptic the SDL_Haptic device to query\n \\param effect the desired effect to query\n \\returns SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a\n          negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticNewEffect\n \\sa SDL_HapticQuery"]
    pub fn SDL_HapticEffectSupported(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a new haptic effect on a specified device.\n\n \\param haptic an SDL_Haptic device to create the effect on\n \\param effect an SDL_HapticEffect structure containing the properties of\n               the effect to create\n \\returns the ID of the effect on success or a negative error code on\n          failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticDestroyEffect\n \\sa SDL_HapticRunEffect\n \\sa SDL_HapticUpdateEffect"]
    pub fn SDL_HapticNewEffect(
        haptic: *mut SDL_Haptic,
        effect: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update the properties of an effect.\n\n Can be used dynamically, although behavior when dynamically changing\n direction may be strange. Specifically the effect may re-upload itself and\n start playing from the start. You also cannot change the type either when\n running SDL_HapticUpdateEffect().\n\n \\param haptic the SDL_Haptic device that has the effect\n \\param effect the identifier of the effect to update\n \\param data an SDL_HapticEffect structure containing the new effect\n             properties to use\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticDestroyEffect\n \\sa SDL_HapticNewEffect\n \\sa SDL_HapticRunEffect"]
    pub fn SDL_HapticUpdateEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
        data: *mut SDL_HapticEffect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Run the haptic effect on its associated haptic device.\n\n To repeat the effect over and over indefinitely, set `iterations` to\n `SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make\n one instance of the effect last indefinitely (so the effect does not fade),\n set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`\n instead.\n\n \\param haptic the SDL_Haptic device to run the effect on\n \\param effect the ID of the haptic effect to run\n \\param iterations the number of iterations to run the effect; use\n                   `SDL_HAPTIC_INFINITY` to repeat forever\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticDestroyEffect\n \\sa SDL_HapticGetEffectStatus\n \\sa SDL_HapticStopEffect"]
    pub fn SDL_HapticRunEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
        iterations: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Stop the haptic effect on its associated haptic device.\n\n *\n\n \\param haptic the SDL_Haptic device to stop the effect on\n \\param effect the ID of the haptic effect to stop\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticDestroyEffect\n \\sa SDL_HapticRunEffect"]
    pub fn SDL_HapticStopEffect(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy a haptic effect on the device.\n\n This will stop the effect if it's running. Effects are automatically\n destroyed when the device is closed.\n\n \\param haptic the SDL_Haptic device to destroy the effect on\n \\param effect the ID of the haptic effect to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticNewEffect"]
    pub fn SDL_HapticDestroyEffect(haptic: *mut SDL_Haptic, effect: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Get the status of the current effect on the specified haptic device.\n\n Device must support the SDL_HAPTIC_STATUS feature.\n\n \\param haptic the SDL_Haptic device to query for the effect status on\n \\param effect the ID of the haptic effect to query its status\n \\returns 0 if it isn't playing, 1 if it is playing, or a negative error\n          code on failure; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticRunEffect\n \\sa SDL_HapticStopEffect"]
    pub fn SDL_HapticGetEffectStatus(
        haptic: *mut SDL_Haptic,
        effect: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the global gain of the specified haptic device.\n\n Device must support the SDL_HAPTIC_GAIN feature.\n\n The user may specify the maximum gain by setting the environment variable\n `SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to\n SDL_HapticSetGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the\n maximum.\n\n \\param haptic the SDL_Haptic device to set the gain on\n \\param gain value to set the gain to, should be between 0 and 100 (0 - 100)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticQuery"]
    pub fn SDL_HapticSetGain(
        haptic: *mut SDL_Haptic,
        gain: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the global autocenter of the device.\n\n Autocenter should be between 0 and 100. Setting it to 0 will disable\n autocentering.\n\n Device must support the SDL_HAPTIC_AUTOCENTER feature.\n\n \\param haptic the SDL_Haptic device to set autocentering on\n \\param autocenter value to set autocenter to (0-100)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticQuery"]
    pub fn SDL_HapticSetAutocenter(
        haptic: *mut SDL_Haptic,
        autocenter: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Pause a haptic device.\n\n Device must support the `SDL_HAPTIC_PAUSE` feature. Call\n SDL_HapticUnpause() to resume playback.\n\n Do not modify the effects nor add new ones while the device is paused. That\n can cause all sorts of weird errors.\n\n \\param haptic the SDL_Haptic device to pause\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticUnpause"]
    pub fn SDL_HapticPause(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unpause a haptic device.\n\n Call to unpause after SDL_HapticPause().\n\n \\param haptic the SDL_Haptic device to unpause\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticPause"]
    pub fn SDL_HapticUnpause(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Stop all the currently playing effects on a haptic device.\n\n \\param haptic the SDL_Haptic device to stop\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_HapticStopAll(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check whether rumble is supported on a haptic device.\n\n \\param haptic haptic device to check for rumble support\n \\returns SDL_TRUE if effect is supported, SDL_FALSE if it isn't, or a\n          negative error code on failure; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticRumbleInit\n \\sa SDL_HapticRumblePlay\n \\sa SDL_HapticRumbleStop"]
    pub fn SDL_HapticRumbleSupported(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initialize a haptic device for simple rumble playback.\n\n \\param haptic the haptic device to initialize for simple rumble playback\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticOpen\n \\sa SDL_HapticRumblePlay\n \\sa SDL_HapticRumbleStop\n \\sa SDL_HapticRumbleSupported"]
    pub fn SDL_HapticRumbleInit(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Run a simple rumble effect on a haptic device.\n\n \\param haptic the haptic device to play the rumble effect on\n \\param strength strength of the rumble to play as a 0-1 float value\n \\param length length of the rumble to play in milliseconds\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticRumbleInit\n \\sa SDL_HapticRumbleStop\n \\sa SDL_HapticRumbleSupported"]
    pub fn SDL_HapticRumblePlay(
        haptic: *mut SDL_Haptic,
        strength: f32,
        length: Uint32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Stop the simple rumble on a haptic device.\n\n \\param haptic the haptic device to stop the rumble effect on\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_HapticRumbleInit\n \\sa SDL_HapticRumblePlay\n \\sa SDL_HapticRumbleSupported"]
    pub fn SDL_HapticRumbleStop(haptic: *mut SDL_Haptic) -> ::std::os::raw::c_int;
}
#[doc = "  \\brief  A handle representing an open HID device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_hid_device_ {
    _unused: [u8; 0],
}
pub type SDL_hid_device = SDL_hid_device_;
#[doc = " Unknown bus type"]
pub const SDL_hid_bus_type_SDL_HID_API_BUS_UNKNOWN: SDL_hid_bus_type = 0;
#[doc = " USB bus\nSpecifications:\nhttps://usb.org/hid"]
pub const SDL_hid_bus_type_SDL_HID_API_BUS_USB: SDL_hid_bus_type = 1;
#[doc = " Bluetooth or Bluetooth LE bus\nSpecifications:\nhttps://www.bluetooth.com/specifications/specs/human-interface-device-profile-1-1-1/\nhttps://www.bluetooth.com/specifications/specs/hid-service-1-0/\nhttps://www.bluetooth.com/specifications/specs/hid-over-gatt-profile-1-0/"]
pub const SDL_hid_bus_type_SDL_HID_API_BUS_BLUETOOTH: SDL_hid_bus_type = 2;
#[doc = " I2C bus\nSpecifications:\nhttps://docs.microsoft.com/previous-versions/windows/hardware/design/dn642101(v=vs.85)"]
pub const SDL_hid_bus_type_SDL_HID_API_BUS_I2C: SDL_hid_bus_type = 3;
#[doc = " SPI bus\nSpecifications:\nhttps://www.microsoft.com/download/details.aspx?id=103325"]
pub const SDL_hid_bus_type_SDL_HID_API_BUS_SPI: SDL_hid_bus_type = 4;
#[doc = "  \\brief HID underlying bus types."]
pub type SDL_hid_bus_type = ::std::os::raw::c_uint;
#[doc = " hidapi info structure */\n/**\n  \\brief  Information about a connected HID device"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_hid_device_info {
    #[doc = " Platform-specific device path"]
    pub path: *mut ::std::os::raw::c_char,
    #[doc = " Device Vendor ID"]
    pub vendor_id: ::std::os::raw::c_ushort,
    #[doc = " Device Product ID"]
    pub product_id: ::std::os::raw::c_ushort,
    #[doc = " Serial Number"]
    pub serial_number: *mut wchar_t,
    #[doc = " Device Release Number in binary-coded decimal,\nalso known as Device Version Number"]
    pub release_number: ::std::os::raw::c_ushort,
    #[doc = " Manufacturer String"]
    pub manufacturer_string: *mut wchar_t,
    #[doc = " Product string"]
    pub product_string: *mut wchar_t,
    #[doc = " Usage Page for this Device/Interface\n(Windows/Mac/hidraw only)"]
    pub usage_page: ::std::os::raw::c_ushort,
    #[doc = " Usage for this Device/Interface\n(Windows/Mac/hidraw only)"]
    pub usage: ::std::os::raw::c_ushort,
    #[doc = " The USB interface which this logical device\nrepresents.\n\nValid only if the device is a USB HID device.\nSet to -1 in all other cases."]
    pub interface_number: ::std::os::raw::c_int,
    #[doc = " Additional information about the USB interface.\nValid on libusb and Android implementations."]
    pub interface_class: ::std::os::raw::c_int,
    pub interface_subclass: ::std::os::raw::c_int,
    pub interface_protocol: ::std::os::raw::c_int,
    #[doc = " Underlying bus type"]
    pub bus_type: SDL_hid_bus_type,
    #[doc = " Pointer to the next device"]
    pub next: *mut SDL_hid_device_info,
}
#[test]
fn bindgen_test_layout_SDL_hid_device_info() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_hid_device_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_hid_device_info>(),
        80usize,
        concat!("Size of: ", stringify!(SDL_hid_device_info))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_hid_device_info>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_hid_device_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(product_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial_number) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(serial_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_number) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(release_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).manufacturer_string) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(manufacturer_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product_string) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(product_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage_page) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(usage_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_number) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_class) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_subclass) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_subclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_protocol) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(interface_protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bus_type) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(bus_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_hid_device_info),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    #[doc = " Initialize the HIDAPI library.\n\n This function initializes the HIDAPI library. Calling it is not strictly\n necessary, as it will be called automatically by SDL_hid_enumerate() and\n any of the SDL_hid_open_*() functions if it is needed. This function should\n be called at the beginning of execution however, if there is a chance of\n HIDAPI handles being opened by different threads simultaneously.\n\n Each call to this function should have a matching call to SDL_hid_exit()\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_hid_exit"]
    pub fn SDL_hid_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Finalize the HIDAPI library.\n\n This function frees all of the static data associated with HIDAPI. It\n should be called at the end of execution to avoid memory leaks.\n\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_hid_init"]
    pub fn SDL_hid_exit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Check to see if devices may have been added or removed.\n\n Enumerating the HID devices is an expensive operation, so you can call this\n to see if there have been any system device changes since the last call to\n this function. A change in the counter returned doesn't necessarily mean\n that anything has changed, but you can call SDL_hid_enumerate() to get an\n updated device list.\n\n Calling this function for the first time may cause a thread or other system\n resource to be allocated to track device change notifications.\n\n \\returns a change counter that is incremented with each potential device\n          change, or 0 if device change detection isn't available.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_hid_enumerate"]
    pub fn SDL_hid_device_change_count() -> Uint32;
}
extern "C" {
    #[doc = " Enumerate the HID Devices.\n\n This function returns a linked list of all the HID devices attached to the\n system which match vendor_id and product_id. If `vendor_id` is set to 0\n then any vendor matches. If `product_id` is set to 0 then any product\n matches. If `vendor_id` and `product_id` are both set to 0, then all HID\n devices will be returned.\n\n By default SDL will only enumerate controllers, to reduce risk of hanging\n or crashing on bad drivers, but SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\n can be set to \"0\" to enumerate all HID devices.\n\n \\param vendor_id The Vendor ID (VID) of the types of device to open, or 0\n                  to match any vendor.\n \\param product_id The Product ID (PID) of the types of device to open, or 0\n                   to match any product.\n \\returns a pointer to a linked list of type SDL_hid_device_info, containing\n          information about the HID devices attached to the system, or NULL\n          in the case of failure. Free this linked list by calling\n          SDL_hid_free_enumeration().\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_hid_device_change_count"]
    pub fn SDL_hid_enumerate(
        vendor_id: ::std::os::raw::c_ushort,
        product_id: ::std::os::raw::c_ushort,
    ) -> *mut SDL_hid_device_info;
}
extern "C" {
    #[doc = " Free an enumeration Linked List\n\n This function frees a linked list created by SDL_hid_enumerate().\n\n \\param devs Pointer to a list of struct_device returned from\n             SDL_hid_enumerate().\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_free_enumeration(devs: *mut SDL_hid_device_info);
}
extern "C" {
    #[doc = " Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally\n a serial number.\n\n If `serial_number` is NULL, the first device with the specified VID and PID\n is opened.\n\n \\param vendor_id The Vendor ID (VID) of the device to open.\n \\param product_id The Product ID (PID) of the device to open.\n \\param serial_number The Serial Number of the device to open (Optionally\n                      NULL).\n \\returns a pointer to a SDL_hid_device object on success or NULL on\n          failure.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_open(
        vendor_id: ::std::os::raw::c_ushort,
        product_id: ::std::os::raw::c_ushort,
        serial_number: *const wchar_t,
    ) -> *mut SDL_hid_device;
}
extern "C" {
    #[doc = " Open a HID device by its path name.\n\n The path name be determined by calling SDL_hid_enumerate(), or a\n platform-specific path name can be used (eg: /dev/hidraw0 on Linux).\n\n \\param path The path name of the device to open\n \\returns a pointer to a SDL_hid_device object on success or NULL on\n          failure.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_open_path(path: *const ::std::os::raw::c_char) -> *mut SDL_hid_device;
}
extern "C" {
    #[doc = " Write an Output report to a HID device.\n\n The first byte of `data` must contain the Report ID. For devices which only\n support a single report, this must be set to 0x0. The remaining bytes\n contain the report data. Since the Report ID is mandatory, calls to\n SDL_hid_write() will always contain one more byte than the report contains.\n For example, if a hid report is 16 bytes long, 17 bytes must be passed to\n SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),\n followed by the report data (16 bytes). In this example, the length passed\n in would be 17.\n\n SDL_hid_write() will send the data on the first OUT endpoint, if one\n exists. If it does not, it will send the data through the Control Endpoint\n (Endpoint 0).\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data The data to send, including the report number as the first\n             byte.\n \\param length The length in bytes of the data to send.\n \\returns the actual number of bytes written and -1 on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_write(
        dev: *mut SDL_hid_device,
        data: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Read an Input report from a HID device with timeout.\n\n Input reports are returned to the host through the INTERRUPT IN endpoint.\n The first byte will contain the Report number if the device uses numbered\n reports.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data A buffer to put the read data into.\n \\param length The number of bytes to read. For devices with multiple\n               reports, make sure to read an extra byte for the report\n               number.\n \\param milliseconds timeout in milliseconds or -1 for blocking wait.\n \\returns the actual number of bytes read and -1 on error. If no packet was\n          available to be read within the timeout period, this function\n          returns 0.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_read_timeout(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
        milliseconds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Read an Input report from a HID device.\n\n Input reports are returned to the host through the INTERRUPT IN endpoint.\n The first byte will contain the Report number if the device uses numbered\n reports.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data A buffer to put the read data into.\n \\param length The number of bytes to read. For devices with multiple\n               reports, make sure to read an extra byte for the report\n               number.\n \\returns the actual number of bytes read and -1 on error. If no packet was\n          available to be read and the handle is in non-blocking mode, this\n          function returns 0.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_read(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the device handle to be non-blocking.\n\n In non-blocking mode calls to SDL_hid_read() will return immediately with a\n value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()\n will wait (block) until there is data to read before returning.\n\n Nonblocking can be turned on and off at any time.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param nonblock enable or not the nonblocking reads - 1 to enable\n                 nonblocking - 0 to disable nonblocking.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_set_nonblocking(
        dev: *mut SDL_hid_device,
        nonblock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Send a Feature report to the device.\n\n Feature reports are sent over the Control endpoint as a Set_Report\n transfer. The first byte of `data` must contain the Report ID. For devices\n which only support a single report, this must be set to 0x0. The remaining\n bytes contain the report data. Since the Report ID is mandatory, calls to\n SDL_hid_send_feature_report() will always contain one more byte than the\n report contains. For example, if a hid report is 16 bytes long, 17 bytes\n must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for\n devices which do not use numbered reports), followed by the report data (16\n bytes). In this example, the length passed in would be 17.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data The data to send, including the report number as the first\n             byte.\n \\param length The length in bytes of the data to send, including the report\n               number.\n \\returns the actual number of bytes written and -1 on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_send_feature_report(
        dev: *mut SDL_hid_device,
        data: *const ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a feature report from a HID device.\n\n Set the first byte of `data` to the Report ID of the report to be read.\n Make sure to allow space for this extra byte in `data`. Upon return, the\n first byte will still contain the Report ID, and the report data will start\n in data[1].\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data A buffer to put the read data into, including the Report ID.\n             Set the first byte of `data` to the Report ID of the report to\n             be read, or set it to zero if your device does not use numbered\n             reports.\n \\param length The number of bytes to read, including an extra byte for the\n               report ID. The buffer can be longer than the actual report.\n \\returns the number of bytes read plus one for the report ID (which is\n          still in the first byte), or -1 on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_feature_report(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get an input report from a HID device.\n\n Set the first byte of `data` to the Report ID of the report to be read.\n Make sure to allow space for this extra byte in `data`. Upon return, the\n first byte will still contain the Report ID, and the report data will start\n in data[1].\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param data A buffer to put the read data into, including the Report ID.\n             Set the first byte of `data` to the Report ID of the report to\n             be read, or set it to zero if your device does not use numbered\n             reports.\n \\param length The number of bytes to read, including an extra byte for the\n               report ID. The buffer can be longer than the actual report.\n \\returns the number of bytes read plus one for the report ID (which is\n          still in the first byte), or -1 on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_input_report(
        dev: *mut SDL_hid_device,
        data: *mut ::std::os::raw::c_uchar,
        length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Close a HID device.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_close(dev: *mut SDL_hid_device) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get The Manufacturer String from a HID device.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param string A wide string buffer to put the data into.\n \\param maxlen The length of the buffer in multiples of wchar_t.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_manufacturer_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get The Product String from a HID device.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param string A wide string buffer to put the data into.\n \\param maxlen The length of the buffer in multiples of wchar_t.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_product_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get The Serial Number String from a HID device.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param string A wide string buffer to put the data into.\n \\param maxlen The length of the buffer in multiples of wchar_t.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_serial_number_string(
        dev: *mut SDL_hid_device,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a string from a HID device, based on its string index.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param string_index The index of the string to get.\n \\param string A wide string buffer to put the data into.\n \\param maxlen The length of the buffer in multiples of wchar_t.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_indexed_string(
        dev: *mut SDL_hid_device,
        string_index: ::std::os::raw::c_int,
        string: *mut wchar_t,
        maxlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the device info from a HID device.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\returns a pointer to the SDL_hid_device_info for this hid_device, or NULL\n          in the case of failure; call SDL_GetError() for more information.\n          This struct is valid until the device is closed with\n          SDL_hid_close().\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_device_info(dev: *mut SDL_hid_device) -> *mut SDL_hid_device_info;
}
extern "C" {
    #[doc = " Get a report descriptor from a HID device.\n\n User has to provide a preallocated buffer where descriptor will be copied\n to. The recommended size for a preallocated buffer is 4096 bytes.\n\n \\param dev A device handle returned from SDL_hid_open().\n \\param buf The buffer to copy descriptor into.\n \\param buf_size The size of the buffer in bytes.\n \\returns the number of bytes actually copied, or -1 on error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_get_report_descriptor(
        dev: *mut SDL_hid_device,
        buf: *mut ::std::os::raw::c_uchar,
        buf_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers\n\n \\param active SDL_TRUE to start the scan, SDL_FALSE to stop the scan\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_hid_ble_scan(active: SDL_bool);
}
pub const SDL_HintPriority_SDL_HINT_DEFAULT: SDL_HintPriority = 0;
pub const SDL_HintPriority_SDL_HINT_NORMAL: SDL_HintPriority = 1;
pub const SDL_HintPriority_SDL_HINT_OVERRIDE: SDL_HintPriority = 2;
#[doc = "  \\brief  An enumeration of hint priorities"]
pub type SDL_HintPriority = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Set a hint with a specific priority.\n\n The priority controls the behavior when setting a hint that already has a\n value. Hints will replace existing hints of their priority and lower.\n Environment variables are considered to have override priority.\n\n \\param name the hint to set\n \\param value the value of the hint variable\n \\param priority the SDL_HintPriority level for the hint\n \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetHint\n \\sa SDL_SetHint"]
    pub fn SDL_SetHintWithPriority(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        priority: SDL_HintPriority,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Set a hint with normal priority.\n\n Hints will not be set if there is an existing override hint or environment\n variable that takes precedence. You can use SDL_SetHintWithPriority() to\n set the hint with override priority instead.\n\n \\param name the hint to set\n \\param value the value of the hint variable\n \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetHint\n \\sa SDL_SetHintWithPriority"]
    pub fn SDL_SetHint(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SDL_bool;
}
extern "C" {
    #[doc = " Reset a hint to the default value.\n\n This will reset a hint to the value of the environment variable, or NULL if\n the environment isn't set. Callbacks will be called normally with this\n change.\n\n \\param name the hint to set\n \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetHint\n \\sa SDL_SetHint"]
    pub fn SDL_ResetHint(name: *const ::std::os::raw::c_char) -> SDL_bool;
}
extern "C" {
    #[doc = " Reset all hints to the default values.\n\n This will reset all hints to the value of the associated environment\n variable, or NULL if the environment isn't set. Callbacks will be called\n normally with this change.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetHint\n \\sa SDL_SetHint\n \\sa SDL_ResetHint"]
    pub fn SDL_ResetHints();
}
extern "C" {
    #[doc = " Get the value of a hint.\n\n \\param name the hint to query\n \\returns the string value of a hint or NULL if the hint isn't set.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetHint\n \\sa SDL_SetHintWithPriority"]
    pub fn SDL_GetHint(name: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the boolean value of a hint variable.\n\n \\param name the name of the hint to get the boolean value from\n \\param default_value the value to return if the hint does not exist\n \\returns the boolean value of a hint or the provided default value if the\n          hint does not exist.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetHint\n \\sa SDL_SetHint"]
    pub fn SDL_GetHintBoolean(
        name: *const ::std::os::raw::c_char,
        default_value: SDL_bool,
    ) -> SDL_bool;
}
#[doc = " Type definition of the hint callback function.\n\n \\param userdata what was passed as `userdata` to SDL_AddHintCallback()\n \\param name what was passed as `name` to SDL_AddHintCallback()\n \\param oldValue the previous hint value\n \\param newValue the new value hint is to be set to"]
pub type SDL_HintCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        oldValue: *const ::std::os::raw::c_char,
        newValue: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    #[doc = " Add a function to watch a particular hint.\n\n \\param name the hint to watch\n \\param callback An SDL_HintCallback function that will be called when the\n                 hint value changes\n \\param userdata a pointer to pass to the callback function\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DelHintCallback"]
    pub fn SDL_AddHintCallback(
        name: *const ::std::os::raw::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Remove a function watching a particular hint.\n\n \\param name the hint being watched\n \\param callback An SDL_HintCallback function that will be called when the\n                 hint value changes\n \\param userdata a pointer being passed to the callback function\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddHintCallback"]
    pub fn SDL_DelHintCallback(
        name: *const ::std::os::raw::c_char,
        callback: SDL_HintCallback,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Clear all hints.\n\n This function is automatically called during SDL_Quit(), and deletes all\n callbacks without calling them and frees all memory associated with hints.\n If you're calling this from application code you probably want to call\n SDL_ResetHints() instead.\n\n This function will be removed from the API the next time we rev the ABI.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ResetHints"]
    pub fn SDL_ClearHints();
}
pub const SDL_InitFlags_SDL_INIT_TIMER: SDL_InitFlags = 1;
pub const SDL_InitFlags_SDL_INIT_AUDIO: SDL_InitFlags = 16;
#[doc = "< `SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS`"]
pub const SDL_InitFlags_SDL_INIT_VIDEO: SDL_InitFlags = 32;
#[doc = "< `SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`"]
pub const SDL_InitFlags_SDL_INIT_JOYSTICK: SDL_InitFlags = 512;
pub const SDL_InitFlags_SDL_INIT_HAPTIC: SDL_InitFlags = 4096;
#[doc = "< `SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK`"]
pub const SDL_InitFlags_SDL_INIT_GAMEPAD: SDL_InitFlags = 8192;
pub const SDL_InitFlags_SDL_INIT_EVENTS: SDL_InitFlags = 16384;
pub const SDL_InitFlags_SDL_INIT_SENSOR: SDL_InitFlags = 32768;
#[doc = "   \\brief Initialization flags for SDL_Init and/or SDL_InitSubSystem\n\n These are the flags which may be passed to SDL_Init().  You should\n specify the subsystems which you will be using in your application.\n\n \\sa SDL_Init\n \\sa SDL_Quit\n \\sa SDL_InitSubSystem\n \\sa SDL_QuitSubSystem\n \\sa SDL_WasInit"]
pub type SDL_InitFlags = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Initialize the SDL library.\n\n SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the\n two may be used interchangeably. Though for readability of your code\n SDL_InitSubSystem() might be preferred.\n\n The file I/O (for example: SDL_RWFromFile) and threading (SDL_CreateThread)\n subsystems are initialized by default. Message boxes\n (SDL_ShowSimpleMessageBox) also attempt to work without initializing the\n video subsystem, in hopes of being useful in showing an error dialog when\n SDL_Init fails. You must specifically initialize other subsystems if you\n use them in your application.\n\n Logging (such as SDL_Log) works without initialization, too.\n\n `flags` may be any of the following OR'd together:\n\n - `SDL_INIT_TIMER`: timer subsystem\n - `SDL_INIT_AUDIO`: audio subsystem\n - `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events\n   subsystem\n - `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the\n   events subsystem\n - `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem\n - `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the\n   joystick subsystem\n - `SDL_INIT_EVENTS`: events subsystem\n - `SDL_INIT_EVERYTHING`: all of the above subsystems\n\n Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()\n for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or\n call SDL_Quit() to force shutdown). If a subsystem is already loaded then\n this call will increase the ref-count and return.\n\n \\param flags subsystem initialization flags\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_InitSubSystem\n \\sa SDL_Quit\n \\sa SDL_SetMainReady\n \\sa SDL_WasInit"]
    pub fn SDL_Init(flags: Uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compatibility function to initialize the SDL library.\n\n This function and SDL_Init() are interchangeable.\n\n \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Init\n \\sa SDL_Quit\n \\sa SDL_QuitSubSystem"]
    pub fn SDL_InitSubSystem(flags: Uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Shut down specific SDL subsystems.\n\n You still need to call SDL_Quit() even if you close all open subsystems\n with SDL_QuitSubSystem().\n\n \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_InitSubSystem\n \\sa SDL_Quit"]
    pub fn SDL_QuitSubSystem(flags: Uint32);
}
extern "C" {
    #[doc = " Get a mask of the specified subsystems which are currently initialized.\n\n \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n \\returns a mask of all initialized subsystems if `flags` is 0, otherwise it\n          returns the initialization status of the specified subsystems.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Init\n \\sa SDL_InitSubSystem"]
    pub fn SDL_WasInit(flags: Uint32) -> Uint32;
}
extern "C" {
    #[doc = " Clean up all initialized subsystems.\n\n You should call this function even if you have already shutdown each\n initialized subsystem with SDL_QuitSubSystem(). It is safe to call this\n function even in the case of errors in initialization.\n\n You can use this function with atexit() to ensure that it is run when your\n application is shutdown, but it is not wise to do this from a library or\n other dynamically loaded code.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Init\n \\sa SDL_QuitSubSystem"]
    pub fn SDL_Quit();
}
extern "C" {
    #[doc = " Dynamically load a shared object.\n\n \\param sofile a system-dependent name of the object file\n \\returns an opaque pointer to the object handle or NULL if there was an\n          error; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LoadFunction\n \\sa SDL_UnloadObject"]
    pub fn SDL_LoadObject(sofile: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Look up the address of the named function in a shared object.\n\n This function pointer is no longer valid after calling SDL_UnloadObject().\n\n This function can only look up C function names. Other languages may have\n name mangling and intrinsic language support that varies from compiler to\n compiler.\n\n Make sure you declare your function pointers with the same calling\n convention as the actual library function. Your code will crash\n mysteriously if you do not do this.\n\n If the requested function doesn't exist, NULL is returned.\n\n \\param handle a valid shared object handle returned by SDL_LoadObject()\n \\param name the name of the function to look up\n \\returns a pointer to the function or NULL if there was an error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LoadObject\n \\sa SDL_UnloadObject"]
    pub fn SDL_LoadFunction(
        handle: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
    ) -> SDL_FunctionPointer;
}
extern "C" {
    #[doc = " Unload a shared object from memory.\n\n \\param handle a valid shared object handle returned by SDL_LoadObject()\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LoadFunction\n \\sa SDL_LoadObject"]
    pub fn SDL_UnloadObject(handle: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Locale {
    #[doc = "< A language name, like \"en\" for English."]
    pub language: *const ::std::os::raw::c_char,
    #[doc = "< A country, like \"US\" for America. Can be NULL."]
    pub country: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SDL_Locale() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Locale> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Locale>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_Locale))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Locale>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_Locale))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).language) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(language)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).country) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Locale),
            "::",
            stringify!(country)
        )
    );
}
extern "C" {
    #[doc = " Report the user's preferred locale.\n\n This returns an array of SDL_Locale structs, the final item zeroed out.\n When the caller is done with this array, it should call SDL_free() on the\n returned value; all the memory involved is allocated in a single block, so\n a single SDL_free() will suffice.\n\n Returned language strings are in the format xx, where 'xx' is an ISO-639\n language specifier (such as \"en\" for English, \"de\" for German, etc).\n Country strings are in the format YY, where \"YY\" is an ISO-3166 country\n code (such as \"US\" for the United States, \"CA\" for Canada, etc). Country\n might be NULL if there's no specific guidance on them (so you might get {\n \"en\", \"US\" } for American English, but { \"en\", NULL } means \"English\n language, generically\"). Language strings are never NULL, except to\n terminate the array.\n\n Please note that not all of these strings are 2 characters; some are three\n or more.\n\n The returned list of locales are in the order of the user's preference. For\n example, a German citizen that is fluent in US English and knows enough\n Japanese to navigate around Tokyo might have a list like: { \"de\", \"en_US\",\n \"jp\", NULL }. Someone from England might prefer British English (where\n \"color\" is spelled \"colour\", etc), but will settle for anything like it: {\n \"en_GB\", \"en\", NULL }.\n\n This function returns NULL on error, including when the platform does not\n supply this information at all.\n\n This might be a \"slow\" call that has to query the operating system. It's\n best to ask for this once and save the results. However, this list can\n change, usually because the user has changed a system preference outside of\n your program; SDL will send an SDL_EVENT_LOCALE_CHANGED event in this case,\n if possible, and you can call this function again to get an updated copy of\n preferred locales.\n\n \\returns array of locales, terminated with a locale with a NULL language\n          field. Will return NULL on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetPreferredLocales() -> *mut SDL_Locale;
}
pub const SDL_LogCategory_SDL_LOG_CATEGORY_APPLICATION: SDL_LogCategory = 0;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_ERROR: SDL_LogCategory = 1;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_ASSERT: SDL_LogCategory = 2;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_SYSTEM: SDL_LogCategory = 3;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_AUDIO: SDL_LogCategory = 4;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_VIDEO: SDL_LogCategory = 5;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RENDER: SDL_LogCategory = 6;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_INPUT: SDL_LogCategory = 7;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_TEST: SDL_LogCategory = 8;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED1: SDL_LogCategory = 9;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED2: SDL_LogCategory = 10;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED3: SDL_LogCategory = 11;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED4: SDL_LogCategory = 12;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED5: SDL_LogCategory = 13;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED6: SDL_LogCategory = 14;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED7: SDL_LogCategory = 15;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED8: SDL_LogCategory = 16;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED9: SDL_LogCategory = 17;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_RESERVED10: SDL_LogCategory = 18;
pub const SDL_LogCategory_SDL_LOG_CATEGORY_CUSTOM: SDL_LogCategory = 19;
#[doc = "  \\brief The predefined log categories\n\n  By default the application category is enabled at the INFO level,\n  the assert category is enabled at the WARN level, test is enabled\n  at the VERBOSE level and all other categories are enabled at the\n  CRITICAL level."]
pub type SDL_LogCategory = ::std::os::raw::c_uint;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_VERBOSE: SDL_LogPriority = 1;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_DEBUG: SDL_LogPriority = 2;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_INFO: SDL_LogPriority = 3;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_WARN: SDL_LogPriority = 4;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_ERROR: SDL_LogPriority = 5;
pub const SDL_LogPriority_SDL_LOG_PRIORITY_CRITICAL: SDL_LogPriority = 6;
pub const SDL_LogPriority_SDL_NUM_LOG_PRIORITIES: SDL_LogPriority = 7;
#[doc = "  \\brief The predefined log priorities"]
pub type SDL_LogPriority = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Set the priority of all log categories.\n\n \\param priority the SDL_LogPriority to assign\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogSetPriority"]
    pub fn SDL_LogSetAllPriority(priority: SDL_LogPriority);
}
extern "C" {
    #[doc = " Set the priority of a particular log category.\n\n \\param category the category to assign a priority to\n \\param priority the SDL_LogPriority to assign\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogGetPriority\n \\sa SDL_LogSetAllPriority"]
    pub fn SDL_LogSetPriority(category: ::std::os::raw::c_int, priority: SDL_LogPriority);
}
extern "C" {
    #[doc = " Get the priority of a particular log category.\n\n \\param category the category to query\n \\returns the SDL_LogPriority for the requested category\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogSetPriority"]
    pub fn SDL_LogGetPriority(category: ::std::os::raw::c_int) -> SDL_LogPriority;
}
extern "C" {
    #[doc = " Reset all priorities to default.\n\n This is called by SDL_Quit().\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogSetAllPriority\n \\sa SDL_LogSetPriority"]
    pub fn SDL_LogResetPriorities();
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.\n\n = * \\param fmt a printf() style message format string\n\n \\param ... additional parameters matching % tokens in the `fmt` string, if\n            any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_Log(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_VERBOSE.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogWarn"]
    pub fn SDL_LogVerbose(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_DEBUG.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogDebug(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_INFO.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogInfo(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_WARN.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose"]
    pub fn SDL_LogWarn(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_ERROR.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogError(category: ::std::os::raw::c_int, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[doc = " Log a message with SDL_LOG_PRIORITY_CRITICAL.\n\n \\param category the category of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogCritical(
        category: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " Log a message with the specified category and priority.\n\n \\param category the category of the message\n \\param priority the priority of the message\n \\param fmt a printf() style message format string\n \\param ... additional parameters matching % tokens in the **fmt** string,\n            if any\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessageV\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogMessage(
        category: ::std::os::raw::c_int,
        priority: SDL_LogPriority,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " Log a message with the specified category and priority.\n\n \\param category the category of the message\n \\param priority the priority of the message\n \\param fmt a printf() style message format string\n \\param ap a variable argument list\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Log\n \\sa SDL_LogCritical\n \\sa SDL_LogDebug\n \\sa SDL_LogError\n \\sa SDL_LogInfo\n \\sa SDL_LogMessage\n \\sa SDL_LogVerbose\n \\sa SDL_LogWarn"]
    pub fn SDL_LogMessageV(
        category: ::std::os::raw::c_int,
        priority: SDL_LogPriority,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
#[doc = " The prototype for the log output callback function.\n\n This function is called by SDL when there is new text to be logged.\n\n \\param userdata what was passed as `userdata` to SDL_LogSetOutputFunction()\n \\param category the category of the message\n \\param priority the priority of the message\n \\param message the message being output"]
pub type SDL_LogOutputFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userdata: *mut ::std::os::raw::c_void,
        category: ::std::os::raw::c_int,
        priority: SDL_LogPriority,
        message: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    #[doc = " Get the current log output function.\n\n \\param callback an SDL_LogOutputFunction filled in with the current log\n                 callback\n \\param userdata a pointer filled in with the pointer that is passed to\n                 `callback`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogSetOutputFunction"]
    pub fn SDL_LogGetOutputFunction(
        callback: *mut SDL_LogOutputFunction,
        userdata: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Replace the default log output function with one of your own.\n\n \\param callback an SDL_LogOutputFunction to call instead of the default\n \\param userdata a pointer that is passed to `callback`\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LogGetOutputFunction"]
    pub fn SDL_LogSetOutputFunction(
        callback: SDL_LogOutputFunction,
        userdata: *mut ::std::os::raw::c_void,
    );
}
#[doc = "< error dialog"]
pub const SDL_MessageBoxFlags_SDL_MESSAGEBOX_ERROR: SDL_MessageBoxFlags = 16;
#[doc = "< warning dialog"]
pub const SDL_MessageBoxFlags_SDL_MESSAGEBOX_WARNING: SDL_MessageBoxFlags = 32;
#[doc = "< informational dialog"]
pub const SDL_MessageBoxFlags_SDL_MESSAGEBOX_INFORMATION: SDL_MessageBoxFlags = 64;
#[doc = "< buttons placed left to right"]
pub const SDL_MessageBoxFlags_SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT: SDL_MessageBoxFlags = 128;
#[doc = "< buttons placed right to left"]
pub const SDL_MessageBoxFlags_SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT: SDL_MessageBoxFlags = 256;
#[doc = " SDL_MessageBox flags. If supported will display warning icon, etc."]
pub type SDL_MessageBoxFlags = ::std::os::raw::c_uint;
#[doc = "< Marks the default button when return is hit"]
pub const SDL_MessageBoxButtonFlags_SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT:
    SDL_MessageBoxButtonFlags = 1;
#[doc = "< Marks the default button when escape is hit"]
pub const SDL_MessageBoxButtonFlags_SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT:
    SDL_MessageBoxButtonFlags = 2;
#[doc = " Flags for SDL_MessageBoxButtonData."]
pub type SDL_MessageBoxButtonFlags = ::std::os::raw::c_uint;
#[doc = " Individual button data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxButtonData {
    #[doc = "< ::SDL_MessageBoxButtonFlags"]
    pub flags: Uint32,
    #[doc = "< User defined button id (value returned via SDL_ShowMessageBox)"]
    pub buttonid: ::std::os::raw::c_int,
    #[doc = "< The UTF-8 button text"]
    pub text: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxButtonData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxButtonData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxButtonData>(),
        16usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxButtonData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxButtonData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttonid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(buttonid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxButtonData),
            "::",
            stringify!(text)
        )
    );
}
#[doc = " RGB value used in a message box color scheme"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxColor {
    pub r: Uint8,
    pub g: Uint8,
    pub b: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColor() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxColor>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxColor>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColor),
            "::",
            stringify!(b)
        )
    );
}
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_BACKGROUND: SDL_MessageBoxColorType = 0;
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_TEXT: SDL_MessageBoxColorType = 1;
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_BUTTON_BORDER: SDL_MessageBoxColorType = 2;
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND: SDL_MessageBoxColorType =
    3;
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED: SDL_MessageBoxColorType = 4;
pub const SDL_MessageBoxColorType_SDL_MESSAGEBOX_COLOR_MAX: SDL_MessageBoxColorType = 5;
pub type SDL_MessageBoxColorType = ::std::os::raw::c_uint;
#[doc = " A set of colors to use for message box dialogs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxColorScheme {
    pub colors: [SDL_MessageBoxColor; 5usize],
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxColorScheme() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxColorScheme> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxColorScheme>(),
        15usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxColorScheme>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxColorScheme))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxColorScheme),
            "::",
            stringify!(colors)
        )
    );
}
#[doc = " MessageBox structure containing title, text, window, etc."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_MessageBoxData {
    #[doc = "< ::SDL_MessageBoxFlags"]
    pub flags: Uint32,
    #[doc = "< Parent window, can be NULL"]
    pub window: *mut SDL_Window,
    #[doc = "< UTF-8 title"]
    pub title: *const ::std::os::raw::c_char,
    #[doc = "< UTF-8 message text"]
    pub message: *const ::std::os::raw::c_char,
    pub numbuttons: ::std::os::raw::c_int,
    pub buttons: *const SDL_MessageBoxButtonData,
    #[doc = "< ::SDL_MessageBoxColorScheme, can be NULL to use system settings"]
    pub colorScheme: *const SDL_MessageBoxColorScheme,
}
#[test]
fn bindgen_test_layout_SDL_MessageBoxData() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_MessageBoxData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_MessageBoxData>(),
        56usize,
        concat!("Size of: ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_MessageBoxData>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_MessageBoxData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numbuttons) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(numbuttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buttons) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(buttons)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorScheme) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_MessageBoxData),
            "::",
            stringify!(colorScheme)
        )
    );
}
extern "C" {
    #[doc = " Create a modal message box.\n\n If your needs aren't complex, it might be easier to use\n SDL_ShowSimpleMessageBox.\n\n This function should be called on the thread that created the parent\n window, or on the main thread if the messagebox has no parent. It will\n block execution of that thread until the user clicks a button or closes the\n messagebox.\n\n This function may be called at any time, even before SDL_Init(). This makes\n it useful for reporting errors like a failure to create a renderer or\n OpenGL context.\n\n On X11, SDL rolls its own dialog box with X11 primitives instead of a\n formal toolkit like GTK+ or Qt.\n\n Note that if SDL_Init() would fail because there isn't any available video\n target, this function is likely to fail for the same reasons. If this is a\n concern, check the return value from this function and fall back to writing\n to stderr if you can.\n\n \\param messageboxdata the SDL_MessageBoxData structure with title, text and\n                       other options\n \\param buttonid the pointer to which user id of hit button should be copied\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ShowSimpleMessageBox"]
    pub fn SDL_ShowMessageBox(
        messageboxdata: *const SDL_MessageBoxData,
        buttonid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Display a simple modal message box.\n\n If your needs aren't complex, this function is preferred over\n SDL_ShowMessageBox.\n\n `flags` may be any of the following:\n\n - `SDL_MESSAGEBOX_ERROR`: error dialog\n - `SDL_MESSAGEBOX_WARNING`: warning dialog\n - `SDL_MESSAGEBOX_INFORMATION`: informational dialog\n\n This function should be called on the thread that created the parent\n window, or on the main thread if the messagebox has no parent. It will\n block execution of that thread until the user clicks a button or closes the\n messagebox.\n\n This function may be called at any time, even before SDL_Init(). This makes\n it useful for reporting errors like a failure to create a renderer or\n OpenGL context.\n\n On X11, SDL rolls its own dialog box with X11 primitives instead of a\n formal toolkit like GTK+ or Qt.\n\n Note that if SDL_Init() would fail because there isn't any available video\n target, this function is likely to fail for the same reasons. If this is a\n concern, check the return value from this function and fall back to writing\n to stderr if you can.\n\n \\param flags an SDL_MessageBoxFlags value\n \\param title UTF-8 title text\n \\param message UTF-8 message text\n \\param window the parent window, or NULL for no parent\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ShowMessageBox"]
    pub fn SDL_ShowSimpleMessageBox(
        flags: Uint32,
        title: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        window: *mut SDL_Window,
    ) -> ::std::os::raw::c_int;
}
#[doc = "  \\brief A handle to a CAMetalLayer-backed NSView (macOS) or UIView (iOS/tvOS).\n\n  \\note This can be cast directly to an NSView or UIView."]
pub type SDL_MetalView = *mut ::std::os::raw::c_void;
extern "C" {
    #[doc = " Create a CAMetalLayer-backed NSView/UIView and attach it to the specified\n window.\n\n On macOS, this does *not* associate a MTLDevice with the CAMetalLayer on\n its own. It is up to user code to do that.\n\n The returned handle can be casted directly to a NSView or UIView. To access\n the backing CAMetalLayer, call SDL_Metal_GetLayer().\n\n \\param window the window\n \\returns handle NSView or UIView\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Metal_DestroyView\n \\sa SDL_Metal_GetLayer"]
    pub fn SDL_Metal_CreateView(window: *mut SDL_Window) -> SDL_MetalView;
}
extern "C" {
    #[doc = " Destroy an existing SDL_MetalView object.\n\n This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was\n called after SDL_CreateWindow.\n\n \\param view the SDL_MetalView object\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Metal_CreateView"]
    pub fn SDL_Metal_DestroyView(view: SDL_MetalView);
}
extern "C" {
    #[doc = " Get a pointer to the backing CAMetalLayer for the given view.\n\n \\param view the SDL_MetalView object\n \\returns a pointer\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_Metal_CreateView"]
    pub fn SDL_Metal_GetLayer(view: SDL_MetalView) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Open a URL/URI in the browser or other appropriate external application.\n\n Open a URL in a separate, system-provided application. How this works will\n vary wildly depending on the platform. This will likely launch what makes\n sense to handle a specific URL's protocol (a web browser for `http://`,\n etc), but it might also be able to launch file managers for directories and\n other things.\n\n What happens when you open a URL varies wildly as well: your game window\n may lose focus (and may or may not lose focus if your game was fullscreen\n or grabbing input at the time). On mobile devices, your app will likely\n move to the background or your process might be paused. Any given platform\n may or may not handle a given URL.\n\n If this is unimplemented (or simply unavailable) for a platform, this will\n fail with an error. A successful result does not mean the URL loaded, just\n that we launched _something_ to handle it (or at least believe we did).\n\n All this to say: this function can be useful, but you should definitely\n test it on every platform you target.\n\n \\param url A valid URL/URI to open. Use `file:///full/path/to/file` for\n            local files, if supported.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_OpenURL(url: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the name of the platform.\n\n Here are the names returned for some (but not all) supported platforms:\n\n - \"Windows\"\n - \"macOS\"\n - \"Linux\"\n - \"iOS\"\n - \"Android\"\n\n \\returns the name of the platform. If the correct platform name is not\n          available, returns a string beginning with the text \"Unknown\".\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetPlatform() -> *const ::std::os::raw::c_char;
}
#[doc = "< cannot determine power status"]
pub const SDL_PowerState_SDL_POWERSTATE_UNKNOWN: SDL_PowerState = 0;
#[doc = "< Not plugged in, running on the battery"]
pub const SDL_PowerState_SDL_POWERSTATE_ON_BATTERY: SDL_PowerState = 1;
#[doc = "< Plugged in, no battery available"]
pub const SDL_PowerState_SDL_POWERSTATE_NO_BATTERY: SDL_PowerState = 2;
#[doc = "< Plugged in, charging battery"]
pub const SDL_PowerState_SDL_POWERSTATE_CHARGING: SDL_PowerState = 3;
#[doc = "< Plugged in, battery charged"]
pub const SDL_PowerState_SDL_POWERSTATE_CHARGED: SDL_PowerState = 4;
#[doc = "  The basic state for the system's power supply."]
pub type SDL_PowerState = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " Get the current power supply details.\n\n You should never take a battery status as absolute truth. Batteries\n (especially failing batteries) are delicate hardware, and the values\n reported here are best estimates based on what that hardware reports. It's\n not uncommon for older batteries to lose stored power much faster than it\n reports, or completely drain when reporting it has 20 percent left, etc.\n\n Battery status can change at any time; if you are concerned with power\n state, you should call this function frequently, and perhaps ignore changes\n until they seem to be stable for a few seconds.\n\n It's possible a platform can only report battery percentage or time left\n but not both.\n\n \\param seconds seconds of battery life left, you can pass a NULL here if\n                you don't care, will return -1 if we can't determine a\n                value, or we're not running on a battery\n \\param percent percentage of battery life left, between 0 and 100, you can\n                pass a NULL here if you don't care, will return -1 if we\n                can't determine a value, or we're not running on a battery\n \\returns an SDL_PowerState enum representing the current battery state.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetPowerInfo(
        seconds: *mut ::std::os::raw::c_int,
        percent: *mut ::std::os::raw::c_int,
    ) -> SDL_PowerState;
}
#[doc = "< The renderer is a software fallback"]
pub const SDL_RendererFlags_SDL_RENDERER_SOFTWARE: SDL_RendererFlags = 1;
#[doc = "< The renderer uses hardware\nacceleration"]
pub const SDL_RendererFlags_SDL_RENDERER_ACCELERATED: SDL_RendererFlags = 2;
#[doc = "< Present is synchronized\nwith the refresh rate"]
pub const SDL_RendererFlags_SDL_RENDERER_PRESENTVSYNC: SDL_RendererFlags = 4;
#[doc = " Flags used when creating a rendering context"]
pub type SDL_RendererFlags = ::std::os::raw::c_uint;
#[doc = " Information on the capabilities of a render driver or context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_RendererInfo {
    #[doc = "< The name of the renderer"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = "< Supported ::SDL_RendererFlags"]
    pub flags: Uint32,
    #[doc = "< The number of available texture formats"]
    pub num_texture_formats: Uint32,
    #[doc = "< The available texture formats"]
    pub texture_formats: [Uint32; 16usize],
    #[doc = "< The maximum texture width"]
    pub max_texture_width: ::std::os::raw::c_int,
    #[doc = "< The maximum texture height"]
    pub max_texture_height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SDL_RendererInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_RendererInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_RendererInfo>(),
        88usize,
        concat!("Size of: ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_RendererInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(SDL_RendererInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_texture_formats) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(num_texture_formats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texture_formats) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(texture_formats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_texture_width) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_texture_height) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_RendererInfo),
            "::",
            stringify!(max_texture_height)
        )
    );
}
#[doc = "  Vertex structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Vertex {
    #[doc = "< Vertex position, in SDL_Renderer coordinates"]
    pub position: SDL_FPoint,
    #[doc = "< Vertex color"]
    pub color: SDL_Color,
    #[doc = "< Normalized texture coordinates, if needed"]
    pub tex_coord: SDL_FPoint,
}
#[test]
fn bindgen_test_layout_SDL_Vertex() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_Vertex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_Vertex>(),
        20usize,
        concat!("Size of: ", stringify!(SDL_Vertex))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_Vertex>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_Vertex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tex_coord) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_Vertex),
            "::",
            stringify!(tex_coord)
        )
    );
}
#[doc = "< nearest pixel sampling"]
pub const SDL_ScaleMode_SDL_SCALEMODE_NEAREST: SDL_ScaleMode = 0;
#[doc = "< linear filtering"]
pub const SDL_ScaleMode_SDL_SCALEMODE_LINEAR: SDL_ScaleMode = 1;
#[doc = "< anisotropic filtering"]
pub const SDL_ScaleMode_SDL_SCALEMODE_BEST: SDL_ScaleMode = 2;
#[doc = " The scaling mode for a texture."]
pub type SDL_ScaleMode = ::std::os::raw::c_uint;
#[doc = "< Changes rarely, not lockable"]
pub const SDL_TextureAccess_SDL_TEXTUREACCESS_STATIC: SDL_TextureAccess = 0;
#[doc = "< Changes frequently, lockable"]
pub const SDL_TextureAccess_SDL_TEXTUREACCESS_STREAMING: SDL_TextureAccess = 1;
#[doc = "< Texture can be used as a render target"]
pub const SDL_TextureAccess_SDL_TEXTUREACCESS_TARGET: SDL_TextureAccess = 2;
#[doc = " The access pattern allowed for a texture."]
pub type SDL_TextureAccess = ::std::os::raw::c_uint;
#[doc = "< No modulation"]
pub const SDL_TextureModulate_SDL_TEXTUREMODULATE_NONE: SDL_TextureModulate = 0;
#[doc = "< srcC = srcC * color"]
pub const SDL_TextureModulate_SDL_TEXTUREMODULATE_COLOR: SDL_TextureModulate = 1;
#[doc = "< srcA = srcA * alpha"]
pub const SDL_TextureModulate_SDL_TEXTUREMODULATE_ALPHA: SDL_TextureModulate = 2;
#[doc = " The texture channel modulation used in SDL_RenderTexture()."]
pub type SDL_TextureModulate = ::std::os::raw::c_uint;
#[doc = "< Do not flip"]
pub const SDL_RendererFlip_SDL_FLIP_NONE: SDL_RendererFlip = 0;
#[doc = "< flip horizontally"]
pub const SDL_RendererFlip_SDL_FLIP_HORIZONTAL: SDL_RendererFlip = 1;
#[doc = "< flip vertically"]
pub const SDL_RendererFlip_SDL_FLIP_VERTICAL: SDL_RendererFlip = 2;
#[doc = " Flip constants for SDL_RenderTextureRotated"]
pub type SDL_RendererFlip = ::std::os::raw::c_uint;
#[doc = "< There is no logical size in effect"]
pub const SDL_RendererLogicalPresentation_SDL_LOGICAL_PRESENTATION_DISABLED:
    SDL_RendererLogicalPresentation = 0;
#[doc = "< The rendered content is stretched to the output resolution"]
pub const SDL_RendererLogicalPresentation_SDL_LOGICAL_PRESENTATION_STRETCH:
    SDL_RendererLogicalPresentation = 1;
#[doc = "< The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars"]
pub const SDL_RendererLogicalPresentation_SDL_LOGICAL_PRESENTATION_LETTERBOX:
    SDL_RendererLogicalPresentation = 2;
#[doc = "< The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds"]
pub const SDL_RendererLogicalPresentation_SDL_LOGICAL_PRESENTATION_OVERSCAN:
    SDL_RendererLogicalPresentation = 3;
#[doc = "< The rendered content is scaled up by integer multiples to fit the output resolution"]
pub const SDL_RendererLogicalPresentation_SDL_LOGICAL_PRESENTATION_INTEGER_SCALE:
    SDL_RendererLogicalPresentation = 4;
#[doc = " How the logical size is mapped to the output"]
pub type SDL_RendererLogicalPresentation = ::std::os::raw::c_uint;
#[doc = " A structure representing rendering state"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Renderer {
    _unused: [u8; 0],
}
#[doc = " An efficient driver-specific representation of pixel data"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_Texture {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Get the number of 2D rendering drivers available for the current display.\n\n A render driver is a set of code that handles rendering and texture\n management on a particular display. Normally there is only one, but some\n drivers may have several available with different capabilities.\n\n There may be none if SDL was compiled without render support.\n\n \\returns a number >= 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer\n \\sa SDL_GetRenderDriver"]
    pub fn SDL_GetNumRenderDrivers() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Use this function to get the name of a built in 2D rendering driver.\n\n The list of rendering drivers is given in the order that they are normally\n initialized by default; the drivers that seem more reasonable to choose\n first (as far as the SDL developers believe) are earlier in the list.\n\n The names of drivers are all simple, low-ASCII identifiers, like \"opengl\",\n \"direct3d12\" or \"metal\". These never have Unicode characters, and are not\n meant to be proper names.\n\n The returned value points to a static, read-only string; do not modify or\n free it!\n\n \\param index the index of the rendering driver; the value ranges from 0 to\n              SDL_GetNumRenderDrivers() - 1\n \\returns the name of the rendering driver at the requested index, or NULL\n          if an invalid index was specified.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetNumRenderDrivers"]
    pub fn SDL_GetRenderDriver(index: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Create a window and default renderer.\n\n \\param width the width of the window\n \\param height the height of the window\n \\param window_flags the flags used to create the window (see\n                     SDL_CreateWindow())\n \\param window a pointer filled with the window, or NULL on error\n \\param renderer a pointer filled with the renderer, or NULL on error\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer\n \\sa SDL_CreateWindow"]
    pub fn SDL_CreateWindowAndRenderer(
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        window_flags: Uint32,
        window: *mut *mut SDL_Window,
        renderer: *mut *mut SDL_Renderer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a 2D rendering context for a window.\n\n If you want a specific renderer, you can specify its name here. A list of\n available renderers can be obtained by calling SDL_GetRenderDriver multiple\n times, with indices from 0 to SDL_GetNumRenderDrivers()-1. If you don't\n need a specific renderer, specify NULL and SDL will attempt to chooes the\n best option for you, based on what is available on the user's system.\n\n By default the rendering size matches the window size in pixels, but you\n can call SDL_SetRenderLogicalPresentation() to change the content size and\n scaling options.\n\n \\param window the window where rendering is displayed\n \\param name the name of the rendering driver to initialize, or NULL to\n             initialize the first one supporting the requested flags\n \\param flags 0, or one or more SDL_RendererFlags OR'd together\n \\returns a valid rendering context or NULL if there was an error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateSoftwareRenderer\n \\sa SDL_DestroyRenderer\n \\sa SDL_GetNumRenderDrivers\n \\sa SDL_GetRenderDriver\n \\sa SDL_GetRendererInfo"]
    pub fn SDL_CreateRenderer(
        window: *mut SDL_Window,
        name: *const ::std::os::raw::c_char,
        flags: Uint32,
    ) -> *mut SDL_Renderer;
}
extern "C" {
    #[doc = " Create a 2D software rendering context for a surface.\n\n Two other API which can be used to create SDL_Renderer:\n SDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_\n create a software renderer, but they are intended to be used with an\n SDL_Window as the final destination and not an SDL_Surface.\n\n \\param surface the SDL_Surface structure representing the surface where\n                rendering is done\n \\returns a valid rendering context or NULL if there was an error; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer\n \\sa SDL_CreateWindowRenderer\n \\sa SDL_DestroyRenderer"]
    pub fn SDL_CreateSoftwareRenderer(surface: *mut SDL_Surface) -> *mut SDL_Renderer;
}
extern "C" {
    #[doc = " Get the renderer associated with a window.\n\n \\param window the window to query\n \\returns the rendering context on success or NULL on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer"]
    pub fn SDL_GetRenderer(window: *mut SDL_Window) -> *mut SDL_Renderer;
}
extern "C" {
    #[doc = " Get the window associated with a renderer.\n\n \\param renderer the renderer to query\n \\returns the window on success or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRenderWindow(renderer: *mut SDL_Renderer) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Get information about a rendering context.\n\n \\param renderer the rendering context\n \\param info an SDL_RendererInfo structure filled with information about the\n             current renderer\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer"]
    pub fn SDL_GetRendererInfo(
        renderer: *mut SDL_Renderer,
        info: *mut SDL_RendererInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the output size in pixels of a rendering context.\n\n This returns the true output size in pixels, ignoring any render targets or\n logical size and presentation.\n\n \\param renderer the rendering context\n \\param w a pointer filled in with the width in pixels\n \\param h a pointer filled in with the height in pixels\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderer"]
    pub fn SDL_GetRenderOutputSize(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current output size in pixels of a rendering context.\n\n If a rendering target is active, this will return the size of the rendering\n target in pixels, otherwise if a logical size is set, it will return the\n logical size, otherwise it will return the value of\n SDL_GetRenderOutputSize().\n\n \\param renderer the rendering context\n \\param w a pointer filled in with the current width\n \\param h a pointer filled in with the current height\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderOutputSize\n \\sa SDL_GetRenderer"]
    pub fn SDL_GetCurrentRenderOutputSize(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a texture for a rendering context.\n\n You can set the texture scaling method by setting\n `SDL_HINT_RENDER_SCALE_QUALITY` before creating the texture.\n\n \\param renderer the rendering context\n \\param format one of the enumerated values in SDL_PixelFormatEnum\n \\param access one of the enumerated values in SDL_TextureAccess\n \\param w the width of the texture in pixels\n \\param h the height of the texture in pixels\n \\returns a pointer to the created texture or NULL if no rendering context\n          was active, the format was unsupported, or the width or height\n          were out of range; call SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTextureFromSurface\n \\sa SDL_DestroyTexture\n \\sa SDL_QueryTexture\n \\sa SDL_UpdateTexture"]
    pub fn SDL_CreateTexture(
        renderer: *mut SDL_Renderer,
        format: Uint32,
        access: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> *mut SDL_Texture;
}
extern "C" {
    #[doc = " Create a texture from an existing surface.\n\n The surface is not modified or freed by this function.\n\n The SDL_TextureAccess hint for the created texture is\n `SDL_TEXTUREACCESS_STATIC`.\n\n The pixel format of the created texture may be different from the pixel\n format of the surface. Use SDL_QueryTexture() to query the pixel format of\n the texture.\n\n \\param renderer the rendering context\n \\param surface the SDL_Surface structure containing pixel data used to fill\n                the texture\n \\returns the created texture or NULL on failure; call SDL_GetError() for\n          more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTexture\n \\sa SDL_DestroyTexture\n \\sa SDL_QueryTexture"]
    pub fn SDL_CreateTextureFromSurface(
        renderer: *mut SDL_Renderer,
        surface: *mut SDL_Surface,
    ) -> *mut SDL_Texture;
}
extern "C" {
    #[doc = " Query the attributes of a texture.\n\n \\param texture the texture to query\n \\param format a pointer filled in with the raw format of the texture; the\n               actual format may differ, but pixel transfers will use this\n               format (one of the SDL_PixelFormatEnum values). This argument\n               can be NULL if you don't need this information.\n \\param access a pointer filled in with the actual access to the texture\n               (one of the SDL_TextureAccess values). This argument can be\n               NULL if you don't need this information.\n \\param w a pointer filled in with the width of the texture in pixels. This\n          argument can be NULL if you don't need this information.\n \\param h a pointer filled in with the height of the texture in pixels. This\n          argument can be NULL if you don't need this information.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTexture"]
    pub fn SDL_QueryTexture(
        texture: *mut SDL_Texture,
        format: *mut Uint32,
        access: *mut ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set an additional color value multiplied into render copy operations.\n\n When this texture is rendered, during the copy operation each source color\n channel is modulated by the appropriate color value according to the\n following formula:\n\n `srcC = srcC * (color / 255)`\n\n Color modulation is not always supported by the renderer; it will return -1\n if color modulation is not supported.\n\n \\param texture the texture to update\n \\param r the red color value multiplied into copy operations\n \\param g the green color value multiplied into copy operations\n \\param b the blue color value multiplied into copy operations\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureColorMod\n \\sa SDL_SetTextureAlphaMod"]
    pub fn SDL_SetTextureColorMod(
        texture: *mut SDL_Texture,
        r: Uint8,
        g: Uint8,
        b: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the additional color value multiplied into render copy operations.\n\n \\param texture the texture to query\n \\param r a pointer filled in with the current red color value\n \\param g a pointer filled in with the current green color value\n \\param b a pointer filled in with the current blue color value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureAlphaMod\n \\sa SDL_SetTextureColorMod"]
    pub fn SDL_GetTextureColorMod(
        texture: *mut SDL_Texture,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set an additional alpha value multiplied into render copy operations.\n\n When this texture is rendered, during the copy operation the source alpha\n value is modulated by this alpha value according to the following formula:\n\n `srcA = srcA * (alpha / 255)`\n\n Alpha modulation is not always supported by the renderer; it will return -1\n if alpha modulation is not supported.\n\n \\param texture the texture to update\n \\param alpha the source alpha value multiplied into copy operations\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureAlphaMod\n \\sa SDL_SetTextureColorMod"]
    pub fn SDL_SetTextureAlphaMod(texture: *mut SDL_Texture, alpha: Uint8)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the additional alpha value multiplied into render copy operations.\n\n \\param texture the texture to query\n \\param alpha a pointer filled in with the current alpha value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureColorMod\n \\sa SDL_SetTextureAlphaMod"]
    pub fn SDL_GetTextureAlphaMod(
        texture: *mut SDL_Texture,
        alpha: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the blend mode for a texture, used by SDL_RenderTexture().\n\n If the blend mode is not supported, the closest supported mode is chosen\n and this function returns -1.\n\n \\param texture the texture to update\n \\param blendMode the SDL_BlendMode to use for texture blending\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureBlendMode\n \\sa SDL_RenderTexture"]
    pub fn SDL_SetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the blend mode used for texture copy operations.\n\n \\param texture the texture to query\n \\param blendMode a pointer filled in with the current SDL_BlendMode\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetTextureBlendMode"]
    pub fn SDL_GetTextureBlendMode(
        texture: *mut SDL_Texture,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the scale mode used for texture scale operations.\n\n If the scale mode is not supported, the closest supported mode is chosen.\n\n \\param texture The texture to update.\n \\param scaleMode the SDL_ScaleMode to use for texture scaling.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureScaleMode"]
    pub fn SDL_SetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the scale mode used for texture scale operations.\n\n \\param texture the texture to query.\n \\param scaleMode a pointer filled in with the current scale mode.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetTextureScaleMode"]
    pub fn SDL_GetTextureScaleMode(
        texture: *mut SDL_Texture,
        scaleMode: *mut SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Associate a user-specified pointer with a texture.\n\n \\param texture the texture to update.\n \\param userdata the pointer to associate with the texture.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetTextureUserData"]
    pub fn SDL_SetTextureUserData(
        texture: *mut SDL_Texture,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the user-specified pointer associated with a texture\n\n \\param texture the texture to query.\n \\returns the pointer associated with the texture, or NULL if the texture is\n          not valid.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetTextureUserData"]
    pub fn SDL_GetTextureUserData(texture: *mut SDL_Texture) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Update the given texture rectangle with new pixel data.\n\n The pixel data must be in the pixel format of the texture. Use\n SDL_QueryTexture() to query the pixel format of the texture.\n\n This is a fairly slow function, intended for use with static textures that\n do not change often.\n\n If the texture is intended to be updated often, it is preferred to create\n the texture as streaming and use the locking functions referenced below.\n While this function will work with streaming textures, for optimization\n reasons you may not get the pixels back if you lock the texture afterward.\n\n \\param texture the texture to update\n \\param rect an SDL_Rect structure representing the area to update, or NULL\n             to update the entire texture\n \\param pixels the raw pixel data in the format of the texture\n \\param pitch the number of bytes in a row of pixel data, including padding\n              between lines\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTexture\n \\sa SDL_LockTexture\n \\sa SDL_UnlockTexture"]
    pub fn SDL_UpdateTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *const ::std::os::raw::c_void,
        pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update a rectangle within a planar YV12 or IYUV texture with new pixel\n data.\n\n You can use SDL_UpdateTexture() as long as your pixel data is a contiguous\n block of Y and U/V planes in the proper order, but this function is\n available if your pixel data is not contiguous.\n\n \\param texture the texture to update\n \\param rect a pointer to the rectangle of pixels to update, or NULL to\n             update the entire texture\n \\param Yplane the raw pixel data for the Y plane\n \\param Ypitch the number of bytes between rows of pixel data for the Y\n               plane\n \\param Uplane the raw pixel data for the U plane\n \\param Upitch the number of bytes between rows of pixel data for the U\n               plane\n \\param Vplane the raw pixel data for the V plane\n \\param Vpitch the number of bytes between rows of pixel data for the V\n               plane\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_UpdateTexture"]
    pub fn SDL_UpdateYUVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ::std::os::raw::c_int,
        Uplane: *const Uint8,
        Upitch: ::std::os::raw::c_int,
        Vplane: *const Uint8,
        Vpitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update a rectangle within a planar NV12 or NV21 texture with new pixels.\n\n You can use SDL_UpdateTexture() as long as your pixel data is a contiguous\n block of NV12/21 planes in the proper order, but this function is available\n if your pixel data is not contiguous.\n\n \\param texture the texture to update\n \\param rect a pointer to the rectangle of pixels to update, or NULL to\n             update the entire texture.\n \\param Yplane the raw pixel data for the Y plane.\n \\param Ypitch the number of bytes between rows of pixel data for the Y\n               plane.\n \\param UVplane the raw pixel data for the UV plane.\n \\param UVpitch the number of bytes between rows of pixel data for the UV\n                plane.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_UpdateNVTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        Yplane: *const Uint8,
        Ypitch: ::std::os::raw::c_int,
        UVplane: *const Uint8,
        UVpitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Lock a portion of the texture for **write-only** pixel access.\n\n As an optimization, the pixels made available for editing don't necessarily\n contain the old texture data. This is a write-only operation, and if you\n need to keep a copy of the texture data you should do that at the\n application level.\n\n You must use SDL_UnlockTexture() to unlock the pixels and apply any\n changes.\n\n \\param texture the texture to lock for access, which was created with\n                `SDL_TEXTUREACCESS_STREAMING`\n \\param rect an SDL_Rect structure representing the area to lock for access;\n             NULL to lock the entire texture\n \\param pixels this is filled in with a pointer to the locked pixels,\n               appropriately offset by the locked area\n \\param pitch this is filled in with the pitch of the locked pixels; the\n              pitch is the length of one row in bytes\n \\returns 0 on success or a negative error code if the texture is not valid\n          or was not created with `SDL_TEXTUREACCESS_STREAMING`; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_UnlockTexture"]
    pub fn SDL_LockTexture(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        pixels: *mut *mut ::std::os::raw::c_void,
        pitch: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Lock a portion of the texture for **write-only** pixel access, and expose\n it as a SDL surface.\n\n Besides providing an SDL_Surface instead of raw pixel data, this function\n operates like SDL_LockTexture.\n\n As an optimization, the pixels made available for editing don't necessarily\n contain the old texture data. This is a write-only operation, and if you\n need to keep a copy of the texture data you should do that at the\n application level.\n\n You must use SDL_UnlockTexture() to unlock the pixels and apply any\n changes.\n\n The returned surface is freed internally after calling SDL_UnlockTexture()\n or SDL_DestroyTexture(). The caller should not free it.\n\n \\param texture the texture to lock for access, which must be created with\n                `SDL_TEXTUREACCESS_STREAMING`\n \\param rect a pointer to the rectangle to lock for access. If the rect is\n             NULL, the entire texture will be locked\n \\param surface this is filled in with an SDL surface representing the\n                locked area\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LockTexture\n \\sa SDL_UnlockTexture"]
    pub fn SDL_LockTextureToSurface(
        texture: *mut SDL_Texture,
        rect: *const SDL_Rect,
        surface: *mut *mut SDL_Surface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unlock a texture, uploading the changes to video memory, if needed.\n\n **Warning**: Please note that SDL_LockTexture() is intended to be\n write-only; it will not guarantee the previous contents of the texture will\n be provided. You must fully initialize any area of a texture that you lock\n before unlocking it, as the pixels might otherwise be uninitialized memory.\n\n Which is to say: locking and immediately unlocking a texture can result in\n corrupted textures, depending on the renderer in use.\n\n \\param texture a texture locked by SDL_LockTexture()\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_LockTexture"]
    pub fn SDL_UnlockTexture(texture: *mut SDL_Texture);
}
extern "C" {
    #[doc = " Set a texture as the current rendering target.\n\n The default render target is the window for which the renderer was created.\n To stop rendering to a texture and render to the window again, call this\n function with a NULL `texture`.\n\n \\param renderer the rendering context\n \\param texture the targeted texture, which must be created with the\n                `SDL_TEXTUREACCESS_TARGET` flag, or NULL to render to the\n                window instead of a texture.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderTarget"]
    pub fn SDL_SetRenderTarget(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the current render target.\n\n The default render target is the window for which the renderer was created,\n and is reported a NULL here.\n\n \\param renderer the rendering context\n \\returns the current render target or NULL for the default render target.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderTarget"]
    pub fn SDL_GetRenderTarget(renderer: *mut SDL_Renderer) -> *mut SDL_Texture;
}
extern "C" {
    #[doc = " Set a device independent resolution and presentation mode for rendering.\n\n This function sets the width and height of the logical rendering output. A\n render target is created at the specified size and used for rendering and\n then copied to the output during presentation.\n\n You can disable logical coordinates by setting the mode to\n SDL_LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel\n resolution of the output window.\n\n You can convert coordinates in an event into rendering coordinates using\n SDL_ConvertEventToRenderCoordinates().\n\n \\param renderer the rendering context\n \\param w the width of the logical resolution\n \\param h the height of the logical resolution\n \\param mode the presentation mode used\n \\param scale_mode the scale mode used\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_ConvertEventToRenderCoordinates\n \\sa SDL_GetRenderLogicalPresentation"]
    pub fn SDL_SetRenderLogicalPresentation(
        renderer: *mut SDL_Renderer,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        mode: SDL_RendererLogicalPresentation,
        scale_mode: SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get device independent resolution and presentation mode for rendering.\n\n This function gets the width and height of the logical rendering output, or\n the output size in pixels if a logical resolution is not enabled.\n\n \\param renderer the rendering context\n \\param w an int to be filled with the width\n \\param h an int to be filled with the height\n \\param mode a pointer filled in with the presentation mode\n \\param scale_mode a pointer filled in with the scale mode\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderLogicalPresentation"]
    pub fn SDL_GetRenderLogicalPresentation(
        renderer: *mut SDL_Renderer,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
        mode: *mut SDL_RendererLogicalPresentation,
        scale_mode: *mut SDL_ScaleMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a point in render coordinates when given a point in window coordinates.\n\n \\param renderer the rendering context\n \\param window_x the x coordinate in window coordinates\n \\param window_y the y coordinate in window coordinates\n \\param x a pointer filled with the x coordinate in render coordinates\n \\param y a pointer filled with the y coordinate in render coordinates\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderLogicalPresentation\n \\sa SDL_SetRenderScale"]
    pub fn SDL_RenderCoordinatesFromWindow(
        renderer: *mut SDL_Renderer,
        window_x: f32,
        window_y: f32,
        x: *mut f32,
        y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get a point in window coordinates when given a point in render coordinates.\n\n \\param renderer the rendering context\n \\param x the x coordinate in render coordinates\n \\param y the y coordinate in render coordinates\n \\param window_x a pointer filled with the x coordinate in window\n                 coordinates\n \\param window_y a pointer filled with the y coordinate in window\n                 coordinates\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderLogicalPresentation\n \\sa SDL_SetRenderScale"]
    pub fn SDL_RenderCoordinatesToWindow(
        renderer: *mut SDL_Renderer,
        x: f32,
        y: f32,
        window_x: *mut f32,
        window_y: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert the coordinates in an event to render coordinates.\n\n Touch coordinates are converted from normalized coordinates in the window\n to non-normalized rendering coordinates.\n\n Once converted, the coordinates may be outside the rendering area.\n\n \\param renderer the rendering context\n \\param event the event to modify\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderCoordinatesFromWindowCoordinates"]
    pub fn SDL_ConvertEventToRenderCoordinates(
        renderer: *mut SDL_Renderer,
        event: *mut SDL_Event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the drawing area for rendering on the current target.\n\n \\param renderer the rendering context\n \\param rect the SDL_Rect structure representing the drawing area, or NULL\n             to set the viewport to the entire target\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderViewport"]
    pub fn SDL_SetRenderViewport(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the drawing area for the current target.\n\n \\param renderer the rendering context\n \\param rect an SDL_Rect structure filled in with the current drawing area\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderViewport"]
    pub fn SDL_GetRenderViewport(
        renderer: *mut SDL_Renderer,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the clip rectangle for rendering on the specified target.\n\n \\param renderer the rendering context\n \\param rect an SDL_Rect structure representing the clip area, relative to\n             the viewport, or NULL to disable clipping\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderClipRect\n \\sa SDL_RenderClipEnabled"]
    pub fn SDL_SetRenderClipRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the clip rectangle for the current target.\n\n \\param renderer the rendering context\n \\param rect an SDL_Rect structure filled in with the current clipping area\n             or an empty rectangle if clipping is disabled\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RenderClipEnabled\n \\sa SDL_SetRenderClipRect"]
    pub fn SDL_GetRenderClipRect(
        renderer: *mut SDL_Renderer,
        rect: *mut SDL_Rect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get whether clipping is enabled on the given renderer.\n\n \\param renderer the rendering context\n \\returns SDL_TRUE if clipping is enabled or SDL_FALSE if not; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderClipRect\n \\sa SDL_SetRenderClipRect"]
    pub fn SDL_RenderClipEnabled(renderer: *mut SDL_Renderer) -> SDL_bool;
}
extern "C" {
    #[doc = " Set the drawing scale for rendering on the current target.\n\n The drawing coordinates are scaled by the x/y scaling factors before they\n are used by the renderer. This allows resolution independent drawing with a\n single coordinate system.\n\n If this results in scaling or subpixel drawing by the rendering backend, it\n will be handled using the appropriate quality hints. For best results use\n integer scaling factors.\n\n \\param renderer the rendering context\n \\param scaleX the horizontal scaling factor\n \\param scaleY the vertical scaling factor\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderScale"]
    pub fn SDL_SetRenderScale(
        renderer: *mut SDL_Renderer,
        scaleX: f32,
        scaleY: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the drawing scale for the current target.\n\n \\param renderer the rendering context\n \\param scaleX a pointer filled in with the horizontal scaling factor\n \\param scaleY a pointer filled in with the vertical scaling factor\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderScale"]
    pub fn SDL_GetRenderScale(
        renderer: *mut SDL_Renderer,
        scaleX: *mut f32,
        scaleY: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the color used for drawing operations (Rect, Line and Clear).\n\n Set the color for drawing or filling rectangles, lines, and points, and for\n SDL_RenderClear().\n\n \\param renderer the rendering context\n \\param r the red value used to draw on the rendering target\n \\param g the green value used to draw on the rendering target\n \\param b the blue value used to draw on the rendering target\n \\param a the alpha value used to draw on the rendering target; usually\n          `SDL_ALPHA_OPAQUE` (255). Use SDL_SetRenderDrawBlendMode to\n          specify how the alpha channel is used\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderDrawColor\n \\sa SDL_RenderClear\n \\sa SDL_RenderLine\n \\sa SDL_RenderLines\n \\sa SDL_RenderPoint\n \\sa SDL_RenderPoints\n \\sa SDL_RenderRect\n \\sa SDL_RenderRects\n \\sa SDL_RenderFillRect\n \\sa SDL_RenderFillRects"]
    pub fn SDL_SetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: Uint8,
        g: Uint8,
        b: Uint8,
        a: Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the color used for drawing operations (Rect, Line and Clear).\n\n \\param renderer the rendering context\n \\param r a pointer filled in with the red value used to draw on the\n          rendering target\n \\param g a pointer filled in with the green value used to draw on the\n          rendering target\n \\param b a pointer filled in with the blue value used to draw on the\n          rendering target\n \\param a a pointer filled in with the alpha value used to draw on the\n          rendering target; usually `SDL_ALPHA_OPAQUE` (255)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderDrawColor"]
    pub fn SDL_GetRenderDrawColor(
        renderer: *mut SDL_Renderer,
        r: *mut Uint8,
        g: *mut Uint8,
        b: *mut Uint8,
        a: *mut Uint8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Set the blend mode used for drawing operations (Fill and Line).\n\n If the blend mode is not supported, the closest supported mode is chosen.\n\n \\param renderer the rendering context\n \\param blendMode the SDL_BlendMode to use for blending\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderDrawBlendMode\n \\sa SDL_RenderLine\n \\sa SDL_RenderLines\n \\sa SDL_RenderPoint\n \\sa SDL_RenderPoints\n \\sa SDL_RenderRect\n \\sa SDL_RenderRects\n \\sa SDL_RenderFillRect\n \\sa SDL_RenderFillRects"]
    pub fn SDL_SetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the blend mode used for drawing operations.\n\n \\param renderer the rendering context\n \\param blendMode a pointer filled in with the current SDL_BlendMode\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderDrawBlendMode"]
    pub fn SDL_GetRenderDrawBlendMode(
        renderer: *mut SDL_Renderer,
        blendMode: *mut SDL_BlendMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Clear the current rendering target with the drawing color.\n\n This function clears the entire rendering target, ignoring the viewport and\n the clip rectangle.\n\n \\param renderer the rendering context\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_SetRenderDrawColor"]
    pub fn SDL_RenderClear(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw a point on the current rendering target at subpixel precision.\n\n \\param renderer The renderer which should draw a point.\n \\param x The x coordinate of the point.\n \\param y The y coordinate of the point.\n \\returns 0 on success, or -1 on error\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderPoint(renderer: *mut SDL_Renderer, x: f32, y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw multiple points on the current rendering target at subpixel precision.\n\n \\param renderer The renderer which should draw multiple points.\n \\param points The points to draw\n \\param count The number of points to draw\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderPoints(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw a line on the current rendering target at subpixel precision.\n\n \\param renderer The renderer which should draw a line.\n \\param x1 The x coordinate of the start point.\n \\param y1 The y coordinate of the start point.\n \\param x2 The x coordinate of the end point.\n \\param y2 The y coordinate of the end point.\n \\returns 0 on success, or -1 on error\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderLine(
        renderer: *mut SDL_Renderer,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw a series of connected lines on the current rendering target at\n subpixel precision.\n\n \\param renderer The renderer which should draw multiple lines.\n \\param points The points along the lines\n \\param count The number of points, drawing count-1 lines\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderLines(
        renderer: *mut SDL_Renderer,
        points: *const SDL_FPoint,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw a rectangle on the current rendering target at subpixel precision.\n\n \\param renderer The renderer which should draw a rectangle.\n \\param rect A pointer to the destination rectangle, or NULL to outline the\n             entire rendering target.\n \\returns 0 on success, or -1 on error\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Draw some number of rectangles on the current rendering target at subpixel\n precision.\n\n \\param renderer The renderer which should draw multiple rectangles.\n \\param rects A pointer to an array of destination rectangles.\n \\param count The number of rectangles.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Fill a rectangle on the current rendering target with the drawing color at\n subpixel precision.\n\n \\param renderer The renderer which should fill a rectangle.\n \\param rect A pointer to the destination rectangle, or NULL for the entire\n             rendering target.\n \\returns 0 on success, or -1 on error\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderFillRect(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Fill some number of rectangles on the current rendering target with the\n drawing color at subpixel precision.\n\n \\param renderer The renderer which should fill multiple rectangles.\n \\param rects A pointer to an array of destination rectangles.\n \\param count The number of rectangles.\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderFillRects(
        renderer: *mut SDL_Renderer,
        rects: *const SDL_FRect,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Copy a portion of the texture to the current rendering target at subpixel\n precision.\n\n \\param renderer The renderer which should copy parts of a texture.\n \\param texture The source texture.\n \\param srcrect A pointer to the source rectangle, or NULL for the entire\n                texture.\n \\param dstrect A pointer to the destination rectangle, or NULL for the\n                entire rendering target.\n \\returns 0 on success, or -1 on error\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderTexture(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_FRect,
        dstrect: *const SDL_FRect,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Copy a portion of the source texture to the current rendering target, with\n rotation and flipping, at subpixel precision.\n\n \\param renderer The renderer which should copy parts of a texture.\n \\param texture The source texture.\n \\param srcrect A pointer to the source rectangle, or NULL for the entire\n                texture.\n \\param dstrect A pointer to the destination rectangle, or NULL for the\n                entire rendering target.\n \\param angle An angle in degrees that indicates the rotation that will be\n              applied to dstrect, rotating it in a clockwise direction\n \\param center A pointer to a point indicating the point around which\n               dstrect will be rotated (if NULL, rotation will be done\n               around dstrect.w/2, dstrect.h/2).\n \\param flip An SDL_RendererFlip value stating which flipping actions should\n             be performed on the texture\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderTextureRotated(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        srcrect: *const SDL_FRect,
        dstrect: *const SDL_FRect,
        angle: f64,
        center: *const SDL_FPoint,
        flip: SDL_RendererFlip,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Render a list of triangles, optionally using a texture and indices into the\n vertex array Color and alpha modulation is done per vertex\n (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n \\param renderer The rendering context.\n \\param texture (optional) The SDL texture to use.\n \\param vertices Vertices.\n \\param num_vertices Number of vertices.\n \\param indices (optional) An array of integer indices into the 'vertices'\n                array, if NULL all vertices will be rendered in sequential\n                order.\n \\param num_indices Number of indices.\n \\returns 0 on success, or -1 if the operation is not supported\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RenderGeometryRaw\n \\sa SDL_Vertex"]
    pub fn SDL_RenderGeometry(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        vertices: *const SDL_Vertex,
        num_vertices: ::std::os::raw::c_int,
        indices: *const ::std::os::raw::c_int,
        num_indices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Render a list of triangles, optionally using a texture and indices into the\n vertex arrays Color and alpha modulation is done per vertex\n (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n\n \\param renderer The rendering context.\n \\param texture (optional) The SDL texture to use.\n \\param xy Vertex positions\n \\param xy_stride Byte size to move from one element to the next element\n \\param color Vertex colors (as SDL_Color)\n \\param color_stride Byte size to move from one element to the next element\n \\param uv Vertex normalized texture coordinates\n \\param uv_stride Byte size to move from one element to the next element\n \\param num_vertices Number of vertices.\n \\param indices (optional) An array of indices into the 'vertices' arrays,\n                if NULL all vertices will be rendered in sequential order.\n \\param num_indices Number of indices.\n \\param size_indices Index size: 1 (byte), 2 (short), 4 (int)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RenderGeometry\n \\sa SDL_Vertex"]
    pub fn SDL_RenderGeometryRaw(
        renderer: *mut SDL_Renderer,
        texture: *mut SDL_Texture,
        xy: *const f32,
        xy_stride: ::std::os::raw::c_int,
        color: *const SDL_Color,
        color_stride: ::std::os::raw::c_int,
        uv: *const f32,
        uv_stride: ::std::os::raw::c_int,
        num_vertices: ::std::os::raw::c_int,
        indices: *const ::std::os::raw::c_void,
        num_indices: ::std::os::raw::c_int,
        size_indices: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Read pixels from the current rendering target to an array of pixels.\n\n **WARNING**: This is a very slow operation, and should not be used\n frequently. If you're using this on the main rendering target, it should be\n called after rendering and before SDL_RenderPresent().\n\n `pitch` specifies the number of bytes between rows in the destination\n `pixels` data. This allows you to write to a subrectangle or have padded\n rows in the destination. Generally, `pitch` should equal the number of\n pixels per row in the `pixels` data times the number of bytes per pixel,\n but it might contain additional padding (for example, 24bit RGB Windows\n Bitmap data pads all rows to multiples of 4 bytes).\n\n \\param renderer the rendering context\n \\param rect an SDL_Rect structure representing the area in pixels relative\n             to the to current viewport, or NULL for the entire viewport\n \\param format an SDL_PixelFormatEnum value of the desired format of the\n               pixel data, or 0 to use the format of the rendering target\n \\param pixels a pointer to the pixel data to copy into\n \\param pitch the pitch of the `pixels` parameter\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderReadPixels(
        renderer: *mut SDL_Renderer,
        rect: *const SDL_Rect,
        format: Uint32,
        pixels: *mut ::std::os::raw::c_void,
        pitch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Update the screen with any rendering performed since the previous call.\n\n SDL's rendering functions operate on a backbuffer; that is, calling a\n rendering function such as SDL_RenderLine() does not directly put a line on\n the screen, but rather updates the backbuffer. As such, you compose your\n entire scene and *present* the composed backbuffer to the screen as a\n complete picture.\n\n Therefore, when using SDL's rendering API, one does all drawing intended\n for the frame, and then calls this function once per frame to present the\n final drawing to the user.\n\n The backbuffer should be considered invalidated after each present; do not\n assume that previous contents will exist between frames. You are strongly\n encouraged to call SDL_RenderClear() to initialize the backbuffer before\n starting each new frame's drawing, even if you plan to overwrite every\n pixel.\n\n \\param renderer the rendering context\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\threadsafety You may only call this function on the main thread.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RenderClear\n \\sa SDL_RenderLine\n \\sa SDL_RenderLines\n \\sa SDL_RenderPoint\n \\sa SDL_RenderPoints\n \\sa SDL_RenderRect\n \\sa SDL_RenderRects\n \\sa SDL_RenderFillRect\n \\sa SDL_RenderFillRects\n \\sa SDL_SetRenderDrawBlendMode\n \\sa SDL_SetRenderDrawColor"]
    pub fn SDL_RenderPresent(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Destroy the specified texture.\n\n Passing NULL or an otherwise invalid texture will set the SDL error message\n to \"Invalid texture\".\n\n \\param texture the texture to destroy\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateTexture\n \\sa SDL_CreateTextureFromSurface"]
    pub fn SDL_DestroyTexture(texture: *mut SDL_Texture);
}
extern "C" {
    #[doc = " Destroy the rendering context for a window and free associated textures.\n\n If `renderer` is NULL, this function will return immediately after setting\n the SDL error message to \"Invalid renderer\". See SDL_GetError().\n\n \\param renderer the rendering context\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateRenderer"]
    pub fn SDL_DestroyRenderer(renderer: *mut SDL_Renderer);
}
extern "C" {
    #[doc = " Force the rendering context to flush any pending commands to the underlying\n rendering API.\n\n You do not need to (and in fact, shouldn't) call this function unless you\n are planning to call into OpenGL/Direct3D/Metal/whatever directly in\n addition to using an SDL_Renderer.\n\n This is for a very-specific case: if you are using SDL's render API, you\n asked for a specific renderer backend (OpenGL, Direct3D, etc), you set\n SDL_HINT_RENDER_BATCHING to \"1\", and you plan to make OpenGL/D3D/whatever\n calls in addition to SDL render API calls. If all of this applies, you\n should call SDL_RenderFlush() between calls to SDL's render API and the\n low-level API you're using in cooperation.\n\n In all other cases, you can ignore this function. This is only here to get\n maximum performance out of a specific situation. In all other cases, SDL\n will do the right thing, perhaps at a performance loss.\n\n This function is first available in SDL 2.0.10, and is not needed in 2.0.9\n and earlier, as earlier versions did not queue rendering commands at all,\n instead flushing them to the OS immediately.\n\n \\param renderer the rendering context\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_RenderFlush(renderer: *mut SDL_Renderer) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Bind an OpenGL/ES/ES2 texture to the current context.\n\n This is for use with OpenGL instructions when rendering OpenGL primitives\n directly.\n\n If not NULL, `texw` and `texh` will be filled with the width and height\n values suitable for the provided texture. In most cases, both will be 1.0,\n however, on systems that support the GL_ARB_texture_rectangle extension,\n these values will actually be the pixel width and height used to create the\n texture, so this factor needs to be taken into account when providing\n texture coordinates to OpenGL.\n\n You need a renderer to create an SDL_Texture, therefore you can only use\n this function with an implicit OpenGL context from SDL_CreateRenderer(),\n not with your own OpenGL context. If you need control over your OpenGL\n context, you need to write your own texture-loading methods.\n\n Also note that SDL may upload RGB textures as BGR (or vice-versa), and\n re-order the color channels in the shaders phase, so the uploaded texture\n may have swapped color channels.\n\n \\param texture the texture to bind to the current OpenGL/ES/ES2 context\n \\param texw a pointer to a float value which will be filled with the\n             texture width or NULL if you don't need that value\n \\param texh a pointer to a float value which will be filled with the\n             texture height or NULL if you don't need that value\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_MakeCurrent\n \\sa SDL_GL_UnbindTexture"]
    pub fn SDL_GL_BindTexture(
        texture: *mut SDL_Texture,
        texw: *mut f32,
        texh: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Unbind an OpenGL/ES/ES2 texture from the current context.\n\n See SDL_GL_BindTexture() for examples on how to use these functions\n\n \\param texture the texture to unbind from the current OpenGL/ES/ES2 context\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GL_BindTexture\n \\sa SDL_GL_MakeCurrent"]
    pub fn SDL_GL_UnbindTexture(texture: *mut SDL_Texture) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the CAMetalLayer associated with the given Metal renderer.\n\n This function returns `void *`, so SDL doesn't have to include Metal's\n headers, but it can be safely cast to a `CAMetalLayer *`.\n\n \\param renderer The renderer to query\n \\returns a `CAMetalLayer *` on success, or NULL if the renderer isn't a\n          Metal renderer\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderMetalCommandEncoder"]
    pub fn SDL_GetRenderMetalLayer(renderer: *mut SDL_Renderer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Get the Metal command encoder for the current frame\n\n This function returns `void *`, so SDL doesn't have to include Metal's\n headers, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.\n\n Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give\n SDL a drawable to render to, which might happen if the window is\n hidden/minimized/offscreen. This doesn't apply to command encoders for\n render targets, just the window's backbuffer. Check your return values!\n\n \\param renderer The renderer to query\n \\returns an `id<MTLRenderCommandEncoder>` on success, or NULL if the\n          renderer isn't a Metal renderer or there was an error.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRenderMetalLayer"]
    pub fn SDL_GetRenderMetalCommandEncoder(
        renderer: *mut SDL_Renderer,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Toggle VSync of the given renderer.\n\n \\param renderer The renderer to toggle\n \\param vsync 1 for on, 0 for off. All other values are reserved\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_SetRenderVSync(
        renderer: *mut SDL_Renderer,
        vsync: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get VSync of the given renderer.\n\n \\param renderer The renderer to toggle\n \\param vsync an int filled with 1 for on, 0 for off. All other values are\n              reserved\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetRenderVSync(
        renderer: *mut SDL_Renderer,
        vsync: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Create a window that can be shaped with the specified dimensions and flags.\n\n \\param title The title of the window, in UTF-8 encoding.\n \\param w The width of the window.\n \\param h The height of the window.\n \\param flags The flags for the window, a mask of SDL_WINDOW_BORDERLESS with\n              any of the following: ::SDL_WINDOW_OPENGL,\n              ::SDL_WINDOW_MOUSE_GRABBED, ::SDL_WINDOW_HIDDEN,\n              ::SDL_WINDOW_RESIZABLE, ::SDL_WINDOW_MAXIMIZED,\n              ::SDL_WINDOW_MINIMIZED, ::SDL_WINDOW_BORDERLESS is always set,\n              and ::SDL_WINDOW_FULLSCREEN is always unset.\n \\returns the window created, or NULL if window creation failed.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_DestroyWindow"]
    pub fn SDL_CreateShapedWindow(
        title: *const ::std::os::raw::c_char,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        flags: Uint32,
    ) -> *mut SDL_Window;
}
extern "C" {
    #[doc = " Return whether the given window is a shaped window.\n\n \\param window The window to query for being shaped.\n \\returns SDL_TRUE if the window is a window that can be shaped, SDL_FALSE\n          if the window is unshaped or NULL.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_CreateShapedWindow"]
    pub fn SDL_IsShapedWindow(window: *const SDL_Window) -> SDL_bool;
}
#[doc = " \\brief The default mode, a binarized alpha cutoff of 1."]
pub const WindowShapeMode_ShapeModeDefault: WindowShapeMode = 0;
#[doc = " \\brief A binarized alpha cutoff with a given integer value."]
pub const WindowShapeMode_ShapeModeBinarizeAlpha: WindowShapeMode = 1;
#[doc = " \\brief A binarized alpha cutoff with a given integer value, but with the opposite comparison."]
pub const WindowShapeMode_ShapeModeReverseBinarizeAlpha: WindowShapeMode = 2;
#[doc = " \\brief A color key is applied."]
pub const WindowShapeMode_ShapeModeColorKey: WindowShapeMode = 3;
#[doc = " \\brief An enum denoting the specific type of contents present in an SDL_WindowShapeParams union."]
pub type WindowShapeMode = ::std::os::raw::c_uint;
#[doc = " \\brief A union containing parameters for shaped windows."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union SDL_WindowShapeParams {
    #[doc = " \\brief A cutoff alpha value for binarization of the window shape's alpha channel."]
    pub binarizationCutoff: Uint8,
    pub colorKey: SDL_Color,
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeParams() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowShapeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowShapeParams>(),
        4usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowShapeParams>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binarizationCutoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(binarizationCutoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorKey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeParams),
            "::",
            stringify!(colorKey)
        )
    );
}
#[doc = " \\brief A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SDL_WindowShapeMode {
    #[doc = " \\brief The mode of these window-shape parameters."]
    pub mode: WindowShapeMode,
    #[doc = " \\brief Window-shape parameters."]
    pub parameters: SDL_WindowShapeParams,
}
#[test]
fn bindgen_test_layout_SDL_WindowShapeMode() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_WindowShapeMode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_WindowShapeMode>(),
        8usize,
        concat!("Size of: ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_WindowShapeMode>(),
        4usize,
        concat!("Alignment of ", stringify!(SDL_WindowShapeMode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_WindowShapeMode),
            "::",
            stringify!(parameters)
        )
    );
}
extern "C" {
    #[doc = " Set the shape and parameters of a shaped window.\n\n \\param window The shaped window whose parameters should be set.\n \\param shape A surface encoding the desired shape for the window.\n \\param shape_mode The parameters to set for the shaped window.\n \\returns 0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape\n          argument, or SDL_NONSHAPEABLE_WINDOW if the SDL_Window given does\n          not reference a valid shaped window.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_WindowShapeMode\n \\sa SDL_GetShapedWindowMode"]
    pub fn SDL_SetWindowShape(
        window: *mut SDL_Window,
        shape: *mut SDL_Surface,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the shape parameters of a shaped window.\n\n \\param window The shaped window whose parameters should be retrieved.\n \\param shape_mode An empty shape-mode structure to fill, or NULL to check\n                   whether the window has a shape.\n \\returns 0 if the window has a shape and, provided shape_mode was not NULL,\n          shape_mode has been filled with the mode data,\n          SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped\n          window, or SDL_WINDOW_LACKS_SHAPE if the SDL_Window given is a\n          shapeable window currently lacking a shape.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_WindowShapeMode\n \\sa SDL_SetWindowShape"]
    pub fn SDL_GetShapedWindowMode(
        window: *mut SDL_Window,
        shape_mode: *mut SDL_WindowShapeMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sets the UNIX nice value for a thread.\n\n This uses setpriority() if possible, and RealtimeKit if available.\n\n \\param threadID the Unix thread ID to change priority of.\n \\param priority The new, Unix-specific, priority value.\n \\returns 0 on success, or -1 on error.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LinuxSetThreadPriority(
        threadID: Sint64,
        priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Sets the priority (not nice level) and scheduling policy for a thread.\n\n This uses setpriority() if possible, and RealtimeKit if available.\n\n \\param threadID The Unix thread ID to change priority of.\n \\param sdlPriority The new SDL_ThreadPriority value.\n \\param schedPolicy The new scheduling policy (SCHED_FIFO, SCHED_RR,\n                    SCHED_OTHER, etc...)\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_LinuxSetThreadPriorityAndPolicy(
        threadID: Sint64,
        sdlPriority: ::std::os::raw::c_int,
        schedPolicy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Query if the current device is a tablet.\n\n If SDL can't determine this, it will return SDL_FALSE.\n\n \\returns SDL_TRUE if the device is a tablet, SDL_FALSE otherwise.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_IsTablet() -> SDL_bool;
}
extern "C" {
    pub fn SDL_OnApplicationWillTerminate();
}
extern "C" {
    pub fn SDL_OnApplicationDidReceiveMemoryWarning();
}
extern "C" {
    pub fn SDL_OnApplicationWillResignActive();
}
extern "C" {
    pub fn SDL_OnApplicationDidEnterBackground();
}
extern "C" {
    pub fn SDL_OnApplicationWillEnterForeground();
}
extern "C" {
    pub fn SDL_OnApplicationDidBecomeActive();
}
extern "C" {
    #[doc = " Get the number of milliseconds since SDL library initialization.\n\n \\returns an unsigned 64-bit value representing the number of milliseconds\n          since the SDL library initialized.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetTicks() -> Uint64;
}
extern "C" {
    #[doc = " Get the number of nanoseconds since SDL library initialization.\n\n \\returns an unsigned 64-bit value representing the number of nanoseconds\n          since the SDL library initialized.\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_GetTicksNS() -> Uint64;
}
extern "C" {
    #[doc = " Get the current value of the high resolution counter.\n\n This function is typically used for profiling.\n\n The counter values are only meaningful relative to each other. Differences\n between values can be converted to times by using\n SDL_GetPerformanceFrequency().\n\n \\returns the current counter value.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPerformanceFrequency"]
    pub fn SDL_GetPerformanceCounter() -> Uint64;
}
extern "C" {
    #[doc = " Get the count per second of the high resolution counter.\n\n \\returns a platform-specific count per second.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetPerformanceCounter"]
    pub fn SDL_GetPerformanceFrequency() -> Uint64;
}
extern "C" {
    #[doc = " Wait a specified number of milliseconds before returning.\n\n This function waits a specified number of milliseconds before returning. It\n waits at least the specified time, but possibly longer due to OS\n scheduling.\n\n \\param ms the number of milliseconds to delay\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_Delay(ms: Uint32);
}
extern "C" {
    #[doc = " Wait a specified number of nanoseconds before returning.\n\n This function waits a specified number of nanoseconds before returning. It\n waits at least the specified time, but possibly longer due to OS\n scheduling.\n\n \\param ns the number of nanoseconds to delay\n\n \\since This function is available since SDL 3.0.0."]
    pub fn SDL_DelayNS(ns: Uint64);
}
#[doc = " Function prototype for the timer callback function.\n\n The callback function is passed the current timer interval and returns\n the next timer interval, in milliseconds. If the returned value is the same as the one\n passed in, the periodic alarm continues, otherwise a new alarm is\n scheduled. If the callback returns 0, the periodic alarm is cancelled."]
pub type SDL_TimerCallback = ::std::option::Option<
    unsafe extern "C" fn(interval: Uint32, param: *mut ::std::os::raw::c_void) -> Uint32,
>;
#[doc = " Definition of the timer ID type."]
pub type SDL_TimerID = ::std::os::raw::c_int;
extern "C" {
    #[doc = " Call a callback function at a future time.\n\n If you use this function, you must pass `SDL_INIT_TIMER` to SDL_Init().\n\n The callback function is passed the current timer interval and the user\n supplied parameter from the SDL_AddTimer() call and should return the next\n timer interval. If the value returned from the callback is 0, the timer is\n canceled.\n\n The callback is run on a separate thread.\n\n Timers take into account the amount of time it took to execute the\n callback. For example, if the callback took 250 ms to execute and returned\n 1000 (ms), the timer would only wait another 750 ms before its next\n iteration.\n\n Timing may be inexact due to OS scheduling. Be sure to note the current\n time with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your\n callback needs to adjust for variances.\n\n \\param interval the timer delay, in milliseconds, passed to `callback`\n \\param callback the SDL_TimerCallback function to call when the specified\n                 `interval` elapses\n \\param param a pointer that is passed to `callback`\n \\returns a timer ID or 0 if an error occurs; call SDL_GetError() for more\n          information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_RemoveTimer"]
    pub fn SDL_AddTimer(
        interval: Uint32,
        callback: SDL_TimerCallback,
        param: *mut ::std::os::raw::c_void,
    ) -> SDL_TimerID;
}
extern "C" {
    #[doc = " Remove a timer created with SDL_AddTimer().\n\n \\param id the ID of the timer to remove\n \\returns SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn't\n          found.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_AddTimer"]
    pub fn SDL_RemoveTimer(id: SDL_TimerID) -> SDL_bool;
}
#[doc = " Information about the version of SDL in use.\n\n Represents the library's version as three levels: major revision\n (increments with massive changes, additions, and enhancements),\n minor revision (increments with backwards-compatible changes to the\n major revision), and patchlevel (increments with fixes to the minor\n revision).\n\n \\sa SDL_VERSION\n \\sa SDL_GetVersion"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_version {
    #[doc = "< major version"]
    pub major: Uint8,
    #[doc = "< minor version"]
    pub minor: Uint8,
    #[doc = "< update version"]
    pub patch: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_version() {
    const UNINIT: ::std::mem::MaybeUninit<SDL_version> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDL_version>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_version))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_version>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_version))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(patch)
        )
    );
}
extern "C" {
    #[doc = " Get the version of SDL that is linked against your program.\n\n If you are linking to SDL dynamically, then it is possible that the current\n version will be different than the version you compiled against. This\n function returns the current version, while SDL_VERSION() is a macro that\n tells you what version you compiled with.\n\n This function may be called safely at any time, even before SDL_Init().\n\n \\param ver the SDL_version structure that contains the version information\n \\returns 0 on success or a negative error code on failure; call\n          SDL_GetError() for more information.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetRevision"]
    pub fn SDL_GetVersion(ver: *mut SDL_version) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the code revision of SDL that is linked against your program.\n\n This value is the revision of the code you are linked with and may be\n different from the code you are compiling with, which is found in the\n constant SDL_REVISION.\n\n The revision is arbitrary string (a hash value) uniquely identifying the\n exact revision of the SDL library in use, and is only useful in comparing\n against other revisions. It is NOT an incrementing number.\n\n If SDL wasn't built from a git repository with the appropriate tools, this\n will return an empty string.\n\n Prior to SDL 2.0.16, before development moved to GitHub, this returned a\n hash for a Mercurial repository.\n\n You shouldn't use this function for anything but logging it for debugging\n purposes. The string is not intended to be reliable in any way.\n\n \\returns an arbitrary string, uniquely identifying the exact revision of\n          the SDL library in use.\n\n \\since This function is available since SDL 3.0.0.\n\n \\sa SDL_GetVersion"]
    pub fn SDL_GetRevision() -> *const ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
